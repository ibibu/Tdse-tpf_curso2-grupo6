
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075d8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  080076e4  080076e4  000086e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ab8  08007ab8  00009124  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007ab8  08007ab8  00008ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ac0  08007ac0  00009124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ac0  08007ac0  00008ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ac4  08007ac4  00008ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000124  20000000  08007ac8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  20000124  08007bec  00009124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000658  08007bec  00009658  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fdf6  00000000  00000000  0000914d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ef6  00000000  00000000  00018f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  0001be40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a1b  00000000  00000000  0001cb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019968  00000000  00000000  0001d583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000137ea  00000000  00000000  00036eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b12a  00000000  00000000  0004a6d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d57ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042fc  00000000  00000000  000d5844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d9b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000124 	.word	0x20000124
 8000128:	00000000 	.word	0x00000000
 800012c:	080076cc 	.word	0x080076cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000128 	.word	0x20000128
 8000148:	080076cc 	.word	0x080076cc

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_f2iz>:
 8000718:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800071c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000720:	d30f      	bcc.n	8000742 <__aeabi_f2iz+0x2a>
 8000722:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000726:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800072a:	d90d      	bls.n	8000748 <__aeabi_f2iz+0x30>
 800072c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000730:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000734:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000738:	fa23 f002 	lsr.w	r0, r3, r2
 800073c:	bf18      	it	ne
 800073e:	4240      	negne	r0, r0
 8000740:	4770      	bx	lr
 8000742:	f04f 0000 	mov.w	r0, #0
 8000746:	4770      	bx	lr
 8000748:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800074c:	d101      	bne.n	8000752 <__aeabi_f2iz+0x3a>
 800074e:	0242      	lsls	r2, r0, #9
 8000750:	d105      	bne.n	800075e <__aeabi_f2iz+0x46>
 8000752:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000756:	bf08      	it	eq
 8000758:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800075c:	4770      	bx	lr
 800075e:	f04f 0000 	mov.w	r0, #0
 8000762:	4770      	bx	lr

08000764 <__aeabi_uldivmod>:
 8000764:	b953      	cbnz	r3, 800077c <__aeabi_uldivmod+0x18>
 8000766:	b94a      	cbnz	r2, 800077c <__aeabi_uldivmod+0x18>
 8000768:	2900      	cmp	r1, #0
 800076a:	bf08      	it	eq
 800076c:	2800      	cmpeq	r0, #0
 800076e:	bf1c      	itt	ne
 8000770:	f04f 31ff 	movne.w	r1, #4294967295
 8000774:	f04f 30ff 	movne.w	r0, #4294967295
 8000778:	f000 b98c 	b.w	8000a94 <__aeabi_idiv0>
 800077c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000780:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000784:	f000 f806 	bl	8000794 <__udivmoddi4>
 8000788:	f8dd e004 	ldr.w	lr, [sp, #4]
 800078c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000790:	b004      	add	sp, #16
 8000792:	4770      	bx	lr

08000794 <__udivmoddi4>:
 8000794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000798:	9d08      	ldr	r5, [sp, #32]
 800079a:	468e      	mov	lr, r1
 800079c:	4604      	mov	r4, r0
 800079e:	4688      	mov	r8, r1
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d14a      	bne.n	800083a <__udivmoddi4+0xa6>
 80007a4:	428a      	cmp	r2, r1
 80007a6:	4617      	mov	r7, r2
 80007a8:	d962      	bls.n	8000870 <__udivmoddi4+0xdc>
 80007aa:	fab2 f682 	clz	r6, r2
 80007ae:	b14e      	cbz	r6, 80007c4 <__udivmoddi4+0x30>
 80007b0:	f1c6 0320 	rsb	r3, r6, #32
 80007b4:	fa01 f806 	lsl.w	r8, r1, r6
 80007b8:	fa20 f303 	lsr.w	r3, r0, r3
 80007bc:	40b7      	lsls	r7, r6
 80007be:	ea43 0808 	orr.w	r8, r3, r8
 80007c2:	40b4      	lsls	r4, r6
 80007c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c8:	fbb8 f1fe 	udiv	r1, r8, lr
 80007cc:	fa1f fc87 	uxth.w	ip, r7
 80007d0:	fb0e 8811 	mls	r8, lr, r1, r8
 80007d4:	fb01 f20c 	mul.w	r2, r1, ip
 80007d8:	0c23      	lsrs	r3, r4, #16
 80007da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007de:	429a      	cmp	r2, r3
 80007e0:	d909      	bls.n	80007f6 <__udivmoddi4+0x62>
 80007e2:	18fb      	adds	r3, r7, r3
 80007e4:	f101 30ff 	add.w	r0, r1, #4294967295
 80007e8:	f080 80eb 	bcs.w	80009c2 <__udivmoddi4+0x22e>
 80007ec:	429a      	cmp	r2, r3
 80007ee:	f240 80e8 	bls.w	80009c2 <__udivmoddi4+0x22e>
 80007f2:	3902      	subs	r1, #2
 80007f4:	443b      	add	r3, r7
 80007f6:	1a9a      	subs	r2, r3, r2
 80007f8:	fbb2 f0fe 	udiv	r0, r2, lr
 80007fc:	fb0e 2210 	mls	r2, lr, r0, r2
 8000800:	fb00 fc0c 	mul.w	ip, r0, ip
 8000804:	b2a3      	uxth	r3, r4
 8000806:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800080a:	459c      	cmp	ip, r3
 800080c:	d909      	bls.n	8000822 <__udivmoddi4+0x8e>
 800080e:	18fb      	adds	r3, r7, r3
 8000810:	f100 32ff 	add.w	r2, r0, #4294967295
 8000814:	f080 80d7 	bcs.w	80009c6 <__udivmoddi4+0x232>
 8000818:	459c      	cmp	ip, r3
 800081a:	f240 80d4 	bls.w	80009c6 <__udivmoddi4+0x232>
 800081e:	443b      	add	r3, r7
 8000820:	3802      	subs	r0, #2
 8000822:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000826:	2100      	movs	r1, #0
 8000828:	eba3 030c 	sub.w	r3, r3, ip
 800082c:	b11d      	cbz	r5, 8000836 <__udivmoddi4+0xa2>
 800082e:	2200      	movs	r2, #0
 8000830:	40f3      	lsrs	r3, r6
 8000832:	e9c5 3200 	strd	r3, r2, [r5]
 8000836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800083a:	428b      	cmp	r3, r1
 800083c:	d905      	bls.n	800084a <__udivmoddi4+0xb6>
 800083e:	b10d      	cbz	r5, 8000844 <__udivmoddi4+0xb0>
 8000840:	e9c5 0100 	strd	r0, r1, [r5]
 8000844:	2100      	movs	r1, #0
 8000846:	4608      	mov	r0, r1
 8000848:	e7f5      	b.n	8000836 <__udivmoddi4+0xa2>
 800084a:	fab3 f183 	clz	r1, r3
 800084e:	2900      	cmp	r1, #0
 8000850:	d146      	bne.n	80008e0 <__udivmoddi4+0x14c>
 8000852:	4573      	cmp	r3, lr
 8000854:	d302      	bcc.n	800085c <__udivmoddi4+0xc8>
 8000856:	4282      	cmp	r2, r0
 8000858:	f200 8108 	bhi.w	8000a6c <__udivmoddi4+0x2d8>
 800085c:	1a84      	subs	r4, r0, r2
 800085e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000862:	2001      	movs	r0, #1
 8000864:	4690      	mov	r8, r2
 8000866:	2d00      	cmp	r5, #0
 8000868:	d0e5      	beq.n	8000836 <__udivmoddi4+0xa2>
 800086a:	e9c5 4800 	strd	r4, r8, [r5]
 800086e:	e7e2      	b.n	8000836 <__udivmoddi4+0xa2>
 8000870:	2a00      	cmp	r2, #0
 8000872:	f000 8091 	beq.w	8000998 <__udivmoddi4+0x204>
 8000876:	fab2 f682 	clz	r6, r2
 800087a:	2e00      	cmp	r6, #0
 800087c:	f040 80a5 	bne.w	80009ca <__udivmoddi4+0x236>
 8000880:	1a8a      	subs	r2, r1, r2
 8000882:	2101      	movs	r1, #1
 8000884:	0c03      	lsrs	r3, r0, #16
 8000886:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800088a:	b280      	uxth	r0, r0
 800088c:	b2bc      	uxth	r4, r7
 800088e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000892:	fb0e 221c 	mls	r2, lr, ip, r2
 8000896:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800089a:	fb04 f20c 	mul.w	r2, r4, ip
 800089e:	429a      	cmp	r2, r3
 80008a0:	d907      	bls.n	80008b2 <__udivmoddi4+0x11e>
 80008a2:	18fb      	adds	r3, r7, r3
 80008a4:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008a8:	d202      	bcs.n	80008b0 <__udivmoddi4+0x11c>
 80008aa:	429a      	cmp	r2, r3
 80008ac:	f200 80e3 	bhi.w	8000a76 <__udivmoddi4+0x2e2>
 80008b0:	46c4      	mov	ip, r8
 80008b2:	1a9b      	subs	r3, r3, r2
 80008b4:	fbb3 f2fe 	udiv	r2, r3, lr
 80008b8:	fb0e 3312 	mls	r3, lr, r2, r3
 80008bc:	fb02 f404 	mul.w	r4, r2, r4
 80008c0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008c4:	429c      	cmp	r4, r3
 80008c6:	d907      	bls.n	80008d8 <__udivmoddi4+0x144>
 80008c8:	18fb      	adds	r3, r7, r3
 80008ca:	f102 30ff 	add.w	r0, r2, #4294967295
 80008ce:	d202      	bcs.n	80008d6 <__udivmoddi4+0x142>
 80008d0:	429c      	cmp	r4, r3
 80008d2:	f200 80cd 	bhi.w	8000a70 <__udivmoddi4+0x2dc>
 80008d6:	4602      	mov	r2, r0
 80008d8:	1b1b      	subs	r3, r3, r4
 80008da:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008de:	e7a5      	b.n	800082c <__udivmoddi4+0x98>
 80008e0:	f1c1 0620 	rsb	r6, r1, #32
 80008e4:	408b      	lsls	r3, r1
 80008e6:	fa22 f706 	lsr.w	r7, r2, r6
 80008ea:	431f      	orrs	r7, r3
 80008ec:	fa2e fa06 	lsr.w	sl, lr, r6
 80008f0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80008f4:	fbba f8f9 	udiv	r8, sl, r9
 80008f8:	fa0e fe01 	lsl.w	lr, lr, r1
 80008fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000900:	fb09 aa18 	mls	sl, r9, r8, sl
 8000904:	fa1f fc87 	uxth.w	ip, r7
 8000908:	ea43 030e 	orr.w	r3, r3, lr
 800090c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000910:	fb08 f00c 	mul.w	r0, r8, ip
 8000914:	0c1c      	lsrs	r4, r3, #16
 8000916:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800091a:	42a0      	cmp	r0, r4
 800091c:	fa02 f201 	lsl.w	r2, r2, r1
 8000920:	d90a      	bls.n	8000938 <__udivmoddi4+0x1a4>
 8000922:	193c      	adds	r4, r7, r4
 8000924:	f108 3aff 	add.w	sl, r8, #4294967295
 8000928:	f080 809e 	bcs.w	8000a68 <__udivmoddi4+0x2d4>
 800092c:	42a0      	cmp	r0, r4
 800092e:	f240 809b 	bls.w	8000a68 <__udivmoddi4+0x2d4>
 8000932:	f1a8 0802 	sub.w	r8, r8, #2
 8000936:	443c      	add	r4, r7
 8000938:	1a24      	subs	r4, r4, r0
 800093a:	b298      	uxth	r0, r3
 800093c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000940:	fb09 4413 	mls	r4, r9, r3, r4
 8000944:	fb03 fc0c 	mul.w	ip, r3, ip
 8000948:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800094c:	45a4      	cmp	ip, r4
 800094e:	d909      	bls.n	8000964 <__udivmoddi4+0x1d0>
 8000950:	193c      	adds	r4, r7, r4
 8000952:	f103 30ff 	add.w	r0, r3, #4294967295
 8000956:	f080 8085 	bcs.w	8000a64 <__udivmoddi4+0x2d0>
 800095a:	45a4      	cmp	ip, r4
 800095c:	f240 8082 	bls.w	8000a64 <__udivmoddi4+0x2d0>
 8000960:	3b02      	subs	r3, #2
 8000962:	443c      	add	r4, r7
 8000964:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000968:	eba4 040c 	sub.w	r4, r4, ip
 800096c:	fba0 8c02 	umull	r8, ip, r0, r2
 8000970:	4564      	cmp	r4, ip
 8000972:	4643      	mov	r3, r8
 8000974:	46e1      	mov	r9, ip
 8000976:	d364      	bcc.n	8000a42 <__udivmoddi4+0x2ae>
 8000978:	d061      	beq.n	8000a3e <__udivmoddi4+0x2aa>
 800097a:	b15d      	cbz	r5, 8000994 <__udivmoddi4+0x200>
 800097c:	ebbe 0203 	subs.w	r2, lr, r3
 8000980:	eb64 0409 	sbc.w	r4, r4, r9
 8000984:	fa04 f606 	lsl.w	r6, r4, r6
 8000988:	fa22 f301 	lsr.w	r3, r2, r1
 800098c:	431e      	orrs	r6, r3
 800098e:	40cc      	lsrs	r4, r1
 8000990:	e9c5 6400 	strd	r6, r4, [r5]
 8000994:	2100      	movs	r1, #0
 8000996:	e74e      	b.n	8000836 <__udivmoddi4+0xa2>
 8000998:	fbb1 fcf2 	udiv	ip, r1, r2
 800099c:	0c01      	lsrs	r1, r0, #16
 800099e:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009a2:	b280      	uxth	r0, r0
 80009a4:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009a8:	463b      	mov	r3, r7
 80009aa:	fbb1 f1f7 	udiv	r1, r1, r7
 80009ae:	4638      	mov	r0, r7
 80009b0:	463c      	mov	r4, r7
 80009b2:	46b8      	mov	r8, r7
 80009b4:	46be      	mov	lr, r7
 80009b6:	2620      	movs	r6, #32
 80009b8:	eba2 0208 	sub.w	r2, r2, r8
 80009bc:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009c0:	e765      	b.n	800088e <__udivmoddi4+0xfa>
 80009c2:	4601      	mov	r1, r0
 80009c4:	e717      	b.n	80007f6 <__udivmoddi4+0x62>
 80009c6:	4610      	mov	r0, r2
 80009c8:	e72b      	b.n	8000822 <__udivmoddi4+0x8e>
 80009ca:	f1c6 0120 	rsb	r1, r6, #32
 80009ce:	fa2e fc01 	lsr.w	ip, lr, r1
 80009d2:	40b7      	lsls	r7, r6
 80009d4:	fa0e fe06 	lsl.w	lr, lr, r6
 80009d8:	fa20 f101 	lsr.w	r1, r0, r1
 80009dc:	ea41 010e 	orr.w	r1, r1, lr
 80009e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009e4:	fbbc f8fe 	udiv	r8, ip, lr
 80009e8:	b2bc      	uxth	r4, r7
 80009ea:	fb0e cc18 	mls	ip, lr, r8, ip
 80009ee:	fb08 f904 	mul.w	r9, r8, r4
 80009f2:	0c0a      	lsrs	r2, r1, #16
 80009f4:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80009f8:	40b0      	lsls	r0, r6
 80009fa:	4591      	cmp	r9, r2
 80009fc:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a00:	b280      	uxth	r0, r0
 8000a02:	d93e      	bls.n	8000a82 <__udivmoddi4+0x2ee>
 8000a04:	18ba      	adds	r2, r7, r2
 8000a06:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a0a:	d201      	bcs.n	8000a10 <__udivmoddi4+0x27c>
 8000a0c:	4591      	cmp	r9, r2
 8000a0e:	d81f      	bhi.n	8000a50 <__udivmoddi4+0x2bc>
 8000a10:	eba2 0209 	sub.w	r2, r2, r9
 8000a14:	fbb2 f9fe 	udiv	r9, r2, lr
 8000a18:	fb09 f804 	mul.w	r8, r9, r4
 8000a1c:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000a20:	b28a      	uxth	r2, r1
 8000a22:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8000a26:	4542      	cmp	r2, r8
 8000a28:	d229      	bcs.n	8000a7e <__udivmoddi4+0x2ea>
 8000a2a:	18ba      	adds	r2, r7, r2
 8000a2c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a30:	d2c2      	bcs.n	80009b8 <__udivmoddi4+0x224>
 8000a32:	4542      	cmp	r2, r8
 8000a34:	d2c0      	bcs.n	80009b8 <__udivmoddi4+0x224>
 8000a36:	f1a9 0102 	sub.w	r1, r9, #2
 8000a3a:	443a      	add	r2, r7
 8000a3c:	e7bc      	b.n	80009b8 <__udivmoddi4+0x224>
 8000a3e:	45c6      	cmp	lr, r8
 8000a40:	d29b      	bcs.n	800097a <__udivmoddi4+0x1e6>
 8000a42:	ebb8 0302 	subs.w	r3, r8, r2
 8000a46:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a4a:	3801      	subs	r0, #1
 8000a4c:	46e1      	mov	r9, ip
 8000a4e:	e794      	b.n	800097a <__udivmoddi4+0x1e6>
 8000a50:	eba7 0909 	sub.w	r9, r7, r9
 8000a54:	444a      	add	r2, r9
 8000a56:	fbb2 f9fe 	udiv	r9, r2, lr
 8000a5a:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a5e:	fb09 f804 	mul.w	r8, r9, r4
 8000a62:	e7db      	b.n	8000a1c <__udivmoddi4+0x288>
 8000a64:	4603      	mov	r3, r0
 8000a66:	e77d      	b.n	8000964 <__udivmoddi4+0x1d0>
 8000a68:	46d0      	mov	r8, sl
 8000a6a:	e765      	b.n	8000938 <__udivmoddi4+0x1a4>
 8000a6c:	4608      	mov	r0, r1
 8000a6e:	e6fa      	b.n	8000866 <__udivmoddi4+0xd2>
 8000a70:	443b      	add	r3, r7
 8000a72:	3a02      	subs	r2, #2
 8000a74:	e730      	b.n	80008d8 <__udivmoddi4+0x144>
 8000a76:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a7a:	443b      	add	r3, r7
 8000a7c:	e719      	b.n	80008b2 <__udivmoddi4+0x11e>
 8000a7e:	4649      	mov	r1, r9
 8000a80:	e79a      	b.n	80009b8 <__udivmoddi4+0x224>
 8000a82:	eba2 0209 	sub.w	r2, r2, r9
 8000a86:	fbb2 f9fe 	udiv	r9, r2, lr
 8000a8a:	46c4      	mov	ip, r8
 8000a8c:	fb09 f804 	mul.w	r8, r9, r4
 8000a90:	e7c4      	b.n	8000a1c <__udivmoddi4+0x288>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <main>:
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	f005 fc58 	bl	8006350 <initialise_monitor_handles>
 8000aa0:	f000 fbae 	bl	8001200 <HAL_Init>
 8000aa4:	f000 f80f 	bl	8000ac6 <SystemClock_Config>
 8000aa8:	f000 f936 	bl	8000d18 <MX_GPIO_Init>
 8000aac:	f000 f90a 	bl	8000cc4 <MX_USART2_UART_Init>
 8000ab0:	f000 f85e 	bl	8000b70 <MX_ADC1_Init>
 8000ab4:	f000 f8d8 	bl	8000c68 <MX_I2C1_Init>
 8000ab8:	f000 f898 	bl	8000bec <MX_ADC2_Init>
 8000abc:	f003 fcc0 	bl	8004440 <app_init>
 8000ac0:	f003 fd36 	bl	8004530 <app_update>
 8000ac4:	e7fc      	b.n	8000ac0 <main+0x28>

08000ac6 <SystemClock_Config>:
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b094      	sub	sp, #80	@ 0x50
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ad0:	2228      	movs	r2, #40	@ 0x28
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f005 fec2 	bl	800685e <memset>
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	2302      	movs	r3, #2
 8000af8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000afa:	2301      	movs	r3, #1
 8000afc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000afe:	2310      	movs	r3, #16
 8000b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b02:	2302      	movs	r3, #2
 8000b04:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b06:	2300      	movs	r3, #0
 8000b08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000b0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b12:	4618      	mov	r0, r3
 8000b14:	f002 fb16 	bl	8003144 <HAL_RCC_OscConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x5c>
 8000b1e:	f000 f9a3 	bl	8000e68 <Error_Handler>
 8000b22:	230f      	movs	r3, #15
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	2302      	movs	r3, #2
 8000b28:	61bb      	str	r3, [r7, #24]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
 8000b2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b32:	623b      	str	r3, [r7, #32]
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f002 fd82 	bl	8003648 <HAL_RCC_ClockConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0x88>
 8000b4a:	f000 f98d 	bl	8000e68 <Error_Handler>
 8000b4e:	2302      	movs	r3, #2
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f002 ff03 	bl	8003964 <HAL_RCCEx_PeriphCLKConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0xa2>
 8000b64:	f000 f980 	bl	8000e68 <Error_Handler>
 8000b68:	bf00      	nop
 8000b6a:	3750      	adds	r7, #80	@ 0x50
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <MX_ADC1_Init>:
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	4b18      	ldr	r3, [pc, #96]	@ (8000be4 <MX_ADC1_Init+0x74>)
 8000b82:	4a19      	ldr	r2, [pc, #100]	@ (8000be8 <MX_ADC1_Init+0x78>)
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <MX_ADC1_Init+0x74>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	4b15      	ldr	r3, [pc, #84]	@ (8000be4 <MX_ADC1_Init+0x74>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	731a      	strb	r2, [r3, #12]
 8000b92:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <MX_ADC1_Init+0x74>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	751a      	strb	r2, [r3, #20]
 8000b98:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <MX_ADC1_Init+0x74>)
 8000b9a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000b9e:	61da      	str	r2, [r3, #28]
 8000ba0:	4b10      	ldr	r3, [pc, #64]	@ (8000be4 <MX_ADC1_Init+0x74>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8000be4 <MX_ADC1_Init+0x74>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	611a      	str	r2, [r3, #16]
 8000bac:	480d      	ldr	r0, [pc, #52]	@ (8000be4 <MX_ADC1_Init+0x74>)
 8000bae:	f000 fbad 	bl	800130c <HAL_ADC_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_ADC1_Init+0x4c>
 8000bb8:	f000 f956 	bl	8000e68 <Error_Handler>
 8000bbc:	2310      	movs	r3, #16
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4805      	ldr	r0, [pc, #20]	@ (8000be4 <MX_ADC1_Init+0x74>)
 8000bce:	f000 fdff 	bl	80017d0 <HAL_ADC_ConfigChannel>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_ADC1_Init+0x6c>
 8000bd8:	f000 f946 	bl	8000e68 <Error_Handler>
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000140 	.word	0x20000140
 8000be8:	40012400 	.word	0x40012400

08000bec <MX_ADC2_Init>:
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	4b18      	ldr	r3, [pc, #96]	@ (8000c60 <MX_ADC2_Init+0x74>)
 8000bfe:	4a19      	ldr	r2, [pc, #100]	@ (8000c64 <MX_ADC2_Init+0x78>)
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	4b17      	ldr	r3, [pc, #92]	@ (8000c60 <MX_ADC2_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <MX_ADC2_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	731a      	strb	r2, [r3, #12]
 8000c0e:	4b14      	ldr	r3, [pc, #80]	@ (8000c60 <MX_ADC2_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	751a      	strb	r2, [r3, #20]
 8000c14:	4b12      	ldr	r3, [pc, #72]	@ (8000c60 <MX_ADC2_Init+0x74>)
 8000c16:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000c1a:	61da      	str	r2, [r3, #28]
 8000c1c:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <MX_ADC2_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <MX_ADC2_Init+0x74>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	611a      	str	r2, [r3, #16]
 8000c28:	480d      	ldr	r0, [pc, #52]	@ (8000c60 <MX_ADC2_Init+0x74>)
 8000c2a:	f000 fb6f 	bl	800130c <HAL_ADC_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_ADC2_Init+0x4c>
 8000c34:	f000 f918 	bl	8000e68 <Error_Handler>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <MX_ADC2_Init+0x74>)
 8000c4a:	f000 fdc1 	bl	80017d0 <HAL_ADC_ConfigChannel>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_ADC2_Init+0x6c>
 8000c54:	f000 f908 	bl	8000e68 <Error_Handler>
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000170 	.word	0x20000170
 8000c64:	40012800 	.word	0x40012800

08000c68 <MX_I2C1_Init>:
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <MX_I2C1_Init+0x50>)
 8000c6e:	4a13      	ldr	r2, [pc, #76]	@ (8000cbc <MX_I2C1_Init+0x54>)
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <MX_I2C1_Init+0x50>)
 8000c74:	4a12      	ldr	r2, [pc, #72]	@ (8000cc0 <MX_I2C1_Init+0x58>)
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <MX_I2C1_Init+0x50>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <MX_I2C1_Init+0x50>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <MX_I2C1_Init+0x50>)
 8000c86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c8a:	611a      	str	r2, [r3, #16]
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <MX_I2C1_Init+0x50>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	615a      	str	r2, [r3, #20]
 8000c92:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <MX_I2C1_Init+0x50>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
 8000c98:	4b07      	ldr	r3, [pc, #28]	@ (8000cb8 <MX_I2C1_Init+0x50>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <MX_I2C1_Init+0x50>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
 8000ca4:	4804      	ldr	r0, [pc, #16]	@ (8000cb8 <MX_I2C1_Init+0x50>)
 8000ca6:	f001 fa19 	bl	80020dc <HAL_I2C_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_I2C1_Init+0x4c>
 8000cb0:	f000 f8da 	bl	8000e68 <Error_Handler>
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200001a0 	.word	0x200001a0
 8000cbc:	40005400 	.word	0x40005400
 8000cc0:	000186a0 	.word	0x000186a0

08000cc4 <MX_USART2_UART_Init>:
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	@ (8000d14 <MX_USART2_UART_Init+0x50>)
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000cd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
 8000ce8:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000cea:	220c      	movs	r2, #12
 8000cec:	615a      	str	r2, [r3, #20]
 8000cee:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
 8000cfa:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000cfc:	f002 fee8 	bl	8003ad0 <HAL_UART_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_USART2_UART_Init+0x46>
 8000d06:	f000 f8af 	bl	8000e68 <Error_Handler>
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200001f4 	.word	0x200001f4
 8000d14:	40004400 	.word	0x40004400

08000d18 <MX_GPIO_Init>:
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	f107 0310 	add.w	r3, r7, #16
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	4b49      	ldr	r3, [pc, #292]	@ (8000e54 <MX_GPIO_Init+0x13c>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a48      	ldr	r2, [pc, #288]	@ (8000e54 <MX_GPIO_Init+0x13c>)
 8000d32:	f043 0310 	orr.w	r3, r3, #16
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b46      	ldr	r3, [pc, #280]	@ (8000e54 <MX_GPIO_Init+0x13c>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0310 	and.w	r3, r3, #16
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	4b43      	ldr	r3, [pc, #268]	@ (8000e54 <MX_GPIO_Init+0x13c>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a42      	ldr	r2, [pc, #264]	@ (8000e54 <MX_GPIO_Init+0x13c>)
 8000d4a:	f043 0320 	orr.w	r3, r3, #32
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b40      	ldr	r3, [pc, #256]	@ (8000e54 <MX_GPIO_Init+0x13c>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f003 0320 	and.w	r3, r3, #32
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e54 <MX_GPIO_Init+0x13c>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a3c      	ldr	r2, [pc, #240]	@ (8000e54 <MX_GPIO_Init+0x13c>)
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b3a      	ldr	r3, [pc, #232]	@ (8000e54 <MX_GPIO_Init+0x13c>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4b37      	ldr	r3, [pc, #220]	@ (8000e54 <MX_GPIO_Init+0x13c>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a36      	ldr	r2, [pc, #216]	@ (8000e54 <MX_GPIO_Init+0x13c>)
 8000d7a:	f043 0308 	orr.w	r3, r3, #8
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b34      	ldr	r3, [pc, #208]	@ (8000e54 <MX_GPIO_Init+0x13c>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0308 	and.w	r3, r3, #8
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 61f4 	mov.w	r1, #1952	@ 0x7a0
 8000d92:	4831      	ldr	r0, [pc, #196]	@ (8000e58 <MX_GPIO_Init+0x140>)
 8000d94:	f001 f967 	bl	8002066 <HAL_GPIO_WritePin>
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8000d9e:	482f      	ldr	r0, [pc, #188]	@ (8000e5c <MX_GPIO_Init+0x144>)
 8000da0:	f001 f961 	bl	8002066 <HAL_GPIO_WritePin>
 8000da4:	2200      	movs	r2, #0
 8000da6:	2140      	movs	r1, #64	@ 0x40
 8000da8:	482d      	ldr	r0, [pc, #180]	@ (8000e60 <MX_GPIO_Init+0x148>)
 8000daa:	f001 f95c 	bl	8002066 <HAL_GPIO_WritePin>
 8000dae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e64 <MX_GPIO_Init+0x14c>)
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	2300      	movs	r3, #0
 8000dba:	61bb      	str	r3, [r7, #24]
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4826      	ldr	r0, [pc, #152]	@ (8000e5c <MX_GPIO_Init+0x144>)
 8000dc4:	f000 ffb4 	bl	8001d30 <HAL_GPIO_Init>
 8000dc8:	f44f 63f4 	mov.w	r3, #1952	@ 0x7a0
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	2301      	movs	r3, #1
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61fb      	str	r3, [r7, #28]
 8000dda:	f107 0310 	add.w	r3, r7, #16
 8000dde:	4619      	mov	r1, r3
 8000de0:	481d      	ldr	r0, [pc, #116]	@ (8000e58 <MX_GPIO_Init+0x140>)
 8000de2:	f000 ffa5 	bl	8001d30 <HAL_GPIO_Init>
 8000de6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	2301      	movs	r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	2300      	movs	r3, #0
 8000df2:	61bb      	str	r3, [r7, #24]
 8000df4:	2302      	movs	r3, #2
 8000df6:	61fb      	str	r3, [r7, #28]
 8000df8:	f107 0310 	add.w	r3, r7, #16
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4817      	ldr	r0, [pc, #92]	@ (8000e5c <MX_GPIO_Init+0x144>)
 8000e00:	f000 ff96 	bl	8001d30 <HAL_GPIO_Init>
 8000e04:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	2301      	movs	r3, #1
 8000e10:	61bb      	str	r3, [r7, #24]
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	4619      	mov	r1, r3
 8000e18:	4811      	ldr	r0, [pc, #68]	@ (8000e60 <MX_GPIO_Init+0x148>)
 8000e1a:	f000 ff89 	bl	8001d30 <HAL_GPIO_Init>
 8000e1e:	2340      	movs	r3, #64	@ 0x40
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	2301      	movs	r3, #1
 8000e24:	617b      	str	r3, [r7, #20]
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61fb      	str	r3, [r7, #28]
 8000e2e:	f107 0310 	add.w	r3, r7, #16
 8000e32:	4619      	mov	r1, r3
 8000e34:	480a      	ldr	r0, [pc, #40]	@ (8000e60 <MX_GPIO_Init+0x148>)
 8000e36:	f000 ff7b 	bl	8001d30 <HAL_GPIO_Init>
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2028      	movs	r0, #40	@ 0x28
 8000e40:	f000 ff39 	bl	8001cb6 <HAL_NVIC_SetPriority>
 8000e44:	2028      	movs	r0, #40	@ 0x28
 8000e46:	f000 ff52 	bl	8001cee <HAL_NVIC_EnableIRQ>
 8000e4a:	bf00      	nop
 8000e4c:	3720      	adds	r7, #32
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40010800 	.word	0x40010800
 8000e5c:	40011000 	.word	0x40011000
 8000e60:	40010c00 	.word	0x40010c00
 8000e64:	10110000 	.word	0x10110000

08000e68 <Error_Handler>:
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	b672      	cpsid	i
 8000e6e:	bf00      	nop
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <Error_Handler+0x8>

08000e74 <HAL_MspInit>:
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <HAL_MspInit+0x5c>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	4a14      	ldr	r2, [pc, #80]	@ (8000ed0 <HAL_MspInit+0x5c>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6193      	str	r3, [r2, #24]
 8000e86:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <HAL_MspInit+0x5c>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <HAL_MspInit+0x5c>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	4a0e      	ldr	r2, [pc, #56]	@ (8000ed0 <HAL_MspInit+0x5c>)
 8000e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e9c:	61d3      	str	r3, [r2, #28]
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <HAL_MspInit+0x5c>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed4 <HAL_MspInit+0x60>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	4a04      	ldr	r2, [pc, #16]	@ (8000ed4 <HAL_MspInit+0x60>)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6053      	str	r3, [r2, #4]
 8000ec6:	bf00      	nop
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40010000 	.word	0x40010000

08000ed8 <HAL_ADC_MspInit>:
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	@ 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	f107 0318 	add.w	r3, r7, #24
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a25      	ldr	r2, [pc, #148]	@ (8000f88 <HAL_ADC_MspInit+0xb0>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d114      	bne.n	8000f22 <HAL_ADC_MspInit+0x4a>
 8000ef8:	4b24      	ldr	r3, [pc, #144]	@ (8000f8c <HAL_ADC_MspInit+0xb4>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	4a23      	ldr	r2, [pc, #140]	@ (8000f8c <HAL_ADC_MspInit+0xb4>)
 8000efe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f02:	6193      	str	r3, [r2, #24]
 8000f04:	4b21      	ldr	r3, [pc, #132]	@ (8000f8c <HAL_ADC_MspInit+0xb4>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	2200      	movs	r2, #0
 8000f12:	2100      	movs	r1, #0
 8000f14:	2012      	movs	r0, #18
 8000f16:	f000 fece 	bl	8001cb6 <HAL_NVIC_SetPriority>
 8000f1a:	2012      	movs	r0, #18
 8000f1c:	f000 fee7 	bl	8001cee <HAL_NVIC_EnableIRQ>
 8000f20:	e02e      	b.n	8000f80 <HAL_ADC_MspInit+0xa8>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a1a      	ldr	r2, [pc, #104]	@ (8000f90 <HAL_ADC_MspInit+0xb8>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d129      	bne.n	8000f80 <HAL_ADC_MspInit+0xa8>
 8000f2c:	4b17      	ldr	r3, [pc, #92]	@ (8000f8c <HAL_ADC_MspInit+0xb4>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a16      	ldr	r2, [pc, #88]	@ (8000f8c <HAL_ADC_MspInit+0xb4>)
 8000f32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <HAL_ADC_MspInit+0xb4>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <HAL_ADC_MspInit+0xb4>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	4a10      	ldr	r2, [pc, #64]	@ (8000f8c <HAL_ADC_MspInit+0xb4>)
 8000f4a:	f043 0304 	orr.w	r3, r3, #4
 8000f4e:	6193      	str	r3, [r2, #24]
 8000f50:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <HAL_ADC_MspInit+0xb4>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	f003 0304 	and.w	r3, r3, #4
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	61bb      	str	r3, [r7, #24]
 8000f60:	2303      	movs	r3, #3
 8000f62:	61fb      	str	r3, [r7, #28]
 8000f64:	f107 0318 	add.w	r3, r7, #24
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480a      	ldr	r0, [pc, #40]	@ (8000f94 <HAL_ADC_MspInit+0xbc>)
 8000f6c:	f000 fee0 	bl	8001d30 <HAL_GPIO_Init>
 8000f70:	2200      	movs	r2, #0
 8000f72:	2100      	movs	r1, #0
 8000f74:	2012      	movs	r0, #18
 8000f76:	f000 fe9e 	bl	8001cb6 <HAL_NVIC_SetPriority>
 8000f7a:	2012      	movs	r0, #18
 8000f7c:	f000 feb7 	bl	8001cee <HAL_NVIC_EnableIRQ>
 8000f80:	bf00      	nop
 8000f82:	3728      	adds	r7, #40	@ 0x28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40012400 	.word	0x40012400
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40012800 	.word	0x40012800
 8000f94:	40010800 	.word	0x40010800

08000f98 <HAL_I2C_MspInit>:
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	@ 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a1d      	ldr	r2, [pc, #116]	@ (8001028 <HAL_I2C_MspInit+0x90>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d132      	bne.n	800101e <HAL_I2C_MspInit+0x86>
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	@ (800102c <HAL_I2C_MspInit+0x94>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a1b      	ldr	r2, [pc, #108]	@ (800102c <HAL_I2C_MspInit+0x94>)
 8000fbe:	f043 0308 	orr.w	r3, r3, #8
 8000fc2:	6193      	str	r3, [r2, #24]
 8000fc4:	4b19      	ldr	r3, [pc, #100]	@ (800102c <HAL_I2C_MspInit+0x94>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f003 0308 	and.w	r3, r3, #8
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	2312      	movs	r3, #18
 8000fd8:	61bb      	str	r3, [r7, #24]
 8000fda:	2303      	movs	r3, #3
 8000fdc:	623b      	str	r3, [r7, #32]
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4812      	ldr	r0, [pc, #72]	@ (8001030 <HAL_I2C_MspInit+0x98>)
 8000fe6:	f000 fea3 	bl	8001d30 <HAL_GPIO_Init>
 8000fea:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <HAL_I2C_MspInit+0x9c>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ffa:	f043 0302 	orr.w	r3, r3, #2
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001000:	4a0c      	ldr	r2, [pc, #48]	@ (8001034 <HAL_I2C_MspInit+0x9c>)
 8001002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001004:	6053      	str	r3, [r2, #4]
 8001006:	4b09      	ldr	r3, [pc, #36]	@ (800102c <HAL_I2C_MspInit+0x94>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	4a08      	ldr	r2, [pc, #32]	@ (800102c <HAL_I2C_MspInit+0x94>)
 800100c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001010:	61d3      	str	r3, [r2, #28]
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <HAL_I2C_MspInit+0x94>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	@ 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40005400 	.word	0x40005400
 800102c:	40021000 	.word	0x40021000
 8001030:	40010c00 	.word	0x40010c00
 8001034:	40010000 	.word	0x40010000

08001038 <HAL_UART_MspInit>:
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a15      	ldr	r2, [pc, #84]	@ (80010a8 <HAL_UART_MspInit+0x70>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d123      	bne.n	80010a0 <HAL_UART_MspInit+0x68>
 8001058:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <HAL_UART_MspInit+0x74>)
 800105a:	69db      	ldr	r3, [r3, #28]
 800105c:	4a13      	ldr	r2, [pc, #76]	@ (80010ac <HAL_UART_MspInit+0x74>)
 800105e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001062:	61d3      	str	r3, [r2, #28]
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <HAL_UART_MspInit+0x74>)
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <HAL_UART_MspInit+0x74>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a0d      	ldr	r2, [pc, #52]	@ (80010ac <HAL_UART_MspInit+0x74>)
 8001076:	f043 0304 	orr.w	r3, r3, #4
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b0b      	ldr	r3, [pc, #44]	@ (80010ac <HAL_UART_MspInit+0x74>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	230c      	movs	r3, #12
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	2302      	movs	r3, #2
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	2302      	movs	r3, #2
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	4619      	mov	r1, r3
 800109a:	4805      	ldr	r0, [pc, #20]	@ (80010b0 <HAL_UART_MspInit+0x78>)
 800109c:	f000 fe48 	bl	8001d30 <HAL_GPIO_Init>
 80010a0:	bf00      	nop
 80010a2:	3720      	adds	r7, #32
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40004400 	.word	0x40004400
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010800 	.word	0x40010800

080010b4 <NMI_Handler>:
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <NMI_Handler+0x4>

080010bc <HardFault_Handler>:
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <MemManage_Handler+0x4>

080010cc <BusFault_Handler>:
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <BusFault_Handler+0x4>

080010d4 <UsageFault_Handler>:
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <UsageFault_Handler+0x4>

080010dc <SVC_Handler>:
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <DebugMon_Handler>:
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <PendSV_Handler>:
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <SysTick_Handler>:
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
 8001104:	f000 f8c2 	bl	800128c <HAL_IncTick>
 8001108:	f000 fe0b 	bl	8001d22 <HAL_SYSTICK_IRQHandler>
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}

08001110 <ADC1_2_IRQHandler>:
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
 8001114:	4803      	ldr	r0, [pc, #12]	@ (8001124 <ADC1_2_IRQHandler+0x14>)
 8001116:	f000 fa93 	bl	8001640 <HAL_ADC_IRQHandler>
 800111a:	4803      	ldr	r0, [pc, #12]	@ (8001128 <ADC1_2_IRQHandler+0x18>)
 800111c:	f000 fa90 	bl	8001640 <HAL_ADC_IRQHandler>
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000140 	.word	0x20000140
 8001128:	20000170 	.word	0x20000170

0800112c <EXTI15_10_IRQHandler>:
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
 8001130:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001134:	f000 ffb0 	bl	8002098 <HAL_GPIO_EXTI_IRQHandler>
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}

0800113c <_sbrk>:
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	4a14      	ldr	r2, [pc, #80]	@ (8001198 <_sbrk+0x5c>)
 8001146:	4b15      	ldr	r3, [pc, #84]	@ (800119c <_sbrk+0x60>)
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	4b13      	ldr	r3, [pc, #76]	@ (80011a0 <_sbrk+0x64>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d102      	bne.n	800115e <_sbrk+0x22>
 8001158:	4b11      	ldr	r3, [pc, #68]	@ (80011a0 <_sbrk+0x64>)
 800115a:	4a12      	ldr	r2, [pc, #72]	@ (80011a4 <_sbrk+0x68>)
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <_sbrk+0x64>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	429a      	cmp	r2, r3
 800116a:	d207      	bcs.n	800117c <_sbrk+0x40>
 800116c:	f005 fbc6 	bl	80068fc <__errno>
 8001170:	4603      	mov	r3, r0
 8001172:	220c      	movs	r2, #12
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
 800117a:	e009      	b.n	8001190 <_sbrk+0x54>
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <_sbrk+0x64>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b07      	ldr	r3, [pc, #28]	@ (80011a0 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	4a05      	ldr	r2, [pc, #20]	@ (80011a0 <_sbrk+0x64>)
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20005000 	.word	0x20005000
 800119c:	00000400 	.word	0x00000400
 80011a0:	2000023c 	.word	0x2000023c
 80011a4:	20000658 	.word	0x20000658

080011a8 <SystemInit>:
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr

080011b4 <Reset_Handler>:
 80011b4:	f7ff fff8 	bl	80011a8 <SystemInit>
 80011b8:	480b      	ldr	r0, [pc, #44]	@ (80011e8 <LoopFillZerobss+0xe>)
 80011ba:	490c      	ldr	r1, [pc, #48]	@ (80011ec <LoopFillZerobss+0x12>)
 80011bc:	4a0c      	ldr	r2, [pc, #48]	@ (80011f0 <LoopFillZerobss+0x16>)
 80011be:	2300      	movs	r3, #0
 80011c0:	e002      	b.n	80011c8 <LoopCopyDataInit>

080011c2 <CopyDataInit>:
 80011c2:	58d4      	ldr	r4, [r2, r3]
 80011c4:	50c4      	str	r4, [r0, r3]
 80011c6:	3304      	adds	r3, #4

080011c8 <LoopCopyDataInit>:
 80011c8:	18c4      	adds	r4, r0, r3
 80011ca:	428c      	cmp	r4, r1
 80011cc:	d3f9      	bcc.n	80011c2 <CopyDataInit>
 80011ce:	4a09      	ldr	r2, [pc, #36]	@ (80011f4 <LoopFillZerobss+0x1a>)
 80011d0:	4c09      	ldr	r4, [pc, #36]	@ (80011f8 <LoopFillZerobss+0x1e>)
 80011d2:	2300      	movs	r3, #0
 80011d4:	e001      	b.n	80011da <LoopFillZerobss>

080011d6 <FillZerobss>:
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	3204      	adds	r2, #4

080011da <LoopFillZerobss>:
 80011da:	42a2      	cmp	r2, r4
 80011dc:	d3fb      	bcc.n	80011d6 <FillZerobss>
 80011de:	f005 fb93 	bl	8006908 <__libc_init_array>
 80011e2:	f7ff fc59 	bl	8000a98 <main>
 80011e6:	4770      	bx	lr
 80011e8:	20000000 	.word	0x20000000
 80011ec:	20000124 	.word	0x20000124
 80011f0:	08007ac8 	.word	0x08007ac8
 80011f4:	20000124 	.word	0x20000124
 80011f8:	20000658 	.word	0x20000658

080011fc <CAN1_RX1_IRQHandler>:
 80011fc:	e7fe      	b.n	80011fc <CAN1_RX1_IRQHandler>
	...

08001200 <HAL_Init>:
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
 8001204:	4b08      	ldr	r3, [pc, #32]	@ (8001228 <HAL_Init+0x28>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a07      	ldr	r2, [pc, #28]	@ (8001228 <HAL_Init+0x28>)
 800120a:	f043 0310 	orr.w	r3, r3, #16
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	2003      	movs	r0, #3
 8001212:	f000 fd45 	bl	8001ca0 <HAL_NVIC_SetPriorityGrouping>
 8001216:	2000      	movs	r0, #0
 8001218:	f000 f808 	bl	800122c <HAL_InitTick>
 800121c:	f7ff fe2a 	bl	8000e74 <HAL_MspInit>
 8001220:	2300      	movs	r3, #0
 8001222:	4618      	mov	r0, r3
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40022000 	.word	0x40022000

0800122c <HAL_InitTick>:
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <HAL_InitTick+0x54>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <HAL_InitTick+0x58>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001242:	fbb3 f3f1 	udiv	r3, r3, r1
 8001246:	fbb2 f3f3 	udiv	r3, r2, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f000 fd5d 	bl	8001d0a <HAL_SYSTICK_Config>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_InitTick+0x2e>
 8001256:	2301      	movs	r3, #1
 8001258:	e00e      	b.n	8001278 <HAL_InitTick+0x4c>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b0f      	cmp	r3, #15
 800125e:	d80a      	bhi.n	8001276 <HAL_InitTick+0x4a>
 8001260:	2200      	movs	r2, #0
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f000 fd25 	bl	8001cb6 <HAL_NVIC_SetPriority>
 800126c:	4a06      	ldr	r2, [pc, #24]	@ (8001288 <HAL_InitTick+0x5c>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	2300      	movs	r3, #0
 8001274:	e000      	b.n	8001278 <HAL_InitTick+0x4c>
 8001276:	2301      	movs	r3, #1
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000000 	.word	0x20000000
 8001284:	20000008 	.word	0x20000008
 8001288:	20000004 	.word	0x20000004

0800128c <HAL_IncTick>:
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
 8001290:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <HAL_IncTick+0x1c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <HAL_IncTick+0x20>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	4a03      	ldr	r2, [pc, #12]	@ (80012ac <HAL_IncTick+0x20>)
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	20000008 	.word	0x20000008
 80012ac:	20000240 	.word	0x20000240

080012b0 <HAL_GetTick>:
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4b02      	ldr	r3, [pc, #8]	@ (80012c0 <HAL_GetTick+0x10>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	20000240 	.word	0x20000240

080012c4 <HAL_Delay>:
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	f7ff fff0 	bl	80012b0 <HAL_GetTick>
 80012d0:	60b8      	str	r0, [r7, #8]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012dc:	d005      	beq.n	80012ea <HAL_Delay+0x26>
 80012de:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <HAL_Delay+0x44>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4413      	add	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	bf00      	nop
 80012ec:	f7ff ffe0 	bl	80012b0 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d8f7      	bhi.n	80012ec <HAL_Delay+0x28>
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000008 	.word	0x20000008

0800130c <HAL_ADC_Init>:
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	2300      	movs	r3, #0
 8001316:	75fb      	strb	r3, [r7, #23]
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_ADC_Init+0x22>
 800132a:	2301      	movs	r3, #1
 800132c:	e0be      	b.n	80014ac <HAL_ADC_Init+0x1a0>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2b00      	cmp	r3, #0
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001338:	2b00      	cmp	r3, #0
 800133a:	d109      	bne.n	8001350 <HAL_ADC_Init+0x44>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff fdc4 	bl	8000ed8 <HAL_ADC_MspInit>
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f000 fb8f 	bl	8001a74 <ADC_ConversionStop_Disable>
 8001356:	4603      	mov	r3, r0
 8001358:	75fb      	strb	r3, [r7, #23]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135e:	f003 0310 	and.w	r3, r3, #16
 8001362:	2b00      	cmp	r3, #0
 8001364:	f040 8099 	bne.w	800149a <HAL_ADC_Init+0x18e>
 8001368:	7dfb      	ldrb	r3, [r7, #23]
 800136a:	2b00      	cmp	r3, #0
 800136c:	f040 8095 	bne.w	800149a <HAL_ADC_Init+0x18e>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001374:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001378:	f023 0302 	bic.w	r3, r3, #2
 800137c:	f043 0202 	orr.w	r2, r3, #2
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	629a      	str	r2, [r3, #40]	@ 0x28
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	431a      	orrs	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	7b1b      	ldrb	r3, [r3, #12]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4313      	orrs	r3, r2
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	4313      	orrs	r3, r2
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013a4:	d003      	beq.n	80013ae <HAL_ADC_Init+0xa2>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d102      	bne.n	80013b4 <HAL_ADC_Init+0xa8>
 80013ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013b2:	e000      	b.n	80013b6 <HAL_ADC_Init+0xaa>
 80013b4:	2300      	movs	r3, #0
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	7d1b      	ldrb	r3, [r3, #20]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d119      	bne.n	80013f8 <HAL_ADC_Init+0xec>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	7b1b      	ldrb	r3, [r3, #12]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d109      	bne.n	80013e0 <HAL_ADC_Init+0xd4>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	035a      	lsls	r2, r3, #13
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	e00b      	b.n	80013f8 <HAL_ADC_Init+0xec>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013e4:	f043 0220 	orr.w	r2, r3, #32
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013f0:	f043 0201 	orr.w	r2, r3, #1
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	430a      	orrs	r2, r1
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	4b28      	ldr	r3, [pc, #160]	@ (80014b4 <HAL_ADC_Init+0x1a8>)
 8001414:	4013      	ands	r3, r2
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6812      	ldr	r2, [r2, #0]
 800141a:	68b9      	ldr	r1, [r7, #8]
 800141c:	430b      	orrs	r3, r1
 800141e:	6093      	str	r3, [r2, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001428:	d003      	beq.n	8001432 <HAL_ADC_Init+0x126>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d104      	bne.n	800143c <HAL_ADC_Init+0x130>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	3b01      	subs	r3, #1
 8001438:	051b      	lsls	r3, r3, #20
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001442:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	430a      	orrs	r2, r1
 800144e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <HAL_ADC_Init+0x1ac>)
 8001458:	4013      	ands	r3, r2
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	429a      	cmp	r2, r3
 800145e:	d10b      	bne.n	8001478 <HAL_ADC_Init+0x16c>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800146a:	f023 0303 	bic.w	r3, r3, #3
 800146e:	f043 0201 	orr.w	r2, r3, #1
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	629a      	str	r2, [r3, #40]	@ 0x28
 8001476:	e018      	b.n	80014aa <HAL_ADC_Init+0x19e>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800147c:	f023 0312 	bic.w	r3, r3, #18
 8001480:	f043 0210 	orr.w	r2, r3, #16
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	629a      	str	r2, [r3, #40]	@ 0x28
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800148c:	f043 0201 	orr.w	r2, r3, #1
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001494:	2301      	movs	r3, #1
 8001496:	75fb      	strb	r3, [r7, #23]
 8001498:	e007      	b.n	80014aa <HAL_ADC_Init+0x19e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800149e:	f043 0210 	orr.w	r2, r3, #16
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80014a6:	2301      	movs	r3, #1
 80014a8:	75fb      	strb	r3, [r7, #23]
 80014aa:	7dfb      	ldrb	r3, [r7, #23]
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	ffe1f7fd 	.word	0xffe1f7fd
 80014b8:	ff1f0efe 	.word	0xff1f0efe

080014bc <HAL_ADC_Start_IT>:
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	2300      	movs	r3, #0
 80014c6:	73fb      	strb	r3, [r7, #15]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d101      	bne.n	80014d6 <HAL_ADC_Start_IT+0x1a>
 80014d2:	2302      	movs	r3, #2
 80014d4:	e0a0      	b.n	8001618 <HAL_ADC_Start_IT+0x15c>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 fa6e 	bl	80019c0 <ADC_Enable>
 80014e4:	4603      	mov	r3, r0
 80014e6:	73fb      	strb	r3, [r7, #15]
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f040 808f 	bne.w	800160e <HAL_ADC_Start_IT+0x152>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80014f8:	f023 0301 	bic.w	r3, r3, #1
 80014fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	629a      	str	r2, [r3, #40]	@ 0x28
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a45      	ldr	r2, [pc, #276]	@ (8001620 <HAL_ADC_Start_IT+0x164>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d105      	bne.n	800151a <HAL_ADC_Start_IT+0x5e>
 800150e:	4b45      	ldr	r3, [pc, #276]	@ (8001624 <HAL_ADC_Start_IT+0x168>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d115      	bne.n	8001546 <HAL_ADC_Start_IT+0x8a>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800151e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	629a      	str	r2, [r3, #40]	@ 0x28
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001530:	2b00      	cmp	r3, #0
 8001532:	d026      	beq.n	8001582 <HAL_ADC_Start_IT+0xc6>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001538:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800153c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	629a      	str	r2, [r3, #40]	@ 0x28
 8001544:	e01d      	b.n	8001582 <HAL_ADC_Start_IT+0xc6>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800154a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	629a      	str	r2, [r3, #40]	@ 0x28
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a33      	ldr	r2, [pc, #204]	@ (8001624 <HAL_ADC_Start_IT+0x168>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d004      	beq.n	8001566 <HAL_ADC_Start_IT+0xaa>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a2f      	ldr	r2, [pc, #188]	@ (8001620 <HAL_ADC_Start_IT+0x164>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d10d      	bne.n	8001582 <HAL_ADC_Start_IT+0xc6>
 8001566:	4b2f      	ldr	r3, [pc, #188]	@ (8001624 <HAL_ADC_Start_IT+0x168>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800156e:	2b00      	cmp	r3, #0
 8001570:	d007      	beq.n	8001582 <HAL_ADC_Start_IT+0xc6>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001576:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800157a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	629a      	str	r2, [r3, #40]	@ 0x28
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001586:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d006      	beq.n	800159c <HAL_ADC_Start_IT+0xe0>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001592:	f023 0206 	bic.w	r2, r3, #6
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	62da      	str	r2, [r3, #44]	@ 0x2c
 800159a:	e002      	b.n	80015a2 <HAL_ADC_Start_IT+0xe6>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f06f 0202 	mvn.w	r2, #2
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0220 	orr.w	r2, r2, #32
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80015ce:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80015d2:	d113      	bne.n	80015fc <HAL_ADC_Start_IT+0x140>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a11      	ldr	r2, [pc, #68]	@ (8001620 <HAL_ADC_Start_IT+0x164>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d105      	bne.n	80015ea <HAL_ADC_Start_IT+0x12e>
 80015de:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <HAL_ADC_Start_IT+0x168>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d108      	bne.n	80015fc <HAL_ADC_Start_IT+0x140>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	e00c      	b.n	8001616 <HAL_ADC_Start_IT+0x15a>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	e003      	b.n	8001616 <HAL_ADC_Start_IT+0x15a>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40012800 	.word	0x40012800
 8001624:	40012400 	.word	0x40012400

08001628 <HAL_ADC_GetValue>:
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <HAL_ADC_IRQHandler>:
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	f003 0320 	and.w	r3, r3, #32
 800165e:	2b00      	cmp	r3, #0
 8001660:	d03e      	beq.n	80016e0 <HAL_ADC_IRQHandler+0xa0>
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d039      	beq.n	80016e0 <HAL_ADC_IRQHandler+0xa0>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	2b00      	cmp	r3, #0
 8001676:	d105      	bne.n	8001684 <HAL_ADC_IRQHandler+0x44>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800167c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	629a      	str	r2, [r3, #40]	@ 0x28
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800168e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001692:	d11d      	bne.n	80016d0 <HAL_ADC_IRQHandler+0x90>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	7b1b      	ldrb	r3, [r3, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d119      	bne.n	80016d0 <HAL_ADC_IRQHandler+0x90>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0220 	bic.w	r2, r2, #32
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d105      	bne.n	80016d0 <HAL_ADC_IRQHandler+0x90>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c8:	f043 0201 	orr.w	r2, r3, #1
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f003 ff79 	bl	80055c8 <HAL_ADC_ConvCpltCallback>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f06f 0212 	mvn.w	r2, #18
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d04d      	beq.n	8001786 <HAL_ADC_IRQHandler+0x146>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d048      	beq.n	8001786 <HAL_ADC_IRQHandler+0x146>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f8:	f003 0310 	and.w	r3, r3, #16
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d105      	bne.n	800170c <HAL_ADC_IRQHandler+0xcc>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001704:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	629a      	str	r2, [r3, #40]	@ 0x28
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001716:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800171a:	d012      	beq.n	8001742 <HAL_ADC_IRQHandler+0x102>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001726:	2b00      	cmp	r3, #0
 8001728:	d125      	bne.n	8001776 <HAL_ADC_IRQHandler+0x136>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001734:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001738:	d11d      	bne.n	8001776 <HAL_ADC_IRQHandler+0x136>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7b1b      	ldrb	r3, [r3, #12]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d119      	bne.n	8001776 <HAL_ADC_IRQHandler+0x136>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001756:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	629a      	str	r2, [r3, #40]	@ 0x28
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001766:	2b00      	cmp	r3, #0
 8001768:	d105      	bne.n	8001776 <HAL_ADC_IRQHandler+0x136>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176e:	f043 0201 	orr.w	r2, r3, #1
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	629a      	str	r2, [r3, #40]	@ 0x28
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f9bd 	bl	8001af6 <HAL_ADCEx_InjectedConvCpltCallback>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f06f 020c 	mvn.w	r2, #12
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800178c:	2b00      	cmp	r3, #0
 800178e:	d012      	beq.n	80017b6 <HAL_ADC_IRQHandler+0x176>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00d      	beq.n	80017b6 <HAL_ADC_IRQHandler+0x176>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 f809 	bl	80017be <HAL_ADC_LevelOutOfWindowCallback>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f06f 0201 	mvn.w	r2, #1
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_ADC_LevelOutOfWindowCallback>:
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <HAL_ADC_ConfigChannel>:
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	2300      	movs	r3, #0
 80017dc:	73fb      	strb	r3, [r7, #15]
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d101      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x20>
 80017ec:	2302      	movs	r3, #2
 80017ee:	e0dc      	b.n	80019aa <HAL_ADC_ConfigChannel+0x1da>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b06      	cmp	r3, #6
 80017fe:	d81c      	bhi.n	800183a <HAL_ADC_ConfigChannel+0x6a>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	3b05      	subs	r3, #5
 8001812:	221f      	movs	r2, #31
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	4019      	ands	r1, r3
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	6818      	ldr	r0, [r3, #0]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	3b05      	subs	r3, #5
 800182c:	fa00 f203 	lsl.w	r2, r0, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	635a      	str	r2, [r3, #52]	@ 0x34
 8001838:	e03c      	b.n	80018b4 <HAL_ADC_ConfigChannel+0xe4>
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b0c      	cmp	r3, #12
 8001840:	d81c      	bhi.n	800187c <HAL_ADC_ConfigChannel+0xac>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	3b23      	subs	r3, #35	@ 0x23
 8001854:	221f      	movs	r2, #31
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	4019      	ands	r1, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	6818      	ldr	r0, [r3, #0]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	3b23      	subs	r3, #35	@ 0x23
 800186e:	fa00 f203 	lsl.w	r2, r0, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	631a      	str	r2, [r3, #48]	@ 0x30
 800187a:	e01b      	b.n	80018b4 <HAL_ADC_ConfigChannel+0xe4>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	3b41      	subs	r3, #65	@ 0x41
 800188e:	221f      	movs	r2, #31
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	4019      	ands	r1, r3
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	3b41      	subs	r3, #65	@ 0x41
 80018a8:	fa00 f203 	lsl.w	r2, r0, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b09      	cmp	r3, #9
 80018ba:	d91c      	bls.n	80018f6 <HAL_ADC_ConfigChannel+0x126>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68d9      	ldr	r1, [r3, #12]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	4613      	mov	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	4413      	add	r3, r2
 80018cc:	3b1e      	subs	r3, #30
 80018ce:	2207      	movs	r2, #7
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	4019      	ands	r1, r3
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	6898      	ldr	r0, [r3, #8]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	3b1e      	subs	r3, #30
 80018e8:	fa00 f203 	lsl.w	r2, r0, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	60da      	str	r2, [r3, #12]
 80018f4:	e019      	b.n	800192a <HAL_ADC_ConfigChannel+0x15a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6919      	ldr	r1, [r3, #16]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4613      	mov	r3, r2
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4413      	add	r3, r2
 8001906:	2207      	movs	r2, #7
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	4019      	ands	r1, r3
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	6898      	ldr	r0, [r3, #8]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4613      	mov	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	fa00 f203 	lsl.w	r2, r0, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b10      	cmp	r3, #16
 8001930:	d003      	beq.n	800193a <HAL_ADC_ConfigChannel+0x16a>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b11      	cmp	r3, #17
 8001938:	d132      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x1d0>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a1d      	ldr	r2, [pc, #116]	@ (80019b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d125      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x1c0>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d126      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x1d0>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b10      	cmp	r3, #16
 8001968:	d11a      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x1d0>
 800196a:	4b13      	ldr	r3, [pc, #76]	@ (80019b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a13      	ldr	r2, [pc, #76]	@ (80019bc <HAL_ADC_ConfigChannel+0x1ec>)
 8001970:	fba2 2303 	umull	r2, r3, r2, r3
 8001974:	0c9a      	lsrs	r2, r3, #18
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	e002      	b.n	8001988 <HAL_ADC_ConfigChannel+0x1b8>
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	3b01      	subs	r3, #1
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f9      	bne.n	8001982 <HAL_ADC_ConfigChannel+0x1b2>
 800198e:	e007      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x1d0>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001994:	f043 0220 	orr.w	r2, r3, #32
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	629a      	str	r2, [r3, #40]	@ 0x28
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	4618      	mov	r0, r3
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	40012400 	.word	0x40012400
 80019b8:	20000000 	.word	0x20000000
 80019bc:	431bde83 	.word	0x431bde83

080019c0 <ADC_Enable>:
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	2300      	movs	r3, #0
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d040      	beq.n	8001a60 <ADC_Enable+0xa0>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f042 0201 	orr.w	r2, r2, #1
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	4b1f      	ldr	r3, [pc, #124]	@ (8001a6c <ADC_Enable+0xac>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001a70 <ADC_Enable+0xb0>)
 80019f4:	fba2 2303 	umull	r2, r3, r2, r3
 80019f8:	0c9b      	lsrs	r3, r3, #18
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	e002      	b.n	8001a04 <ADC_Enable+0x44>
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	3b01      	subs	r3, #1
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f9      	bne.n	80019fe <ADC_Enable+0x3e>
 8001a0a:	f7ff fc51 	bl	80012b0 <HAL_GetTick>
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	e01f      	b.n	8001a52 <ADC_Enable+0x92>
 8001a12:	f7ff fc4d 	bl	80012b0 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d918      	bls.n	8001a52 <ADC_Enable+0x92>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d011      	beq.n	8001a52 <ADC_Enable+0x92>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a32:	f043 0210 	orr.w	r2, r3, #16
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a3e:	f043 0201 	orr.w	r2, r3, #1
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e007      	b.n	8001a62 <ADC_Enable+0xa2>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d1d8      	bne.n	8001a12 <ADC_Enable+0x52>
 8001a60:	2300      	movs	r3, #0
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	431bde83 	.word	0x431bde83

08001a74 <ADC_ConversionStop_Disable>:
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d12e      	bne.n	8001aec <ADC_ConversionStop_Disable+0x78>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0201 	bic.w	r2, r2, #1
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	f7ff fc07 	bl	80012b0 <HAL_GetTick>
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	e01b      	b.n	8001ade <ADC_ConversionStop_Disable+0x6a>
 8001aa6:	f7ff fc03 	bl	80012b0 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d914      	bls.n	8001ade <ADC_ConversionStop_Disable+0x6a>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d10d      	bne.n	8001ade <ADC_ConversionStop_Disable+0x6a>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac6:	f043 0210 	orr.w	r2, r3, #16
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad2:	f043 0201 	orr.w	r2, r3, #1
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ada:	2301      	movs	r3, #1
 8001adc:	e007      	b.n	8001aee <ADC_ConversionStop_Disable+0x7a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d0dc      	beq.n	8001aa6 <ADC_ConversionStop_Disable+0x32>
 8001aec:	2300      	movs	r3, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_ADCEx_InjectedConvCpltCallback>:
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr

08001b08 <__NVIC_SetPriorityGrouping>:
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b24:	4013      	ands	r3, r2
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	021a      	lsls	r2, r3, #8
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	4a04      	ldr	r2, [pc, #16]	@ (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	60d3      	str	r3, [r2, #12]
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_GetPriorityGrouping>:
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4b04      	ldr	r3, [pc, #16]	@ (8001b68 <__NVIC_GetPriorityGrouping+0x18>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_EnableIRQ>:
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	db0b      	blt.n	8001b96 <__NVIC_EnableIRQ+0x2a>
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	f003 021f 	and.w	r2, r3, #31
 8001b84:	4906      	ldr	r1, [pc, #24]	@ (8001ba0 <__NVIC_EnableIRQ+0x34>)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	095b      	lsrs	r3, r3, #5
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	e000e100 	.word	0xe000e100

08001ba4 <__NVIC_SetPriority>:
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	71fb      	strb	r3, [r7, #7]
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	db0a      	blt.n	8001bce <__NVIC_SetPriority+0x2a>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	490c      	ldr	r1, [pc, #48]	@ (8001bf0 <__NVIC_SetPriority+0x4c>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8001bcc:	e00a      	b.n	8001be4 <__NVIC_SetPriority+0x40>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4908      	ldr	r1, [pc, #32]	@ (8001bf4 <__NVIC_SetPriority+0x50>)
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	3b04      	subs	r3, #4
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	440b      	add	r3, r1
 8001be2:	761a      	strb	r2, [r3, #24]
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000e100 	.word	0xe000e100
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <NVIC_EncodePriority>:
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	@ 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	61fb      	str	r3, [r7, #28]
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f1c3 0307 	rsb	r3, r3, #7
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	bf28      	it	cs
 8001c16:	2304      	movcs	r3, #4
 8001c18:	61bb      	str	r3, [r7, #24]
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d902      	bls.n	8001c28 <NVIC_EncodePriority+0x30>
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3b03      	subs	r3, #3
 8001c26:	e000      	b.n	8001c2a <NVIC_EncodePriority+0x32>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43da      	mvns	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	f04f 31ff 	mov.w	r1, #4294967295
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	43d9      	mvns	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	400b      	ands	r3, r1
 8001c50:	4313      	orrs	r3, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	3724      	adds	r7, #36	@ 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <SysTick_Config>:
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c6c:	d301      	bcc.n	8001c72 <SysTick_Config+0x16>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00f      	b.n	8001c92 <SysTick_Config+0x36>
 8001c72:	4a0a      	ldr	r2, [pc, #40]	@ (8001c9c <SysTick_Config+0x40>)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	6053      	str	r3, [r2, #4]
 8001c7a:	210f      	movs	r1, #15
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c80:	f7ff ff90 	bl	8001ba4 <__NVIC_SetPriority>
 8001c84:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <SysTick_Config+0x40>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	4b04      	ldr	r3, [pc, #16]	@ (8001c9c <SysTick_Config+0x40>)
 8001c8c:	2207      	movs	r2, #7
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	2300      	movs	r3, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	e000e010 	.word	0xe000e010

08001ca0 <HAL_NVIC_SetPriorityGrouping>:
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff ff2d 	bl	8001b08 <__NVIC_SetPriorityGrouping>
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_NVIC_SetPriority>:
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
 8001cc2:	73fb      	strb	r3, [r7, #15]
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	f7ff ff42 	bl	8001b50 <__NVIC_GetPriorityGrouping>
 8001ccc:	6178      	str	r0, [r7, #20]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68b9      	ldr	r1, [r7, #8]
 8001cd2:	6978      	ldr	r0, [r7, #20]
 8001cd4:	f7ff ff90 	bl	8001bf8 <NVIC_EncodePriority>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff5f 	bl	8001ba4 <__NVIC_SetPriority>
 8001ce6:	bf00      	nop
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_NVIC_EnableIRQ>:
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	71fb      	strb	r3, [r7, #7]
 8001cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff35 	bl	8001b6c <__NVIC_EnableIRQ>
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_SYSTICK_Config>:
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ffa2 	bl	8001c5c <SysTick_Config>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_SYSTICK_IRQHandler>:
 8001d22:	b580      	push	{r7, lr}
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	f002 fed1 	bl	8004acc <HAL_SYSTICK_Callback>
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_GPIO_Init>:
 8001d30:	b480      	push	{r7}
 8001d32:	b08b      	sub	sp, #44	@ 0x2c
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d3e:	2300      	movs	r3, #0
 8001d40:	623b      	str	r3, [r7, #32]
 8001d42:	e169      	b.n	8002018 <HAL_GPIO_Init+0x2e8>
 8001d44:	2201      	movs	r2, #1
 8001d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	69fa      	ldr	r2, [r7, #28]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	f040 8158 	bne.w	8002012 <HAL_GPIO_Init+0x2e2>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	4a9a      	ldr	r2, [pc, #616]	@ (8001fd0 <HAL_GPIO_Init+0x2a0>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d05e      	beq.n	8001e2a <HAL_GPIO_Init+0xfa>
 8001d6c:	4a98      	ldr	r2, [pc, #608]	@ (8001fd0 <HAL_GPIO_Init+0x2a0>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d875      	bhi.n	8001e5e <HAL_GPIO_Init+0x12e>
 8001d72:	4a98      	ldr	r2, [pc, #608]	@ (8001fd4 <HAL_GPIO_Init+0x2a4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d058      	beq.n	8001e2a <HAL_GPIO_Init+0xfa>
 8001d78:	4a96      	ldr	r2, [pc, #600]	@ (8001fd4 <HAL_GPIO_Init+0x2a4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d86f      	bhi.n	8001e5e <HAL_GPIO_Init+0x12e>
 8001d7e:	4a96      	ldr	r2, [pc, #600]	@ (8001fd8 <HAL_GPIO_Init+0x2a8>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d052      	beq.n	8001e2a <HAL_GPIO_Init+0xfa>
 8001d84:	4a94      	ldr	r2, [pc, #592]	@ (8001fd8 <HAL_GPIO_Init+0x2a8>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d869      	bhi.n	8001e5e <HAL_GPIO_Init+0x12e>
 8001d8a:	4a94      	ldr	r2, [pc, #592]	@ (8001fdc <HAL_GPIO_Init+0x2ac>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d04c      	beq.n	8001e2a <HAL_GPIO_Init+0xfa>
 8001d90:	4a92      	ldr	r2, [pc, #584]	@ (8001fdc <HAL_GPIO_Init+0x2ac>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d863      	bhi.n	8001e5e <HAL_GPIO_Init+0x12e>
 8001d96:	4a92      	ldr	r2, [pc, #584]	@ (8001fe0 <HAL_GPIO_Init+0x2b0>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d046      	beq.n	8001e2a <HAL_GPIO_Init+0xfa>
 8001d9c:	4a90      	ldr	r2, [pc, #576]	@ (8001fe0 <HAL_GPIO_Init+0x2b0>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d85d      	bhi.n	8001e5e <HAL_GPIO_Init+0x12e>
 8001da2:	2b12      	cmp	r3, #18
 8001da4:	d82a      	bhi.n	8001dfc <HAL_GPIO_Init+0xcc>
 8001da6:	2b12      	cmp	r3, #18
 8001da8:	d859      	bhi.n	8001e5e <HAL_GPIO_Init+0x12e>
 8001daa:	a201      	add	r2, pc, #4	@ (adr r2, 8001db0 <HAL_GPIO_Init+0x80>)
 8001dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db0:	08001e2b 	.word	0x08001e2b
 8001db4:	08001e05 	.word	0x08001e05
 8001db8:	08001e17 	.word	0x08001e17
 8001dbc:	08001e59 	.word	0x08001e59
 8001dc0:	08001e5f 	.word	0x08001e5f
 8001dc4:	08001e5f 	.word	0x08001e5f
 8001dc8:	08001e5f 	.word	0x08001e5f
 8001dcc:	08001e5f 	.word	0x08001e5f
 8001dd0:	08001e5f 	.word	0x08001e5f
 8001dd4:	08001e5f 	.word	0x08001e5f
 8001dd8:	08001e5f 	.word	0x08001e5f
 8001ddc:	08001e5f 	.word	0x08001e5f
 8001de0:	08001e5f 	.word	0x08001e5f
 8001de4:	08001e5f 	.word	0x08001e5f
 8001de8:	08001e5f 	.word	0x08001e5f
 8001dec:	08001e5f 	.word	0x08001e5f
 8001df0:	08001e5f 	.word	0x08001e5f
 8001df4:	08001e0d 	.word	0x08001e0d
 8001df8:	08001e21 	.word	0x08001e21
 8001dfc:	4a79      	ldr	r2, [pc, #484]	@ (8001fe4 <HAL_GPIO_Init+0x2b4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d013      	beq.n	8001e2a <HAL_GPIO_Init+0xfa>
 8001e02:	e02c      	b.n	8001e5e <HAL_GPIO_Init+0x12e>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	623b      	str	r3, [r7, #32]
 8001e0a:	e029      	b.n	8001e60 <HAL_GPIO_Init+0x130>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	3304      	adds	r3, #4
 8001e12:	623b      	str	r3, [r7, #32]
 8001e14:	e024      	b.n	8001e60 <HAL_GPIO_Init+0x130>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	3308      	adds	r3, #8
 8001e1c:	623b      	str	r3, [r7, #32]
 8001e1e:	e01f      	b.n	8001e60 <HAL_GPIO_Init+0x130>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	330c      	adds	r3, #12
 8001e26:	623b      	str	r3, [r7, #32]
 8001e28:	e01a      	b.n	8001e60 <HAL_GPIO_Init+0x130>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d102      	bne.n	8001e38 <HAL_GPIO_Init+0x108>
 8001e32:	2304      	movs	r3, #4
 8001e34:	623b      	str	r3, [r7, #32]
 8001e36:	e013      	b.n	8001e60 <HAL_GPIO_Init+0x130>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d105      	bne.n	8001e4c <HAL_GPIO_Init+0x11c>
 8001e40:	2308      	movs	r3, #8
 8001e42:	623b      	str	r3, [r7, #32]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69fa      	ldr	r2, [r7, #28]
 8001e48:	611a      	str	r2, [r3, #16]
 8001e4a:	e009      	b.n	8001e60 <HAL_GPIO_Init+0x130>
 8001e4c:	2308      	movs	r3, #8
 8001e4e:	623b      	str	r3, [r7, #32]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69fa      	ldr	r2, [r7, #28]
 8001e54:	615a      	str	r2, [r3, #20]
 8001e56:	e003      	b.n	8001e60 <HAL_GPIO_Init+0x130>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	623b      	str	r3, [r7, #32]
 8001e5c:	e000      	b.n	8001e60 <HAL_GPIO_Init+0x130>
 8001e5e:	bf00      	nop
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	2bff      	cmp	r3, #255	@ 0xff
 8001e64:	d801      	bhi.n	8001e6a <HAL_GPIO_Init+0x13a>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	e001      	b.n	8001e6e <HAL_GPIO_Init+0x13e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	2bff      	cmp	r3, #255	@ 0xff
 8001e74:	d802      	bhi.n	8001e7c <HAL_GPIO_Init+0x14c>
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	e002      	b.n	8001e82 <HAL_GPIO_Init+0x152>
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7e:	3b08      	subs	r3, #8
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	210f      	movs	r1, #15
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	401a      	ands	r2, r3
 8001e94:	6a39      	ldr	r1, [r7, #32]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 80b1 	beq.w	8002012 <HAL_GPIO_Init+0x2e2>
 8001eb0:	4b4d      	ldr	r3, [pc, #308]	@ (8001fe8 <HAL_GPIO_Init+0x2b8>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	4a4c      	ldr	r2, [pc, #304]	@ (8001fe8 <HAL_GPIO_Init+0x2b8>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	6193      	str	r3, [r2, #24]
 8001ebc:	4b4a      	ldr	r3, [pc, #296]	@ (8001fe8 <HAL_GPIO_Init+0x2b8>)
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	4a48      	ldr	r2, [pc, #288]	@ (8001fec <HAL_GPIO_Init+0x2bc>)
 8001eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ecc:	089b      	lsrs	r3, r3, #2
 8001ece:	3302      	adds	r3, #2
 8001ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	220f      	movs	r2, #15
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a40      	ldr	r2, [pc, #256]	@ (8001ff0 <HAL_GPIO_Init+0x2c0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d013      	beq.n	8001f1c <HAL_GPIO_Init+0x1ec>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ff4 <HAL_GPIO_Init+0x2c4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d00d      	beq.n	8001f18 <HAL_GPIO_Init+0x1e8>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a3e      	ldr	r2, [pc, #248]	@ (8001ff8 <HAL_GPIO_Init+0x2c8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d007      	beq.n	8001f14 <HAL_GPIO_Init+0x1e4>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a3d      	ldr	r2, [pc, #244]	@ (8001ffc <HAL_GPIO_Init+0x2cc>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d101      	bne.n	8001f10 <HAL_GPIO_Init+0x1e0>
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e006      	b.n	8001f1e <HAL_GPIO_Init+0x1ee>
 8001f10:	2304      	movs	r3, #4
 8001f12:	e004      	b.n	8001f1e <HAL_GPIO_Init+0x1ee>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e002      	b.n	8001f1e <HAL_GPIO_Init+0x1ee>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <HAL_GPIO_Init+0x1ee>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f20:	f002 0203 	and.w	r2, r2, #3
 8001f24:	0092      	lsls	r2, r2, #2
 8001f26:	4093      	lsls	r3, r2
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	492f      	ldr	r1, [pc, #188]	@ (8001fec <HAL_GPIO_Init+0x2bc>)
 8001f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f32:	089b      	lsrs	r3, r3, #2
 8001f34:	3302      	adds	r3, #2
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d006      	beq.n	8001f56 <HAL_GPIO_Init+0x226>
 8001f48:	4b2d      	ldr	r3, [pc, #180]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	492c      	ldr	r1, [pc, #176]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	608b      	str	r3, [r1, #8]
 8001f54:	e006      	b.n	8001f64 <HAL_GPIO_Init+0x234>
 8001f56:	4b2a      	ldr	r3, [pc, #168]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	4928      	ldr	r1, [pc, #160]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	608b      	str	r3, [r1, #8]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d006      	beq.n	8001f7e <HAL_GPIO_Init+0x24e>
 8001f70:	4b23      	ldr	r3, [pc, #140]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	4922      	ldr	r1, [pc, #136]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60cb      	str	r3, [r1, #12]
 8001f7c:	e006      	b.n	8001f8c <HAL_GPIO_Init+0x25c>
 8001f7e:	4b20      	ldr	r3, [pc, #128]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	491e      	ldr	r1, [pc, #120]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60cb      	str	r3, [r1, #12]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d006      	beq.n	8001fa6 <HAL_GPIO_Init+0x276>
 8001f98:	4b19      	ldr	r3, [pc, #100]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	4918      	ldr	r1, [pc, #96]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]
 8001fa4:	e006      	b.n	8001fb4 <HAL_GPIO_Init+0x284>
 8001fa6:	4b16      	ldr	r3, [pc, #88]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	4914      	ldr	r1, [pc, #80]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	604b      	str	r3, [r1, #4]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d021      	beq.n	8002004 <HAL_GPIO_Init+0x2d4>
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	490e      	ldr	r1, [pc, #56]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]
 8001fcc:	e021      	b.n	8002012 <HAL_GPIO_Init+0x2e2>
 8001fce:	bf00      	nop
 8001fd0:	10320000 	.word	0x10320000
 8001fd4:	10310000 	.word	0x10310000
 8001fd8:	10220000 	.word	0x10220000
 8001fdc:	10210000 	.word	0x10210000
 8001fe0:	10120000 	.word	0x10120000
 8001fe4:	10110000 	.word	0x10110000
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40010000 	.word	0x40010000
 8001ff0:	40010800 	.word	0x40010800
 8001ff4:	40010c00 	.word	0x40010c00
 8001ff8:	40011000 	.word	0x40011000
 8001ffc:	40011400 	.word	0x40011400
 8002000:	40010400 	.word	0x40010400
 8002004:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <HAL_GPIO_Init+0x304>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	43db      	mvns	r3, r3
 800200c:	4909      	ldr	r1, [pc, #36]	@ (8002034 <HAL_GPIO_Init+0x304>)
 800200e:	4013      	ands	r3, r2
 8002010:	600b      	str	r3, [r1, #0]
 8002012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002014:	3301      	adds	r3, #1
 8002016:	627b      	str	r3, [r7, #36]	@ 0x24
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201e:	fa22 f303 	lsr.w	r3, r2, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	f47f ae8e 	bne.w	8001d44 <HAL_GPIO_Init+0x14>
 8002028:	bf00      	nop
 800202a:	bf00      	nop
 800202c:	372c      	adds	r7, #44	@ 0x2c
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr
 8002034:	40010400 	.word	0x40010400

08002038 <HAL_GPIO_ReadPin>:
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	887b      	ldrh	r3, [r7, #2]
 800204a:	4013      	ands	r3, r2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d002      	beq.n	8002056 <HAL_GPIO_ReadPin+0x1e>
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
 8002054:	e001      	b.n	800205a <HAL_GPIO_ReadPin+0x22>
 8002056:	2300      	movs	r3, #0
 8002058:	73fb      	strb	r3, [r7, #15]
 800205a:	7bfb      	ldrb	r3, [r7, #15]
 800205c:	4618      	mov	r0, r3
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr

08002066 <HAL_GPIO_WritePin>:
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	460b      	mov	r3, r1
 8002070:	807b      	strh	r3, [r7, #2]
 8002072:	4613      	mov	r3, r2
 8002074:	707b      	strb	r3, [r7, #1]
 8002076:	787b      	ldrb	r3, [r7, #1]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_WritePin+0x1e>
 800207c:	887a      	ldrh	r2, [r7, #2]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	611a      	str	r2, [r3, #16]
 8002082:	e003      	b.n	800208c <HAL_GPIO_WritePin+0x26>
 8002084:	887b      	ldrh	r3, [r7, #2]
 8002086:	041a      	lsls	r2, r3, #16
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	611a      	str	r2, [r3, #16]
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr
	...

08002098 <HAL_GPIO_EXTI_IRQHandler>:
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	80fb      	strh	r3, [r7, #6]
 80020a2:	4b08      	ldr	r3, [pc, #32]	@ (80020c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020a4:	695a      	ldr	r2, [r3, #20]
 80020a6:	88fb      	ldrh	r3, [r7, #6]
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d006      	beq.n	80020bc <HAL_GPIO_EXTI_IRQHandler+0x24>
 80020ae:	4a05      	ldr	r2, [pc, #20]	@ (80020c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020b0:	88fb      	ldrh	r3, [r7, #6]
 80020b2:	6153      	str	r3, [r2, #20]
 80020b4:	88fb      	ldrh	r3, [r7, #6]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 f806 	bl	80020c8 <HAL_GPIO_EXTI_Callback>
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40010400 	.word	0x40010400

080020c8 <HAL_GPIO_EXTI_Callback>:
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	80fb      	strh	r3, [r7, #6]
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <HAL_I2C_Init>:
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_I2C_Init+0x12>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e12b      	b.n	8002346 <HAL_I2C_Init+0x26a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d106      	bne.n	8002108 <HAL_I2C_Init+0x2c>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7fe ff48 	bl	8000f98 <HAL_I2C_MspInit>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2224      	movs	r2, #36	@ 0x24
 800210c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0201 	bic.w	r2, r2, #1
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	f001 fbca 	bl	80038d8 <HAL_RCC_GetPCLK1Freq>
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	4a81      	ldr	r2, [pc, #516]	@ (8002350 <HAL_I2C_Init+0x274>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d807      	bhi.n	8002160 <HAL_I2C_Init+0x84>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4a80      	ldr	r2, [pc, #512]	@ (8002354 <HAL_I2C_Init+0x278>)
 8002154:	4293      	cmp	r3, r2
 8002156:	bf94      	ite	ls
 8002158:	2301      	movls	r3, #1
 800215a:	2300      	movhi	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	e006      	b.n	800216e <HAL_I2C_Init+0x92>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4a7d      	ldr	r2, [pc, #500]	@ (8002358 <HAL_I2C_Init+0x27c>)
 8002164:	4293      	cmp	r3, r2
 8002166:	bf94      	ite	ls
 8002168:	2301      	movls	r3, #1
 800216a:	2300      	movhi	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_I2C_Init+0x9a>
 8002172:	2301      	movs	r3, #1
 8002174:	e0e7      	b.n	8002346 <HAL_I2C_Init+0x26a>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4a78      	ldr	r2, [pc, #480]	@ (800235c <HAL_I2C_Init+0x280>)
 800217a:	fba2 2303 	umull	r2, r3, r2, r3
 800217e:	0c9b      	lsrs	r3, r3, #18
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	430a      	orrs	r2, r1
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4a6a      	ldr	r2, [pc, #424]	@ (8002350 <HAL_I2C_Init+0x274>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d802      	bhi.n	80021b0 <HAL_I2C_Init+0xd4>
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	3301      	adds	r3, #1
 80021ae:	e009      	b.n	80021c4 <HAL_I2C_Init+0xe8>
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80021b6:	fb02 f303 	mul.w	r3, r2, r3
 80021ba:	4a69      	ldr	r2, [pc, #420]	@ (8002360 <HAL_I2C_Init+0x284>)
 80021bc:	fba2 2303 	umull	r2, r3, r2, r3
 80021c0:	099b      	lsrs	r3, r3, #6
 80021c2:	3301      	adds	r3, #1
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	430b      	orrs	r3, r1
 80021ca:	6213      	str	r3, [r2, #32]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80021d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	495c      	ldr	r1, [pc, #368]	@ (8002350 <HAL_I2C_Init+0x274>)
 80021e0:	428b      	cmp	r3, r1
 80021e2:	d819      	bhi.n	8002218 <HAL_I2C_Init+0x13c>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1e59      	subs	r1, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80021f2:	1c59      	adds	r1, r3, #1
 80021f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80021f8:	400b      	ands	r3, r1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <HAL_I2C_Init+0x138>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	1e59      	subs	r1, r3, #1
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	fbb1 f3f3 	udiv	r3, r1, r3
 800220c:	3301      	adds	r3, #1
 800220e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002212:	e051      	b.n	80022b8 <HAL_I2C_Init+0x1dc>
 8002214:	2304      	movs	r3, #4
 8002216:	e04f      	b.n	80022b8 <HAL_I2C_Init+0x1dc>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d111      	bne.n	8002244 <HAL_I2C_Init+0x168>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	1e58      	subs	r0, r3, #1
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6859      	ldr	r1, [r3, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	440b      	add	r3, r1
 800222e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002232:	3301      	adds	r3, #1
 8002234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002238:	2b00      	cmp	r3, #0
 800223a:	bf0c      	ite	eq
 800223c:	2301      	moveq	r3, #1
 800223e:	2300      	movne	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	e012      	b.n	800226a <HAL_I2C_Init+0x18e>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	1e58      	subs	r0, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6859      	ldr	r1, [r3, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	0099      	lsls	r1, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	fbb0 f3f3 	udiv	r3, r0, r3
 800225a:	3301      	adds	r3, #1
 800225c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf0c      	ite	eq
 8002264:	2301      	moveq	r3, #1
 8002266:	2300      	movne	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_I2C_Init+0x196>
 800226e:	2301      	movs	r3, #1
 8002270:	e022      	b.n	80022b8 <HAL_I2C_Init+0x1dc>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10e      	bne.n	8002298 <HAL_I2C_Init+0x1bc>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1e58      	subs	r0, r3, #1
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6859      	ldr	r1, [r3, #4]
 8002282:	460b      	mov	r3, r1
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	440b      	add	r3, r1
 8002288:	fbb0 f3f3 	udiv	r3, r0, r3
 800228c:	3301      	adds	r3, #1
 800228e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002292:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002296:	e00f      	b.n	80022b8 <HAL_I2C_Init+0x1dc>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	1e58      	subs	r0, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6859      	ldr	r1, [r3, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	0099      	lsls	r1, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ae:	3301      	adds	r3, #1
 80022b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	6809      	ldr	r1, [r1, #0]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61cb      	str	r3, [r1, #28]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69da      	ldr	r2, [r3, #28]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80022e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6911      	ldr	r1, [r2, #16]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	68d2      	ldr	r2, [r2, #12]
 80022f2:	4311      	orrs	r1, r2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	430b      	orrs	r3, r1
 80022fa:	6093      	str	r3, [r2, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695a      	ldr	r2, [r3, #20]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	60da      	str	r2, [r3, #12]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0201 	orr.w	r2, r2, #1
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	641a      	str	r2, [r3, #64]	@ 0x40
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2220      	movs	r2, #32
 8002332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	631a      	str	r2, [r3, #48]	@ 0x30
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002344:	2300      	movs	r3, #0
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	000186a0 	.word	0x000186a0
 8002354:	001e847f 	.word	0x001e847f
 8002358:	003d08ff 	.word	0x003d08ff
 800235c:	431bde83 	.word	0x431bde83
 8002360:	10624dd3 	.word	0x10624dd3

08002364 <HAL_I2C_Master_Transmit>:
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af02      	add	r7, sp, #8
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	461a      	mov	r2, r3
 8002370:	460b      	mov	r3, r1
 8002372:	817b      	strh	r3, [r7, #10]
 8002374:	4613      	mov	r3, r2
 8002376:	813b      	strh	r3, [r7, #8]
 8002378:	f7fe ff9a 	bl	80012b0 <HAL_GetTick>
 800237c:	6178      	str	r0, [r7, #20]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b20      	cmp	r3, #32
 8002388:	f040 80e0 	bne.w	800254c <HAL_I2C_Master_Transmit+0x1e8>
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	2319      	movs	r3, #25
 8002392:	2201      	movs	r2, #1
 8002394:	4970      	ldr	r1, [pc, #448]	@ (8002558 <HAL_I2C_Master_Transmit+0x1f4>)
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 fc9e 	bl	8002cd8 <I2C_WaitOnFlagUntilTimeout>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_I2C_Master_Transmit+0x42>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e0d3      	b.n	800254e <HAL_I2C_Master_Transmit+0x1ea>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_I2C_Master_Transmit+0x50>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e0cc      	b.n	800254e <HAL_I2C_Master_Transmit+0x1ea>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d007      	beq.n	80023da <HAL_I2C_Master_Transmit+0x76>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f042 0201 	orr.w	r2, r2, #1
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2221      	movs	r2, #33	@ 0x21
 80023ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2210      	movs	r2, #16
 80023f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	625a      	str	r2, [r3, #36]	@ 0x24
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	893a      	ldrh	r2, [r7, #8]
 800240a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4a50      	ldr	r2, [pc, #320]	@ (800255c <HAL_I2C_Master_Transmit+0x1f8>)
 800241a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800241c:	8979      	ldrh	r1, [r7, #10]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	6a3a      	ldr	r2, [r7, #32]
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 fb08 	bl	8002a38 <I2C_MasterRequestWrite>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_I2C_Master_Transmit+0xce>
 800242e:	2301      	movs	r3, #1
 8002430:	e08d      	b.n	800254e <HAL_I2C_Master_Transmit+0x1ea>
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	e066      	b.n	8002518 <HAL_I2C_Master_Transmit+0x1b4>
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	6a39      	ldr	r1, [r7, #32]
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 fd5c 	bl	8002f0c <I2C_WaitOnTXEFlagUntilTimeout>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00d      	beq.n	8002476 <HAL_I2C_Master_Transmit+0x112>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245e:	2b04      	cmp	r3, #4
 8002460:	d107      	bne.n	8002472 <HAL_I2C_Master_Transmit+0x10e>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	2301      	movs	r3, #1
 8002474:	e06b      	b.n	800254e <HAL_I2C_Master_Transmit+0x1ea>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247a:	781a      	ldrb	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	611a      	str	r2, [r3, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	625a      	str	r2, [r3, #36]	@ 0x24
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d11b      	bne.n	80024ec <HAL_I2C_Master_Transmit+0x188>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d017      	beq.n	80024ec <HAL_I2C_Master_Transmit+0x188>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c0:	781a      	ldrb	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	611a      	str	r2, [r3, #16]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	625a      	str	r2, [r3, #36]	@ 0x24
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	851a      	strh	r2, [r3, #40]	@ 0x28
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	6a39      	ldr	r1, [r7, #32]
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 fd53 	bl	8002f9c <I2C_WaitOnBTFFlagUntilTimeout>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00d      	beq.n	8002518 <HAL_I2C_Master_Transmit+0x1b4>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002500:	2b04      	cmp	r3, #4
 8002502:	d107      	bne.n	8002514 <HAL_I2C_Master_Transmit+0x1b0>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	2301      	movs	r3, #1
 8002516:	e01a      	b.n	800254e <HAL_I2C_Master_Transmit+0x1ea>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800251c:	2b00      	cmp	r3, #0
 800251e:	d194      	bne.n	800244a <HAL_I2C_Master_Transmit+0xe6>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2220      	movs	r2, #32
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002548:	2300      	movs	r3, #0
 800254a:	e000      	b.n	800254e <HAL_I2C_Master_Transmit+0x1ea>
 800254c:	2302      	movs	r3, #2
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	00100002 	.word	0x00100002
 800255c:	ffff0000 	.word	0xffff0000

08002560 <HAL_I2C_Master_Receive>:
 8002560:	b580      	push	{r7, lr}
 8002562:	b08c      	sub	sp, #48	@ 0x30
 8002564:	af02      	add	r7, sp, #8
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	607a      	str	r2, [r7, #4]
 800256a:	461a      	mov	r2, r3
 800256c:	460b      	mov	r3, r1
 800256e:	817b      	strh	r3, [r7, #10]
 8002570:	4613      	mov	r3, r2
 8002572:	813b      	strh	r3, [r7, #8]
 8002574:	2300      	movs	r3, #0
 8002576:	623b      	str	r3, [r7, #32]
 8002578:	f7fe fe9a 	bl	80012b0 <HAL_GetTick>
 800257c:	6278      	str	r0, [r7, #36]	@ 0x24
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b20      	cmp	r3, #32
 8002588:	f040 824b 	bne.w	8002a22 <HAL_I2C_Master_Receive+0x4c2>
 800258c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	2319      	movs	r3, #25
 8002592:	2201      	movs	r2, #1
 8002594:	497f      	ldr	r1, [pc, #508]	@ (8002794 <HAL_I2C_Master_Receive+0x234>)
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 fb9e 	bl	8002cd8 <I2C_WaitOnFlagUntilTimeout>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_I2C_Master_Receive+0x46>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e23e      	b.n	8002a24 <HAL_I2C_Master_Receive+0x4c4>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_I2C_Master_Receive+0x54>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e237      	b.n	8002a24 <HAL_I2C_Master_Receive+0x4c4>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d007      	beq.n	80025da <HAL_I2C_Master_Receive+0x7a>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f042 0201 	orr.w	r2, r2, #1
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2222      	movs	r2, #34	@ 0x22
 80025ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2210      	movs	r2, #16
 80025f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	625a      	str	r2, [r3, #36]	@ 0x24
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	893a      	ldrh	r2, [r7, #8]
 800260a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4a5f      	ldr	r2, [pc, #380]	@ (8002798 <HAL_I2C_Master_Receive+0x238>)
 800261a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800261c:	8979      	ldrh	r1, [r7, #10]
 800261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002620:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 fa8a 	bl	8002b3c <I2C_MasterRequestRead>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_I2C_Master_Receive+0xd2>
 800262e:	2301      	movs	r3, #1
 8002630:	e1f8      	b.n	8002a24 <HAL_I2C_Master_Receive+0x4c4>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002636:	2b00      	cmp	r3, #0
 8002638:	d113      	bne.n	8002662 <HAL_I2C_Master_Receive+0x102>
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	61fb      	str	r3, [r7, #28]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	61fb      	str	r3, [r7, #28]
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	e1cc      	b.n	80029fc <HAL_I2C_Master_Receive+0x49c>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002666:	2b01      	cmp	r3, #1
 8002668:	d11e      	bne.n	80026a8 <HAL_I2C_Master_Receive+0x148>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	b672      	cpsid	i
 800267c:	bf00      	nop
 800267e:	2300      	movs	r3, #0
 8002680:	61bb      	str	r3, [r7, #24]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	61bb      	str	r3, [r7, #24]
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	b662      	cpsie	i
 80026a6:	e035      	b.n	8002714 <HAL_I2C_Master_Receive+0x1b4>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d11e      	bne.n	80026ee <HAL_I2C_Master_Receive+0x18e>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	b672      	cpsid	i
 80026c2:	bf00      	nop
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	b662      	cpsie	i
 80026ec:	e012      	b.n	8002714 <HAL_I2C_Master_Receive+0x1b4>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	e172      	b.n	80029fc <HAL_I2C_Master_Receive+0x49c>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800271a:	2b03      	cmp	r3, #3
 800271c:	f200 811f 	bhi.w	800295e <HAL_I2C_Master_Receive+0x3fe>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002724:	2b01      	cmp	r3, #1
 8002726:	d123      	bne.n	8002770 <HAL_I2C_Master_Receive+0x210>
 8002728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800272a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 fc7d 	bl	800302c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_I2C_Master_Receive+0x1dc>
 8002738:	2301      	movs	r3, #1
 800273a:	e173      	b.n	8002a24 <HAL_I2C_Master_Receive+0x4c4>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	625a      	str	r2, [r3, #36]	@ 0x24
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800276e:	e145      	b.n	80029fc <HAL_I2C_Master_Receive+0x49c>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002774:	2b02      	cmp	r3, #2
 8002776:	d152      	bne.n	800281e <HAL_I2C_Master_Receive+0x2be>
 8002778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277e:	2200      	movs	r2, #0
 8002780:	4906      	ldr	r1, [pc, #24]	@ (800279c <HAL_I2C_Master_Receive+0x23c>)
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 faa8 	bl	8002cd8 <I2C_WaitOnFlagUntilTimeout>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d008      	beq.n	80027a0 <HAL_I2C_Master_Receive+0x240>
 800278e:	2301      	movs	r3, #1
 8002790:	e148      	b.n	8002a24 <HAL_I2C_Master_Receive+0x4c4>
 8002792:	bf00      	nop
 8002794:	00100002 	.word	0x00100002
 8002798:	ffff0000 	.word	0xffff0000
 800279c:	00010004 	.word	0x00010004
 80027a0:	b672      	cpsid	i
 80027a2:	bf00      	nop
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691a      	ldr	r2, [r3, #16]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027dc:	b29b      	uxth	r3, r3
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027e6:	b662      	cpsie	i
 80027e8:	bf00      	nop
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	701a      	strb	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	625a      	str	r2, [r3, #36]	@ 0x24
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002812:	b29b      	uxth	r3, r3
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800281c:	e0ee      	b.n	80029fc <HAL_I2C_Master_Receive+0x49c>
 800281e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002824:	2200      	movs	r2, #0
 8002826:	4981      	ldr	r1, [pc, #516]	@ (8002a2c <HAL_I2C_Master_Receive+0x4cc>)
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 fa55 	bl	8002cd8 <I2C_WaitOnFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_I2C_Master_Receive+0x2d8>
 8002834:	2301      	movs	r3, #1
 8002836:	e0f5      	b.n	8002a24 <HAL_I2C_Master_Receive+0x4c4>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	b672      	cpsid	i
 800284a:	bf00      	nop
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	701a      	strb	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	625a      	str	r2, [r3, #36]	@ 0x24
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002874:	b29b      	uxth	r3, r3
 8002876:	3b01      	subs	r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800287e:	4b6c      	ldr	r3, [pc, #432]	@ (8002a30 <HAL_I2C_Master_Receive+0x4d0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	08db      	lsrs	r3, r3, #3
 8002884:	4a6b      	ldr	r2, [pc, #428]	@ (8002a34 <HAL_I2C_Master_Receive+0x4d4>)
 8002886:	fba2 2303 	umull	r2, r3, r2, r3
 800288a:	0a1a      	lsrs	r2, r3, #8
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	00da      	lsls	r2, r3, #3
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	623b      	str	r3, [r7, #32]
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	3b01      	subs	r3, #1
 800289c:	623b      	str	r3, [r7, #32]
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d118      	bne.n	80028d6 <HAL_I2C_Master_Receive+0x376>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2220      	movs	r2, #32
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	f043 0220 	orr.w	r2, r3, #32
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80028c6:	b662      	cpsie	i
 80028c8:	bf00      	nop
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80028d2:	2301      	movs	r3, #1
 80028d4:	e0a6      	b.n	8002a24 <HAL_I2C_Master_Receive+0x4c4>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d1d9      	bne.n	8002898 <HAL_I2C_Master_Receive+0x338>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	625a      	str	r2, [r3, #36]	@ 0x24
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800291c:	b29b      	uxth	r3, r3
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002926:	b662      	cpsie	i
 8002928:	bf00      	nop
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	701a      	strb	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	625a      	str	r2, [r3, #36]	@ 0x24
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800295c:	e04e      	b.n	80029fc <HAL_I2C_Master_Receive+0x49c>
 800295e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002960:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 fb62 	bl	800302c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_I2C_Master_Receive+0x412>
 800296e:	2301      	movs	r3, #1
 8002970:	e058      	b.n	8002a24 <HAL_I2C_Master_Receive+0x4c4>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	701a      	strb	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	625a      	str	r2, [r3, #36]	@ 0x24
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d124      	bne.n	80029fc <HAL_I2C_Master_Receive+0x49c>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b6:	2b03      	cmp	r3, #3
 80029b8:	d107      	bne.n	80029ca <HAL_I2C_Master_Receive+0x46a>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	701a      	strb	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	851a      	strh	r2, [r3, #40]	@ 0x28
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f47f ae88 	bne.w	8002716 <HAL_I2C_Master_Receive+0x1b6>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e000      	b.n	8002a24 <HAL_I2C_Master_Receive+0x4c4>
 8002a22:	2302      	movs	r3, #2
 8002a24:	4618      	mov	r0, r3
 8002a26:	3728      	adds	r7, #40	@ 0x28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	00010004 	.word	0x00010004
 8002a30:	20000000 	.word	0x20000000
 8002a34:	14f8b589 	.word	0x14f8b589

08002a38 <I2C_MasterRequestWrite>:
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af02      	add	r7, sp, #8
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	607a      	str	r2, [r7, #4]
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	460b      	mov	r3, r1
 8002a46:	817b      	strh	r3, [r7, #10]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d006      	beq.n	8002a62 <I2C_MasterRequestWrite+0x2a>
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d003      	beq.n	8002a62 <I2C_MasterRequestWrite+0x2a>
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a60:	d108      	bne.n	8002a74 <I2C_MasterRequestWrite+0x3c>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	e00b      	b.n	8002a8c <I2C_MasterRequestWrite+0x54>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a78:	2b12      	cmp	r3, #18
 8002a7a:	d107      	bne.n	8002a8c <I2C_MasterRequestWrite+0x54>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 f91d 	bl	8002cd8 <I2C_WaitOnFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00d      	beq.n	8002ac0 <I2C_MasterRequestWrite+0x88>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ab2:	d103      	bne.n	8002abc <I2C_MasterRequestWrite+0x84>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aba:	641a      	str	r2, [r3, #64]	@ 0x40
 8002abc:	2303      	movs	r3, #3
 8002abe:	e035      	b.n	8002b2c <I2C_MasterRequestWrite+0xf4>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ac8:	d108      	bne.n	8002adc <I2C_MasterRequestWrite+0xa4>
 8002aca:	897b      	ldrh	r3, [r7, #10]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ad8:	611a      	str	r2, [r3, #16]
 8002ada:	e01b      	b.n	8002b14 <I2C_MasterRequestWrite+0xdc>
 8002adc:	897b      	ldrh	r3, [r7, #10]
 8002ade:	11db      	asrs	r3, r3, #7
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	f003 0306 	and.w	r3, r3, #6
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	f063 030f 	orn	r3, r3, #15
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	611a      	str	r2, [r3, #16]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	490e      	ldr	r1, [pc, #56]	@ (8002b34 <I2C_MasterRequestWrite+0xfc>)
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 f966 	bl	8002dcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <I2C_MasterRequestWrite+0xd2>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e010      	b.n	8002b2c <I2C_MasterRequestWrite+0xf4>
 8002b0a:	897b      	ldrh	r3, [r7, #10]
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	611a      	str	r2, [r3, #16]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	4907      	ldr	r1, [pc, #28]	@ (8002b38 <I2C_MasterRequestWrite+0x100>)
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 f956 	bl	8002dcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <I2C_MasterRequestWrite+0xf2>
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <I2C_MasterRequestWrite+0xf4>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	00010008 	.word	0x00010008
 8002b38:	00010002 	.word	0x00010002

08002b3c <I2C_MasterRequestRead>:
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af02      	add	r7, sp, #8
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	607a      	str	r2, [r7, #4]
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	817b      	strh	r3, [r7, #10]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d006      	beq.n	8002b76 <I2C_MasterRequestRead+0x3a>
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d003      	beq.n	8002b76 <I2C_MasterRequestRead+0x3a>
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b74:	d108      	bne.n	8002b88 <I2C_MasterRequestRead+0x4c>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	e00b      	b.n	8002ba0 <I2C_MasterRequestRead+0x64>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8c:	2b11      	cmp	r3, #17
 8002b8e:	d107      	bne.n	8002ba0 <I2C_MasterRequestRead+0x64>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 f893 	bl	8002cd8 <I2C_WaitOnFlagUntilTimeout>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00d      	beq.n	8002bd4 <I2C_MasterRequestRead+0x98>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bc6:	d103      	bne.n	8002bd0 <I2C_MasterRequestRead+0x94>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bce:	641a      	str	r2, [r3, #64]	@ 0x40
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e079      	b.n	8002cc8 <I2C_MasterRequestRead+0x18c>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bdc:	d108      	bne.n	8002bf0 <I2C_MasterRequestRead+0xb4>
 8002bde:	897b      	ldrh	r3, [r7, #10]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	611a      	str	r2, [r3, #16]
 8002bee:	e05f      	b.n	8002cb0 <I2C_MasterRequestRead+0x174>
 8002bf0:	897b      	ldrh	r3, [r7, #10]
 8002bf2:	11db      	asrs	r3, r3, #7
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f003 0306 	and.w	r3, r3, #6
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	f063 030f 	orn	r3, r3, #15
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	611a      	str	r2, [r3, #16]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	4930      	ldr	r1, [pc, #192]	@ (8002cd0 <I2C_MasterRequestRead+0x194>)
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f8dc 	bl	8002dcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <I2C_MasterRequestRead+0xe2>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e054      	b.n	8002cc8 <I2C_MasterRequestRead+0x18c>
 8002c1e:	897b      	ldrh	r3, [r7, #10]
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	611a      	str	r2, [r3, #16]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	4929      	ldr	r1, [pc, #164]	@ (8002cd4 <I2C_MasterRequestRead+0x198>)
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 f8cc 	bl	8002dcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <I2C_MasterRequestRead+0x102>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e044      	b.n	8002cc8 <I2C_MasterRequestRead+0x18c>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 f831 	bl	8002cd8 <I2C_WaitOnFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00d      	beq.n	8002c98 <I2C_MasterRequestRead+0x15c>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c8a:	d103      	bne.n	8002c94 <I2C_MasterRequestRead+0x158>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c92:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c94:	2303      	movs	r3, #3
 8002c96:	e017      	b.n	8002cc8 <I2C_MasterRequestRead+0x18c>
 8002c98:	897b      	ldrh	r3, [r7, #10]
 8002c9a:	11db      	asrs	r3, r3, #7
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	f003 0306 	and.w	r3, r3, #6
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	f063 030e 	orn	r3, r3, #14
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	611a      	str	r2, [r3, #16]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	4907      	ldr	r1, [pc, #28]	@ (8002cd4 <I2C_MasterRequestRead+0x198>)
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 f888 	bl	8002dcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <I2C_MasterRequestRead+0x18a>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <I2C_MasterRequestRead+0x18c>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	00010008 	.word	0x00010008
 8002cd4:	00010002 	.word	0x00010002

08002cd8 <I2C_WaitOnFlagUntilTimeout>:
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	71fb      	strb	r3, [r7, #7]
 8002ce8:	e048      	b.n	8002d7c <I2C_WaitOnFlagUntilTimeout+0xa4>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf0:	d044      	beq.n	8002d7c <I2C_WaitOnFlagUntilTimeout+0xa4>
 8002cf2:	f7fe fadd 	bl	80012b0 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d302      	bcc.n	8002d08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d139      	bne.n	8002d7c <I2C_WaitOnFlagUntilTimeout+0xa4>
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	0c1b      	lsrs	r3, r3, #16
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d10d      	bne.n	8002d2e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	43da      	mvns	r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	bf0c      	ite	eq
 8002d24:	2301      	moveq	r3, #1
 8002d26:	2300      	movne	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	e00c      	b.n	8002d48 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	43da      	mvns	r2, r3
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	bf0c      	ite	eq
 8002d40:	2301      	moveq	r3, #1
 8002d42:	2300      	movne	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d116      	bne.n	8002d7c <I2C_WaitOnFlagUntilTimeout+0xa4>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d68:	f043 0220 	orr.w	r2, r3, #32
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e023      	b.n	8002dc4 <I2C_WaitOnFlagUntilTimeout+0xec>
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	0c1b      	lsrs	r3, r3, #16
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d10d      	bne.n	8002da2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	43da      	mvns	r2, r3
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	4013      	ands	r3, r2
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf0c      	ite	eq
 8002d98:	2301      	moveq	r3, #1
 8002d9a:	2300      	movne	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	461a      	mov	r2, r3
 8002da0:	e00c      	b.n	8002dbc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	43da      	mvns	r2, r3
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	4013      	ands	r3, r2
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bf0c      	ite	eq
 8002db4:	2301      	moveq	r3, #1
 8002db6:	2300      	movne	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	461a      	mov	r2, r3
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d093      	beq.n	8002cea <I2C_WaitOnFlagUntilTimeout+0x12>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	603b      	str	r3, [r7, #0]
 8002dda:	e071      	b.n	8002ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dea:	d123      	bne.n	8002e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e04:	615a      	str	r2, [r3, #20]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e20:	f043 0204 	orr.w	r2, r3, #4
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002e30:	2301      	movs	r3, #1
 8002e32:	e067      	b.n	8002f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3a:	d041      	beq.n	8002ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8002e3c:	f7fe fa38 	bl	80012b0 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d302      	bcc.n	8002e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d136      	bne.n	8002ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	0c1b      	lsrs	r3, r3, #16
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d10c      	bne.n	8002e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	43da      	mvns	r2, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4013      	ands	r3, r2
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	bf14      	ite	ne
 8002e6e:	2301      	movne	r3, #1
 8002e70:	2300      	moveq	r3, #0
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	e00b      	b.n	8002e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	43da      	mvns	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	4013      	ands	r3, r2
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	bf14      	ite	ne
 8002e88:	2301      	movne	r3, #1
 8002e8a:	2300      	moveq	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d016      	beq.n	8002ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eac:	f043 0220 	orr.w	r2, r3, #32
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	641a      	str	r2, [r3, #64]	@ 0x40
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e021      	b.n	8002f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	0c1b      	lsrs	r3, r3, #16
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d10c      	bne.n	8002ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	43da      	mvns	r2, r3
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf14      	ite	ne
 8002edc:	2301      	movne	r3, #1
 8002ede:	2300      	moveq	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	e00b      	b.n	8002efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	43da      	mvns	r2, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	bf14      	ite	ne
 8002ef6:	2301      	movne	r3, #1
 8002ef8:	2300      	moveq	r3, #0
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f47f af6d 	bne.w	8002ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8002f02:	2300      	movs	r3, #0
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <I2C_WaitOnTXEFlagUntilTimeout>:
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	e034      	b.n	8002f84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 f8e3 	bl	80030e6 <I2C_IsAcknowledgeFailed>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e034      	b.n	8002f94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f30:	d028      	beq.n	8002f84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8002f32:	f7fe f9bd 	bl	80012b0 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d302      	bcc.n	8002f48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d11d      	bne.n	8002f84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f52:	2b80      	cmp	r3, #128	@ 0x80
 8002f54:	d016      	beq.n	8002f84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f70:	f043 0220 	orr.w	r2, r3, #32
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002f80:	2301      	movs	r3, #1
 8002f82:	e007      	b.n	8002f94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f8e:	2b80      	cmp	r3, #128	@ 0x80
 8002f90:	d1c3      	bne.n	8002f1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8002f92:	2300      	movs	r3, #0
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <I2C_WaitOnBTFFlagUntilTimeout>:
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
 8002fa8:	e034      	b.n	8003014 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 f89b 	bl	80030e6 <I2C_IsAcknowledgeFailed>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e034      	b.n	8003024 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc0:	d028      	beq.n	8003014 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8002fc2:	f7fe f975 	bl	80012b0 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d302      	bcc.n	8002fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d11d      	bne.n	8003014 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d016      	beq.n	8003014 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003000:	f043 0220 	orr.w	r2, r3, #32
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	641a      	str	r2, [r3, #64]	@ 0x40
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003010:	2301      	movs	r3, #1
 8003012:	e007      	b.n	8003024 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b04      	cmp	r3, #4
 8003020:	d1c3      	bne.n	8002faa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8003022:	2300      	movs	r3, #0
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <I2C_WaitOnRXNEFlagUntilTimeout>:
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
 8003038:	e049      	b.n	80030ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b10      	cmp	r3, #16
 8003046:	d119      	bne.n	800307c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f06f 0210 	mvn.w	r2, #16
 8003050:	615a      	str	r2, [r3, #20]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	631a      	str	r2, [r3, #48]	@ 0x30
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003078:	2301      	movs	r3, #1
 800307a:	e030      	b.n	80030de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 800307c:	f7fe f918 	bl	80012b0 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	429a      	cmp	r2, r3
 800308a:	d302      	bcc.n	8003092 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d11d      	bne.n	80030ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800309c:	2b40      	cmp	r3, #64	@ 0x40
 800309e:	d016      	beq.n	80030ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	f043 0220 	orr.w	r2, r3, #32
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80030ca:	2301      	movs	r3, #1
 80030cc:	e007      	b.n	80030de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d8:	2b40      	cmp	r3, #64	@ 0x40
 80030da:	d1ae      	bne.n	800303a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 80030dc:	2300      	movs	r3, #0
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <I2C_IsAcknowledgeFailed>:
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030fc:	d11b      	bne.n	8003136 <I2C_IsAcknowledgeFailed+0x50>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003106:	615a      	str	r2, [r3, #20]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	631a      	str	r2, [r3, #48]	@ 0x30
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003122:	f043 0204 	orr.w	r2, r3, #4
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	641a      	str	r2, [r3, #64]	@ 0x40
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <I2C_IsAcknowledgeFailed+0x52>
 8003136:	2300      	movs	r3, #0
 8003138:	4618      	mov	r0, r3
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr
	...

08003144 <HAL_RCC_OscConfig>:
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_RCC_OscConfig+0x12>
 8003152:	2301      	movs	r3, #1
 8003154:	e272      	b.n	800363c <HAL_RCC_OscConfig+0x4f8>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 8087 	beq.w	8003272 <HAL_RCC_OscConfig+0x12e>
 8003164:	4b92      	ldr	r3, [pc, #584]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 030c 	and.w	r3, r3, #12
 800316c:	2b04      	cmp	r3, #4
 800316e:	d00c      	beq.n	800318a <HAL_RCC_OscConfig+0x46>
 8003170:	4b8f      	ldr	r3, [pc, #572]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 030c 	and.w	r3, r3, #12
 8003178:	2b08      	cmp	r3, #8
 800317a:	d112      	bne.n	80031a2 <HAL_RCC_OscConfig+0x5e>
 800317c:	4b8c      	ldr	r3, [pc, #560]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003188:	d10b      	bne.n	80031a2 <HAL_RCC_OscConfig+0x5e>
 800318a:	4b89      	ldr	r3, [pc, #548]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d06c      	beq.n	8003270 <HAL_RCC_OscConfig+0x12c>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d168      	bne.n	8003270 <HAL_RCC_OscConfig+0x12c>
 800319e:	2301      	movs	r3, #1
 80031a0:	e24c      	b.n	800363c <HAL_RCC_OscConfig+0x4f8>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031aa:	d106      	bne.n	80031ba <HAL_RCC_OscConfig+0x76>
 80031ac:	4b80      	ldr	r3, [pc, #512]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a7f      	ldr	r2, [pc, #508]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80031b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	e02e      	b.n	8003218 <HAL_RCC_OscConfig+0xd4>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0x98>
 80031c2:	4b7b      	ldr	r3, [pc, #492]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a7a      	ldr	r2, [pc, #488]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80031c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	4b78      	ldr	r3, [pc, #480]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a77      	ldr	r2, [pc, #476]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	e01d      	b.n	8003218 <HAL_RCC_OscConfig+0xd4>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031e4:	d10c      	bne.n	8003200 <HAL_RCC_OscConfig+0xbc>
 80031e6:	4b72      	ldr	r3, [pc, #456]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a71      	ldr	r2, [pc, #452]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80031ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	4b6f      	ldr	r3, [pc, #444]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a6e      	ldr	r2, [pc, #440]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80031f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	e00b      	b.n	8003218 <HAL_RCC_OscConfig+0xd4>
 8003200:	4b6b      	ldr	r3, [pc, #428]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a6a      	ldr	r2, [pc, #424]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 8003206:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	4b68      	ldr	r3, [pc, #416]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a67      	ldr	r2, [pc, #412]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 8003212:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003216:	6013      	str	r3, [r2, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d013      	beq.n	8003248 <HAL_RCC_OscConfig+0x104>
 8003220:	f7fe f846 	bl	80012b0 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0xf6>
 8003228:	f7fe f842 	bl	80012b0 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b64      	cmp	r3, #100	@ 0x64
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0xf6>
 8003236:	2303      	movs	r3, #3
 8003238:	e200      	b.n	800363c <HAL_RCC_OscConfig+0x4f8>
 800323a:	4b5d      	ldr	r3, [pc, #372]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0f0      	beq.n	8003228 <HAL_RCC_OscConfig+0xe4>
 8003246:	e014      	b.n	8003272 <HAL_RCC_OscConfig+0x12e>
 8003248:	f7fe f832 	bl	80012b0 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x11e>
 8003250:	f7fe f82e 	bl	80012b0 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b64      	cmp	r3, #100	@ 0x64
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x11e>
 800325e:	2303      	movs	r3, #3
 8003260:	e1ec      	b.n	800363c <HAL_RCC_OscConfig+0x4f8>
 8003262:	4b53      	ldr	r3, [pc, #332]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f0      	bne.n	8003250 <HAL_RCC_OscConfig+0x10c>
 800326e:	e000      	b.n	8003272 <HAL_RCC_OscConfig+0x12e>
 8003270:	bf00      	nop
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d063      	beq.n	8003346 <HAL_RCC_OscConfig+0x202>
 800327e:	4b4c      	ldr	r3, [pc, #304]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f003 030c 	and.w	r3, r3, #12
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00b      	beq.n	80032a2 <HAL_RCC_OscConfig+0x15e>
 800328a:	4b49      	ldr	r3, [pc, #292]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 030c 	and.w	r3, r3, #12
 8003292:	2b08      	cmp	r3, #8
 8003294:	d11c      	bne.n	80032d0 <HAL_RCC_OscConfig+0x18c>
 8003296:	4b46      	ldr	r3, [pc, #280]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d116      	bne.n	80032d0 <HAL_RCC_OscConfig+0x18c>
 80032a2:	4b43      	ldr	r3, [pc, #268]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d005      	beq.n	80032ba <HAL_RCC_OscConfig+0x176>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d001      	beq.n	80032ba <HAL_RCC_OscConfig+0x176>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e1c0      	b.n	800363c <HAL_RCC_OscConfig+0x4f8>
 80032ba:	4b3d      	ldr	r3, [pc, #244]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	4939      	ldr	r1, [pc, #228]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	600b      	str	r3, [r1, #0]
 80032ce:	e03a      	b.n	8003346 <HAL_RCC_OscConfig+0x202>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d020      	beq.n	800331a <HAL_RCC_OscConfig+0x1d6>
 80032d8:	4b36      	ldr	r3, [pc, #216]	@ (80033b4 <HAL_RCC_OscConfig+0x270>)
 80032da:	2201      	movs	r2, #1
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	f7fd ffe7 	bl	80012b0 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x1b4>
 80032e6:	f7fd ffe3 	bl	80012b0 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x1b4>
 80032f4:	2303      	movs	r3, #3
 80032f6:	e1a1      	b.n	800363c <HAL_RCC_OscConfig+0x4f8>
 80032f8:	4b2d      	ldr	r3, [pc, #180]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0f0      	beq.n	80032e6 <HAL_RCC_OscConfig+0x1a2>
 8003304:	4b2a      	ldr	r3, [pc, #168]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4927      	ldr	r1, [pc, #156]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 8003314:	4313      	orrs	r3, r2
 8003316:	600b      	str	r3, [r1, #0]
 8003318:	e015      	b.n	8003346 <HAL_RCC_OscConfig+0x202>
 800331a:	4b26      	ldr	r3, [pc, #152]	@ (80033b4 <HAL_RCC_OscConfig+0x270>)
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	f7fd ffc6 	bl	80012b0 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x1f6>
 8003328:	f7fd ffc2 	bl	80012b0 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x1f6>
 8003336:	2303      	movs	r3, #3
 8003338:	e180      	b.n	800363c <HAL_RCC_OscConfig+0x4f8>
 800333a:	4b1d      	ldr	r3, [pc, #116]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f0      	bne.n	8003328 <HAL_RCC_OscConfig+0x1e4>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d03a      	beq.n	80033c8 <HAL_RCC_OscConfig+0x284>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d019      	beq.n	800338e <HAL_RCC_OscConfig+0x24a>
 800335a:	4b17      	ldr	r3, [pc, #92]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 800335c:	2201      	movs	r2, #1
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	f7fd ffa6 	bl	80012b0 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x236>
 8003368:	f7fd ffa2 	bl	80012b0 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x236>
 8003376:	2303      	movs	r3, #3
 8003378:	e160      	b.n	800363c <HAL_RCC_OscConfig+0x4f8>
 800337a:	4b0d      	ldr	r3, [pc, #52]	@ (80033b0 <HAL_RCC_OscConfig+0x26c>)
 800337c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0f0      	beq.n	8003368 <HAL_RCC_OscConfig+0x224>
 8003386:	2001      	movs	r0, #1
 8003388:	f000 face 	bl	8003928 <RCC_Delay>
 800338c:	e01c      	b.n	80033c8 <HAL_RCC_OscConfig+0x284>
 800338e:	4b0a      	ldr	r3, [pc, #40]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	f7fd ff8c 	bl	80012b0 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]
 800339a:	e00f      	b.n	80033bc <HAL_RCC_OscConfig+0x278>
 800339c:	f7fd ff88 	bl	80012b0 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d908      	bls.n	80033bc <HAL_RCC_OscConfig+0x278>
 80033aa:	2303      	movs	r3, #3
 80033ac:	e146      	b.n	800363c <HAL_RCC_OscConfig+0x4f8>
 80033ae:	bf00      	nop
 80033b0:	40021000 	.word	0x40021000
 80033b4:	42420000 	.word	0x42420000
 80033b8:	42420480 	.word	0x42420480
 80033bc:	4b92      	ldr	r3, [pc, #584]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 80033be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1e9      	bne.n	800339c <HAL_RCC_OscConfig+0x258>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 80a6 	beq.w	8003522 <HAL_RCC_OscConfig+0x3de>
 80033d6:	2300      	movs	r3, #0
 80033d8:	75fb      	strb	r3, [r7, #23]
 80033da:	4b8b      	ldr	r3, [pc, #556]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10d      	bne.n	8003402 <HAL_RCC_OscConfig+0x2be>
 80033e6:	4b88      	ldr	r3, [pc, #544]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	4a87      	ldr	r2, [pc, #540]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 80033ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033f0:	61d3      	str	r3, [r2, #28]
 80033f2:	4b85      	ldr	r3, [pc, #532]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033fa:	60bb      	str	r3, [r7, #8]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2301      	movs	r3, #1
 8003400:	75fb      	strb	r3, [r7, #23]
 8003402:	4b82      	ldr	r3, [pc, #520]	@ (800360c <HAL_RCC_OscConfig+0x4c8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d118      	bne.n	8003440 <HAL_RCC_OscConfig+0x2fc>
 800340e:	4b7f      	ldr	r3, [pc, #508]	@ (800360c <HAL_RCC_OscConfig+0x4c8>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a7e      	ldr	r2, [pc, #504]	@ (800360c <HAL_RCC_OscConfig+0x4c8>)
 8003414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	f7fd ff49 	bl	80012b0 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x2f0>
 8003422:	f7fd ff45 	bl	80012b0 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b64      	cmp	r3, #100	@ 0x64
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x2f0>
 8003430:	2303      	movs	r3, #3
 8003432:	e103      	b.n	800363c <HAL_RCC_OscConfig+0x4f8>
 8003434:	4b75      	ldr	r3, [pc, #468]	@ (800360c <HAL_RCC_OscConfig+0x4c8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0f0      	beq.n	8003422 <HAL_RCC_OscConfig+0x2de>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d106      	bne.n	8003456 <HAL_RCC_OscConfig+0x312>
 8003448:	4b6f      	ldr	r3, [pc, #444]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	4a6e      	ldr	r2, [pc, #440]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	6213      	str	r3, [r2, #32]
 8003454:	e02d      	b.n	80034b2 <HAL_RCC_OscConfig+0x36e>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10c      	bne.n	8003478 <HAL_RCC_OscConfig+0x334>
 800345e:	4b6a      	ldr	r3, [pc, #424]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	4a69      	ldr	r2, [pc, #420]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	6213      	str	r3, [r2, #32]
 800346a:	4b67      	ldr	r3, [pc, #412]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	4a66      	ldr	r2, [pc, #408]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 8003470:	f023 0304 	bic.w	r3, r3, #4
 8003474:	6213      	str	r3, [r2, #32]
 8003476:	e01c      	b.n	80034b2 <HAL_RCC_OscConfig+0x36e>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	2b05      	cmp	r3, #5
 800347e:	d10c      	bne.n	800349a <HAL_RCC_OscConfig+0x356>
 8003480:	4b61      	ldr	r3, [pc, #388]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	4a60      	ldr	r2, [pc, #384]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 8003486:	f043 0304 	orr.w	r3, r3, #4
 800348a:	6213      	str	r3, [r2, #32]
 800348c:	4b5e      	ldr	r3, [pc, #376]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	4a5d      	ldr	r2, [pc, #372]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	6213      	str	r3, [r2, #32]
 8003498:	e00b      	b.n	80034b2 <HAL_RCC_OscConfig+0x36e>
 800349a:	4b5b      	ldr	r3, [pc, #364]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	4a5a      	ldr	r2, [pc, #360]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 80034a0:	f023 0301 	bic.w	r3, r3, #1
 80034a4:	6213      	str	r3, [r2, #32]
 80034a6:	4b58      	ldr	r3, [pc, #352]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	4a57      	ldr	r2, [pc, #348]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 80034ac:	f023 0304 	bic.w	r3, r3, #4
 80034b0:	6213      	str	r3, [r2, #32]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d015      	beq.n	80034e6 <HAL_RCC_OscConfig+0x3a2>
 80034ba:	f7fd fef9 	bl	80012b0 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]
 80034c0:	e00a      	b.n	80034d8 <HAL_RCC_OscConfig+0x394>
 80034c2:	f7fd fef5 	bl	80012b0 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x394>
 80034d4:	2303      	movs	r3, #3
 80034d6:	e0b1      	b.n	800363c <HAL_RCC_OscConfig+0x4f8>
 80034d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0ee      	beq.n	80034c2 <HAL_RCC_OscConfig+0x37e>
 80034e4:	e014      	b.n	8003510 <HAL_RCC_OscConfig+0x3cc>
 80034e6:	f7fd fee3 	bl	80012b0 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]
 80034ec:	e00a      	b.n	8003504 <HAL_RCC_OscConfig+0x3c0>
 80034ee:	f7fd fedf 	bl	80012b0 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x3c0>
 8003500:	2303      	movs	r3, #3
 8003502:	e09b      	b.n	800363c <HAL_RCC_OscConfig+0x4f8>
 8003504:	4b40      	ldr	r3, [pc, #256]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1ee      	bne.n	80034ee <HAL_RCC_OscConfig+0x3aa>
 8003510:	7dfb      	ldrb	r3, [r7, #23]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d105      	bne.n	8003522 <HAL_RCC_OscConfig+0x3de>
 8003516:	4b3c      	ldr	r3, [pc, #240]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	4a3b      	ldr	r2, [pc, #236]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 800351c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003520:	61d3      	str	r3, [r2, #28]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 8087 	beq.w	800363a <HAL_RCC_OscConfig+0x4f6>
 800352c:	4b36      	ldr	r3, [pc, #216]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 030c 	and.w	r3, r3, #12
 8003534:	2b08      	cmp	r3, #8
 8003536:	d061      	beq.n	80035fc <HAL_RCC_OscConfig+0x4b8>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	2b02      	cmp	r3, #2
 800353e:	d146      	bne.n	80035ce <HAL_RCC_OscConfig+0x48a>
 8003540:	4b33      	ldr	r3, [pc, #204]	@ (8003610 <HAL_RCC_OscConfig+0x4cc>)
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	f7fd feb3 	bl	80012b0 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x41c>
 800354e:	f7fd feaf 	bl	80012b0 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x41c>
 800355c:	2303      	movs	r3, #3
 800355e:	e06d      	b.n	800363c <HAL_RCC_OscConfig+0x4f8>
 8003560:	4b29      	ldr	r3, [pc, #164]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1f0      	bne.n	800354e <HAL_RCC_OscConfig+0x40a>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003574:	d108      	bne.n	8003588 <HAL_RCC_OscConfig+0x444>
 8003576:	4b24      	ldr	r3, [pc, #144]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	4921      	ldr	r1, [pc, #132]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 8003584:	4313      	orrs	r3, r2
 8003586:	604b      	str	r3, [r1, #4]
 8003588:	4b1f      	ldr	r3, [pc, #124]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a19      	ldr	r1, [r3, #32]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003598:	430b      	orrs	r3, r1
 800359a:	491b      	ldr	r1, [pc, #108]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 800359c:	4313      	orrs	r3, r2
 800359e:	604b      	str	r3, [r1, #4]
 80035a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003610 <HAL_RCC_OscConfig+0x4cc>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	f7fd fe83 	bl	80012b0 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x47c>
 80035ae:	f7fd fe7f 	bl	80012b0 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x47c>
 80035bc:	2303      	movs	r3, #3
 80035be:	e03d      	b.n	800363c <HAL_RCC_OscConfig+0x4f8>
 80035c0:	4b11      	ldr	r3, [pc, #68]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x46a>
 80035cc:	e035      	b.n	800363a <HAL_RCC_OscConfig+0x4f6>
 80035ce:	4b10      	ldr	r3, [pc, #64]	@ (8003610 <HAL_RCC_OscConfig+0x4cc>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	f7fd fe6c 	bl	80012b0 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x4aa>
 80035dc:	f7fd fe68 	bl	80012b0 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x4aa>
 80035ea:	2303      	movs	r3, #3
 80035ec:	e026      	b.n	800363c <HAL_RCC_OscConfig+0x4f8>
 80035ee:	4b06      	ldr	r3, [pc, #24]	@ (8003608 <HAL_RCC_OscConfig+0x4c4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0x498>
 80035fa:	e01e      	b.n	800363a <HAL_RCC_OscConfig+0x4f6>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d107      	bne.n	8003614 <HAL_RCC_OscConfig+0x4d0>
 8003604:	2301      	movs	r3, #1
 8003606:	e019      	b.n	800363c <HAL_RCC_OscConfig+0x4f8>
 8003608:	40021000 	.word	0x40021000
 800360c:	40007000 	.word	0x40007000
 8003610:	42420060 	.word	0x42420060
 8003614:	4b0b      	ldr	r3, [pc, #44]	@ (8003644 <HAL_RCC_OscConfig+0x500>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	429a      	cmp	r2, r3
 8003626:	d106      	bne.n	8003636 <HAL_RCC_OscConfig+0x4f2>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003632:	429a      	cmp	r2, r3
 8003634:	d001      	beq.n	800363a <HAL_RCC_OscConfig+0x4f6>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <HAL_RCC_OscConfig+0x4f8>
 800363a:	2300      	movs	r3, #0
 800363c:	4618      	mov	r0, r3
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40021000 	.word	0x40021000

08003648 <HAL_RCC_ClockConfig>:
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_RCC_ClockConfig+0x14>
 8003658:	2301      	movs	r3, #1
 800365a:	e0d0      	b.n	80037fe <HAL_RCC_ClockConfig+0x1b6>
 800365c:	4b6a      	ldr	r3, [pc, #424]	@ (8003808 <HAL_RCC_ClockConfig+0x1c0>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d910      	bls.n	800368c <HAL_RCC_ClockConfig+0x44>
 800366a:	4b67      	ldr	r3, [pc, #412]	@ (8003808 <HAL_RCC_ClockConfig+0x1c0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f023 0207 	bic.w	r2, r3, #7
 8003672:	4965      	ldr	r1, [pc, #404]	@ (8003808 <HAL_RCC_ClockConfig+0x1c0>)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	4313      	orrs	r3, r2
 8003678:	600b      	str	r3, [r1, #0]
 800367a:	4b63      	ldr	r3, [pc, #396]	@ (8003808 <HAL_RCC_ClockConfig+0x1c0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d001      	beq.n	800368c <HAL_RCC_ClockConfig+0x44>
 8003688:	2301      	movs	r3, #1
 800368a:	e0b8      	b.n	80037fe <HAL_RCC_ClockConfig+0x1b6>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d020      	beq.n	80036da <HAL_RCC_ClockConfig+0x92>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x68>
 80036a4:	4b59      	ldr	r3, [pc, #356]	@ (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	4a58      	ldr	r2, [pc, #352]	@ (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80036aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80036ae:	6053      	str	r3, [r2, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x80>
 80036bc:	4b53      	ldr	r3, [pc, #332]	@ (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	4a52      	ldr	r2, [pc, #328]	@ (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80036c2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80036c6:	6053      	str	r3, [r2, #4]
 80036c8:	4b50      	ldr	r3, [pc, #320]	@ (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	494d      	ldr	r1, [pc, #308]	@ (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	604b      	str	r3, [r1, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d040      	beq.n	8003768 <HAL_RCC_ClockConfig+0x120>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d107      	bne.n	80036fe <HAL_RCC_ClockConfig+0xb6>
 80036ee:	4b47      	ldr	r3, [pc, #284]	@ (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d115      	bne.n	8003726 <HAL_RCC_ClockConfig+0xde>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e07f      	b.n	80037fe <HAL_RCC_ClockConfig+0x1b6>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d107      	bne.n	8003716 <HAL_RCC_ClockConfig+0xce>
 8003706:	4b41      	ldr	r3, [pc, #260]	@ (800380c <HAL_RCC_ClockConfig+0x1c4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d109      	bne.n	8003726 <HAL_RCC_ClockConfig+0xde>
 8003712:	2301      	movs	r3, #1
 8003714:	e073      	b.n	80037fe <HAL_RCC_ClockConfig+0x1b6>
 8003716:	4b3d      	ldr	r3, [pc, #244]	@ (800380c <HAL_RCC_ClockConfig+0x1c4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_RCC_ClockConfig+0xde>
 8003722:	2301      	movs	r3, #1
 8003724:	e06b      	b.n	80037fe <HAL_RCC_ClockConfig+0x1b6>
 8003726:	4b39      	ldr	r3, [pc, #228]	@ (800380c <HAL_RCC_ClockConfig+0x1c4>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f023 0203 	bic.w	r2, r3, #3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	4936      	ldr	r1, [pc, #216]	@ (800380c <HAL_RCC_ClockConfig+0x1c4>)
 8003734:	4313      	orrs	r3, r2
 8003736:	604b      	str	r3, [r1, #4]
 8003738:	f7fd fdba 	bl	80012b0 <HAL_GetTick>
 800373c:	60f8      	str	r0, [r7, #12]
 800373e:	e00a      	b.n	8003756 <HAL_RCC_ClockConfig+0x10e>
 8003740:	f7fd fdb6 	bl	80012b0 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800374e:	4293      	cmp	r3, r2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_ClockConfig+0x10e>
 8003752:	2303      	movs	r3, #3
 8003754:	e053      	b.n	80037fe <HAL_RCC_ClockConfig+0x1b6>
 8003756:	4b2d      	ldr	r3, [pc, #180]	@ (800380c <HAL_RCC_ClockConfig+0x1c4>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f003 020c 	and.w	r2, r3, #12
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	429a      	cmp	r2, r3
 8003766:	d1eb      	bne.n	8003740 <HAL_RCC_ClockConfig+0xf8>
 8003768:	4b27      	ldr	r3, [pc, #156]	@ (8003808 <HAL_RCC_ClockConfig+0x1c0>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d210      	bcs.n	8003798 <HAL_RCC_ClockConfig+0x150>
 8003776:	4b24      	ldr	r3, [pc, #144]	@ (8003808 <HAL_RCC_ClockConfig+0x1c0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f023 0207 	bic.w	r2, r3, #7
 800377e:	4922      	ldr	r1, [pc, #136]	@ (8003808 <HAL_RCC_ClockConfig+0x1c0>)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	4313      	orrs	r3, r2
 8003784:	600b      	str	r3, [r1, #0]
 8003786:	4b20      	ldr	r3, [pc, #128]	@ (8003808 <HAL_RCC_ClockConfig+0x1c0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	429a      	cmp	r2, r3
 8003792:	d001      	beq.n	8003798 <HAL_RCC_ClockConfig+0x150>
 8003794:	2301      	movs	r3, #1
 8003796:	e032      	b.n	80037fe <HAL_RCC_ClockConfig+0x1b6>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x16e>
 80037a4:	4b19      	ldr	r3, [pc, #100]	@ (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4916      	ldr	r1, [pc, #88]	@ (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	604b      	str	r3, [r1, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d009      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x18e>
 80037c2:	4b12      	ldr	r3, [pc, #72]	@ (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	490e      	ldr	r1, [pc, #56]	@ (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	604b      	str	r3, [r1, #4]
 80037d6:	f000 f821 	bl	800381c <HAL_RCC_GetSysClockFreq>
 80037da:	4602      	mov	r2, r0
 80037dc:	4b0b      	ldr	r3, [pc, #44]	@ (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	490a      	ldr	r1, [pc, #40]	@ (8003810 <HAL_RCC_ClockConfig+0x1c8>)
 80037e8:	5ccb      	ldrb	r3, [r1, r3]
 80037ea:	fa22 f303 	lsr.w	r3, r2, r3
 80037ee:	4a09      	ldr	r2, [pc, #36]	@ (8003814 <HAL_RCC_ClockConfig+0x1cc>)
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	4b09      	ldr	r3, [pc, #36]	@ (8003818 <HAL_RCC_ClockConfig+0x1d0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fd fd18 	bl	800122c <HAL_InitTick>
 80037fc:	2300      	movs	r3, #0
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40022000 	.word	0x40022000
 800380c:	40021000 	.word	0x40021000
 8003810:	080079d8 	.word	0x080079d8
 8003814:	20000000 	.word	0x20000000
 8003818:	20000004 	.word	0x20000004

0800381c <HAL_RCC_GetSysClockFreq>:
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	2300      	movs	r3, #0
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	2300      	movs	r3, #0
 8003830:	607b      	str	r3, [r7, #4]
 8003832:	2300      	movs	r3, #0
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	4b1e      	ldr	r3, [pc, #120]	@ (80038b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	2b04      	cmp	r3, #4
 8003844:	d002      	beq.n	800384c <HAL_RCC_GetSysClockFreq+0x30>
 8003846:	2b08      	cmp	r3, #8
 8003848:	d003      	beq.n	8003852 <HAL_RCC_GetSysClockFreq+0x36>
 800384a:	e027      	b.n	800389c <HAL_RCC_GetSysClockFreq+0x80>
 800384c:	4b19      	ldr	r3, [pc, #100]	@ (80038b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800384e:	613b      	str	r3, [r7, #16]
 8003850:	e027      	b.n	80038a2 <HAL_RCC_GetSysClockFreq+0x86>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	0c9b      	lsrs	r3, r3, #18
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	4a17      	ldr	r2, [pc, #92]	@ (80038b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800385c:	5cd3      	ldrb	r3, [r2, r3]
 800385e:	607b      	str	r3, [r7, #4]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d010      	beq.n	800388c <HAL_RCC_GetSysClockFreq+0x70>
 800386a:	4b11      	ldr	r3, [pc, #68]	@ (80038b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	0c5b      	lsrs	r3, r3, #17
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	4a11      	ldr	r2, [pc, #68]	@ (80038bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003876:	5cd3      	ldrb	r3, [r2, r3]
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a0d      	ldr	r2, [pc, #52]	@ (80038b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800387e:	fb03 f202 	mul.w	r2, r3, r2
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	fbb2 f3f3 	udiv	r3, r2, r3
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	e004      	b.n	8003896 <HAL_RCC_GetSysClockFreq+0x7a>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a0c      	ldr	r2, [pc, #48]	@ (80038c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003890:	fb02 f303 	mul.w	r3, r2, r3
 8003894:	617b      	str	r3, [r7, #20]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	613b      	str	r3, [r7, #16]
 800389a:	e002      	b.n	80038a2 <HAL_RCC_GetSysClockFreq+0x86>
 800389c:	4b05      	ldr	r3, [pc, #20]	@ (80038b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	bf00      	nop
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4618      	mov	r0, r3
 80038a6:	371c      	adds	r7, #28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bc80      	pop	{r7}
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40021000 	.word	0x40021000
 80038b4:	007a1200 	.word	0x007a1200
 80038b8:	080079f0 	.word	0x080079f0
 80038bc:	08007a00 	.word	0x08007a00
 80038c0:	003d0900 	.word	0x003d0900

080038c4 <HAL_RCC_GetHCLKFreq>:
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	4b02      	ldr	r3, [pc, #8]	@ (80038d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr
 80038d4:	20000000 	.word	0x20000000

080038d8 <HAL_RCC_GetPCLK1Freq>:
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
 80038dc:	f7ff fff2 	bl	80038c4 <HAL_RCC_GetHCLKFreq>
 80038e0:	4602      	mov	r2, r0
 80038e2:	4b05      	ldr	r3, [pc, #20]	@ (80038f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	0a1b      	lsrs	r3, r3, #8
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	4903      	ldr	r1, [pc, #12]	@ (80038fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ee:	5ccb      	ldrb	r3, [r1, r3]
 80038f0:	fa22 f303 	lsr.w	r3, r2, r3
 80038f4:	4618      	mov	r0, r3
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40021000 	.word	0x40021000
 80038fc:	080079e8 	.word	0x080079e8

08003900 <HAL_RCC_GetPCLK2Freq>:
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
 8003904:	f7ff ffde 	bl	80038c4 <HAL_RCC_GetHCLKFreq>
 8003908:	4602      	mov	r2, r0
 800390a:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <HAL_RCC_GetPCLK2Freq+0x20>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	0adb      	lsrs	r3, r3, #11
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	4903      	ldr	r1, [pc, #12]	@ (8003924 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003916:	5ccb      	ldrb	r3, [r1, r3]
 8003918:	fa22 f303 	lsr.w	r3, r2, r3
 800391c:	4618      	mov	r0, r3
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40021000 	.word	0x40021000
 8003924:	080079e8 	.word	0x080079e8

08003928 <RCC_Delay>:
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	4b0a      	ldr	r3, [pc, #40]	@ (800395c <RCC_Delay+0x34>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a0a      	ldr	r2, [pc, #40]	@ (8003960 <RCC_Delay+0x38>)
 8003936:	fba2 2303 	umull	r2, r3, r2, r3
 800393a:	0a5b      	lsrs	r3, r3, #9
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	fb02 f303 	mul.w	r3, r2, r3
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	bf00      	nop
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	1e5a      	subs	r2, r3, #1
 800394a:	60fa      	str	r2, [r7, #12]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1f9      	bne.n	8003944 <RCC_Delay+0x1c>
 8003950:	bf00      	nop
 8003952:	bf00      	nop
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr
 800395c:	20000000 	.word	0x20000000
 8003960:	10624dd3 	.word	0x10624dd3

08003964 <HAL_RCCEx_PeriphCLKConfig>:
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	2300      	movs	r3, #0
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	2300      	movs	r3, #0
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d07d      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x118>
 8003980:	2300      	movs	r3, #0
 8003982:	75fb      	strb	r3, [r7, #23]
 8003984:	4b4f      	ldr	r3, [pc, #316]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10d      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x48>
 8003990:	4b4c      	ldr	r3, [pc, #304]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	4a4b      	ldr	r2, [pc, #300]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003996:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800399a:	61d3      	str	r3, [r2, #28]
 800399c:	4b49      	ldr	r3, [pc, #292]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2301      	movs	r3, #1
 80039aa:	75fb      	strb	r3, [r7, #23]
 80039ac:	4b46      	ldr	r3, [pc, #280]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d118      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x86>
 80039b8:	4b43      	ldr	r3, [pc, #268]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a42      	ldr	r2, [pc, #264]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	f7fd fc74 	bl	80012b0 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]
 80039ca:	e008      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80039cc:	f7fd fc70 	bl	80012b0 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b64      	cmp	r3, #100	@ 0x64
 80039d8:	d901      	bls.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80039da:	2303      	movs	r3, #3
 80039dc:	e06d      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x156>
 80039de:	4b3a      	ldr	r3, [pc, #232]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x68>
 80039ea:	4b36      	ldr	r3, [pc, #216]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d02e      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d027      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a08:	4b2e      	ldr	r3, [pc, #184]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	4b2e      	ldr	r3, [pc, #184]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	4b2c      	ldr	r3, [pc, #176]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	4a29      	ldr	r2, [pc, #164]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6213      	str	r3, [r2, #32]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d014      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a2e:	f7fd fc3f 	bl	80012b0 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]
 8003a34:	e00a      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003a36:	f7fd fc3b 	bl	80012b0 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e036      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x156>
 8003a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0ee      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8003a58:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	4917      	ldr	r1, [pc, #92]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	620b      	str	r3, [r1, #32]
 8003a6a:	7dfb      	ldrb	r3, [r7, #23]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d105      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x118>
 8003a70:	4b14      	ldr	r3, [pc, #80]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	4a13      	ldr	r2, [pc, #76]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a7a:	61d3      	str	r3, [r2, #28]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003a88:	4b0e      	ldr	r3, [pc, #56]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	490b      	ldr	r1, [pc, #44]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	604b      	str	r3, [r1, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0310 	and.w	r3, r3, #16
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d008      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003aa6:	4b07      	ldr	r3, [pc, #28]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	4904      	ldr	r1, [pc, #16]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	604b      	str	r3, [r1, #4]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	4618      	mov	r0, r3
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40007000 	.word	0x40007000
 8003acc:	42420440 	.word	0x42420440

08003ad0 <HAL_UART_Init>:
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_UART_Init+0x12>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e042      	b.n	8003b68 <HAL_UART_Init+0x98>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d106      	bne.n	8003afc <HAL_UART_Init+0x2c>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7fd fa9e 	bl	8001038 <HAL_UART_MspInit>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2224      	movs	r2, #36	@ 0x24
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b12:	60da      	str	r2, [r3, #12]
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f82b 	bl	8003b70 <UART_SetConfig>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b28:	611a      	str	r2, [r3, #16]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695a      	ldr	r2, [r3, #20]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b38:	615a      	str	r2, [r3, #20]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b48:	60da      	str	r2, [r3, #12]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	645a      	str	r2, [r3, #68]	@ 0x44
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b66:	2300      	movs	r3, #0
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <UART_SetConfig>:
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	611a      	str	r2, [r3, #16]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003baa:	f023 030c 	bic.w	r3, r3, #12
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6812      	ldr	r2, [r2, #0]
 8003bb2:	68b9      	ldr	r1, [r7, #8]
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	60d3      	str	r3, [r2, #12]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699a      	ldr	r2, [r3, #24]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	615a      	str	r2, [r3, #20]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a2c      	ldr	r2, [pc, #176]	@ (8003c84 <UART_SetConfig+0x114>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d103      	bne.n	8003be0 <UART_SetConfig+0x70>
 8003bd8:	f7ff fe92 	bl	8003900 <HAL_RCC_GetPCLK2Freq>
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	e002      	b.n	8003be6 <UART_SetConfig+0x76>
 8003be0:	f7ff fe7a 	bl	80038d8 <HAL_RCC_GetPCLK1Freq>
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4613      	mov	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	009a      	lsls	r2, r3, #2
 8003bf0:	441a      	add	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfc:	4a22      	ldr	r2, [pc, #136]	@ (8003c88 <UART_SetConfig+0x118>)
 8003bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003c02:	095b      	lsrs	r3, r3, #5
 8003c04:	0119      	lsls	r1, r3, #4
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009a      	lsls	r2, r3, #2
 8003c10:	441a      	add	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8003c88 <UART_SetConfig+0x118>)
 8003c1e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	2064      	movs	r0, #100	@ 0x64
 8003c26:	fb00 f303 	mul.w	r3, r0, r3
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	3332      	adds	r3, #50	@ 0x32
 8003c30:	4a15      	ldr	r2, [pc, #84]	@ (8003c88 <UART_SetConfig+0x118>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	095b      	lsrs	r3, r3, #5
 8003c38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c3c:	4419      	add	r1, r3
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	009a      	lsls	r2, r3, #2
 8003c48:	441a      	add	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c54:	4b0c      	ldr	r3, [pc, #48]	@ (8003c88 <UART_SetConfig+0x118>)
 8003c56:	fba3 0302 	umull	r0, r3, r3, r2
 8003c5a:	095b      	lsrs	r3, r3, #5
 8003c5c:	2064      	movs	r0, #100	@ 0x64
 8003c5e:	fb00 f303 	mul.w	r3, r0, r3
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	3332      	adds	r3, #50	@ 0x32
 8003c68:	4a07      	ldr	r2, [pc, #28]	@ (8003c88 <UART_SetConfig+0x118>)
 8003c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	f003 020f 	and.w	r2, r3, #15
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	440a      	add	r2, r1
 8003c7a:	609a      	str	r2, [r3, #8]
 8003c7c:	bf00      	nop
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40013800 	.word	0x40013800
 8003c88:	51eb851f 	.word	0x51eb851f

08003c8c <actuadores_init_adapter>:
    void (*task_init)(void *);
    void (*task_update)(void *);
    void *parameters;
} task_cfg_t;

static void actuadores_init_adapter(void *p){ (void)p; actuadores_init(); }
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	f001 f9a2 	bl	8004fdc <actuadores_init>
 8003c98:	bf00      	nop
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <actuadores_update_adapter>:
static void actuadores_update_adapter(void *p){ (void)p; actuadores_update(); }
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	f001 f9da 	bl	8005060 <actuadores_update>
 8003cac:	bf00      	nop
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <dwt_init>:
    .name = "TOTAL_TICK"
};

/********************** DWT helpers **************************************/
static inline void dwt_init(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003cb8:	4b09      	ldr	r3, [pc, #36]	@ (8003ce0 <dwt_init+0x2c>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	4a08      	ldr	r2, [pc, #32]	@ (8003ce0 <dwt_init+0x2c>)
 8003cbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cc2:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 8003cc4:	4b07      	ldr	r3, [pc, #28]	@ (8003ce4 <dwt_init+0x30>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003cca:	4b06      	ldr	r3, [pc, #24]	@ (8003ce4 <dwt_init+0x30>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a05      	ldr	r2, [pc, #20]	@ (8003ce4 <dwt_init+0x30>)
 8003cd0:	f043 0301 	orr.w	r3, r3, #1
 8003cd4:	6013      	str	r3, [r2, #0]
}
 8003cd6:	bf00      	nop
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	e000edf0 	.word	0xe000edf0
 8003ce4:	e0001000 	.word	0xe0001000

08003ce8 <dwt_get_cycles>:
static inline uint32_t dwt_get_cycles(void) { return DWT->CYCCNT; }
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	4b02      	ldr	r3, [pc, #8]	@ (8003cf8 <dwt_get_cycles+0x10>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr
 8003cf8:	e0001000 	.word	0xe0001000

08003cfc <cycles_to_us>:
static inline uint32_t cycles_to_us(uint32_t cycles)
{
 8003cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d00:	b088      	sub	sp, #32
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	61f8      	str	r0, [r7, #28]
    return (uint32_t)(((uint64_t)cycles * 1000000ull) / (uint64_t)SystemCoreClock);
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	469a      	mov	sl, r3
 8003d0c:	4693      	mov	fp, r2
 8003d0e:	4652      	mov	r2, sl
 8003d10:	465b      	mov	r3, fp
 8003d12:	f04f 0000 	mov.w	r0, #0
 8003d16:	f04f 0100 	mov.w	r1, #0
 8003d1a:	0159      	lsls	r1, r3, #5
 8003d1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d20:	0150      	lsls	r0, r2, #5
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	ebb2 040a 	subs.w	r4, r2, sl
 8003d2a:	eb63 050b 	sbc.w	r5, r3, fp
 8003d2e:	f04f 0200 	mov.w	r2, #0
 8003d32:	f04f 0300 	mov.w	r3, #0
 8003d36:	026b      	lsls	r3, r5, #9
 8003d38:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003d3c:	0262      	lsls	r2, r4, #9
 8003d3e:	4614      	mov	r4, r2
 8003d40:	461d      	mov	r5, r3
 8003d42:	eb14 080a 	adds.w	r8, r4, sl
 8003d46:	eb45 090b 	adc.w	r9, r5, fp
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	f04f 0300 	mov.w	r3, #0
 8003d52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d5e:	ebb2 0108 	subs.w	r1, r2, r8
 8003d62:	6039      	str	r1, [r7, #0]
 8003d64:	eb63 0309 	sbc.w	r3, r3, r9
 8003d68:	607b      	str	r3, [r7, #4]
 8003d6a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	eb12 020a 	adds.w	r2, r2, sl
 8003d74:	613a      	str	r2, [r7, #16]
 8003d76:	4623      	mov	r3, r4
 8003d78:	eb43 030b 	adc.w	r3, r3, fp
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	4b09      	ldr	r3, [pc, #36]	@ (8003da4 <cycles_to_us+0xa8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2200      	movs	r2, #0
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	60fa      	str	r2, [r7, #12]
 8003d88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d90:	f7fc fce8 	bl	8000764 <__aeabi_uldivmod>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4613      	mov	r3, r2
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3720      	adds	r7, #32
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003da4:	20000000 	.word	0x20000000

08003da8 <systick_period_us_reg>:
static uint32_t win_sum_us = 0;
static uint32_t win_idx = 0;
static uint32_t cpu_use_win_tenths = 0;
enum { EMA_ALPHA_PCT = 10 };

static inline uint32_t systick_period_us_reg(void) {
 8003da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dac:	b088      	sub	sp, #32
 8003dae:	af00      	add	r7, sp, #0
    uint32_t clk_div = (SysTick->CTRL & SysTick_CTRL_CLKSOURCE_Msk) ? 1u : 8u;
 8003db0:	4b30      	ldr	r3, [pc, #192]	@ (8003e74 <systick_period_us_reg+0xcc>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <systick_period_us_reg+0x18>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <systick_period_us_reg+0x1a>
 8003dc0:	2308      	movs	r3, #8
 8003dc2:	61fb      	str	r3, [r7, #28]
    uint32_t reload  = (SysTick->LOAD + 1u);
 8003dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8003e74 <systick_period_us_reg+0xcc>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	61bb      	str	r3, [r7, #24]
    uint64_t hz = (uint64_t)SystemCoreClock / clk_div;
 8003dcc:	4b2a      	ldr	r3, [pc, #168]	@ (8003e78 <systick_period_us_reg+0xd0>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	4618      	mov	r0, r3
 8003dda:	4611      	mov	r1, r2
 8003ddc:	e9c7 0104 	strd	r0, r1, [r7, #16]
    return (uint32_t)(( (uint64_t)reload * 1000000ull) / hz);
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	2200      	movs	r2, #0
 8003de4:	469a      	mov	sl, r3
 8003de6:	4693      	mov	fp, r2
 8003de8:	4652      	mov	r2, sl
 8003dea:	465b      	mov	r3, fp
 8003dec:	f04f 0000 	mov.w	r0, #0
 8003df0:	f04f 0100 	mov.w	r1, #0
 8003df4:	0159      	lsls	r1, r3, #5
 8003df6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dfa:	0150      	lsls	r0, r2, #5
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	ebb2 040a 	subs.w	r4, r2, sl
 8003e04:	eb63 050b 	sbc.w	r5, r3, fp
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	026b      	lsls	r3, r5, #9
 8003e12:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003e16:	0262      	lsls	r2, r4, #9
 8003e18:	4614      	mov	r4, r2
 8003e1a:	461d      	mov	r5, r3
 8003e1c:	eb14 080a 	adds.w	r8, r4, sl
 8003e20:	eb45 090b 	adc.w	r9, r5, fp
 8003e24:	f04f 0200 	mov.w	r2, #0
 8003e28:	f04f 0300 	mov.w	r3, #0
 8003e2c:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e30:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e34:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e38:	ebb2 0108 	subs.w	r1, r2, r8
 8003e3c:	6039      	str	r1, [r7, #0]
 8003e3e:	eb63 0309 	sbc.w	r3, r3, r9
 8003e42:	607b      	str	r3, [r7, #4]
 8003e44:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	eb12 020a 	adds.w	r2, r2, sl
 8003e4e:	60ba      	str	r2, [r7, #8]
 8003e50:	4623      	mov	r3, r4
 8003e52:	eb43 030b 	adc.w	r3, r3, fp
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e60:	f7fc fc80 	bl	8000764 <__aeabi_uldivmod>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4613      	mov	r3, r2
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3720      	adds	r7, #32
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e74:	e000e010 	.word	0xe000e010
 8003e78:	20000000 	.word	0x20000000

08003e7c <app_cpu_snapshot_log>:
uint32_t g_app_cnt;
volatile uint32_t g_app_tick_cnt;

/********************** Snapshot de ciclos y tiempo **********************/
static void app_cpu_snapshot_log(void)
{
 8003e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e80:	b08c      	sub	sp, #48	@ 0x30
 8003e82:	af02      	add	r7, sp, #8
    uint32_t cycles = task_prof_total.last_cycles;
 8003e84:	4b4e      	ldr	r3, [pc, #312]	@ (8003fc0 <app_cpu_snapshot_log+0x144>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t ms_tenths = (uint32_t)(((uint64_t)cycles * 10000ull + (SystemCoreClock/2)) / (uint64_t)SystemCoreClock);
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	469a      	mov	sl, r3
 8003e90:	4693      	mov	fp, r2
 8003e92:	4652      	mov	r2, sl
 8003e94:	465b      	mov	r3, fp
 8003e96:	f04f 0000 	mov.w	r0, #0
 8003e9a:	f04f 0100 	mov.w	r1, #0
 8003e9e:	0099      	lsls	r1, r3, #2
 8003ea0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003ea4:	0090      	lsls	r0, r2, #2
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	eb12 040a 	adds.w	r4, r2, sl
 8003eae:	eb43 050b 	adc.w	r5, r3, fp
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	00eb      	lsls	r3, r5, #3
 8003ebc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ec0:	00e2      	lsls	r2, r4, #3
 8003ec2:	4614      	mov	r4, r2
 8003ec4:	461d      	mov	r5, r3
 8003ec6:	ebb4 080a 	subs.w	r8, r4, sl
 8003eca:	eb65 090b 	sbc.w	r9, r5, fp
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8003eda:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8003ede:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8003ee2:	4690      	mov	r8, r2
 8003ee4:	4699      	mov	r9, r3
 8003ee6:	eb18 030a 	adds.w	r3, r8, sl
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	eb49 030b 	adc.w	r3, r9, fp
 8003ef0:	607b      	str	r3, [r7, #4]
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	f04f 0300 	mov.w	r3, #0
 8003efa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003efe:	4629      	mov	r1, r5
 8003f00:	010b      	lsls	r3, r1, #4
 8003f02:	4620      	mov	r0, r4
 8003f04:	4629      	mov	r1, r5
 8003f06:	4604      	mov	r4, r0
 8003f08:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8003f0c:	4601      	mov	r1, r0
 8003f0e:	010a      	lsls	r2, r1, #4
 8003f10:	492c      	ldr	r1, [pc, #176]	@ (8003fc4 <app_cpu_snapshot_log+0x148>)
 8003f12:	6809      	ldr	r1, [r1, #0]
 8003f14:	0849      	lsrs	r1, r1, #1
 8003f16:	2000      	movs	r0, #0
 8003f18:	61b9      	str	r1, [r7, #24]
 8003f1a:	61f8      	str	r0, [r7, #28]
 8003f1c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8003f20:	4621      	mov	r1, r4
 8003f22:	1851      	adds	r1, r2, r1
 8003f24:	6139      	str	r1, [r7, #16]
 8003f26:	4629      	mov	r1, r5
 8003f28:	eb43 0101 	adc.w	r1, r3, r1
 8003f2c:	6179      	str	r1, [r7, #20]
 8003f2e:	4b25      	ldr	r3, [pc, #148]	@ (8003fc4 <app_cpu_snapshot_log+0x148>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2200      	movs	r2, #0
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	60fa      	str	r2, [r7, #12]
 8003f38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f40:	f7fc fc10 	bl	8000764 <__aeabi_uldivmod>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	4613      	mov	r3, r2
 8003f4a:	623b      	str	r3, [r7, #32]

    LOGGER_LOG("\r\nCiclos    Tiempo [ms]\r\n");
 8003f4c:	b672      	cpsid	i
 8003f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003fc8 <app_cpu_snapshot_log+0x14c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1e      	ldr	r2, [pc, #120]	@ (8003fcc <app_cpu_snapshot_log+0x150>)
 8003f54:	213f      	movs	r1, #63	@ 0x3f
 8003f56:	4618      	mov	r0, r3
 8003f58:	f002 fc08 	bl	800676c <sniprintf>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8003fd0 <app_cpu_snapshot_log+0x154>)
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	4b19      	ldr	r3, [pc, #100]	@ (8003fc8 <app_cpu_snapshot_log+0x14c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f001 f824 	bl	8004fb4 <logger_log_print_>
 8003f6c:	b662      	cpsie	i
    LOGGER_LOG("%lu      %lu.%01lu\r\n", (unsigned long)cycles, ms_tenths/10, ms_tenths%10);
 8003f6e:	b672      	cpsid	i
 8003f70:	4b15      	ldr	r3, [pc, #84]	@ (8003fc8 <app_cpu_snapshot_log+0x14c>)
 8003f72:	681c      	ldr	r4, [r3, #0]
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	4a17      	ldr	r2, [pc, #92]	@ (8003fd4 <app_cpu_snapshot_log+0x158>)
 8003f78:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7c:	08d8      	lsrs	r0, r3, #3
 8003f7e:	6a39      	ldr	r1, [r7, #32]
 8003f80:	4b14      	ldr	r3, [pc, #80]	@ (8003fd4 <app_cpu_snapshot_log+0x158>)
 8003f82:	fba3 2301 	umull	r2, r3, r3, r1
 8003f86:	08da      	lsrs	r2, r3, #3
 8003f88:	4613      	mov	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	1aca      	subs	r2, r1, r3
 8003f92:	9201      	str	r2, [sp, #4]
 8003f94:	9000      	str	r0, [sp, #0]
 8003f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f98:	4a0f      	ldr	r2, [pc, #60]	@ (8003fd8 <app_cpu_snapshot_log+0x15c>)
 8003f9a:	213f      	movs	r1, #63	@ 0x3f
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	f002 fbe5 	bl	800676c <sniprintf>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8003fd0 <app_cpu_snapshot_log+0x154>)
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	4b07      	ldr	r3, [pc, #28]	@ (8003fc8 <app_cpu_snapshot_log+0x14c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 f801 	bl	8004fb4 <logger_log_print_>
 8003fb2:	b662      	cpsie	i
}
 8003fb4:	bf00      	nop
 8003fb6:	3728      	adds	r7, #40	@ 0x28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fbe:	bf00      	nop
 8003fc0:	2000000c 	.word	0x2000000c
 8003fc4:	20000000 	.word	0x20000000
 8003fc8:	08007a34 	.word	0x08007a34
 8003fcc:	08007720 	.word	0x08007720
 8003fd0:	200003cc 	.word	0x200003cc
 8003fd4:	cccccccd 	.word	0xcccccccd
 8003fd8:	0800773c 	.word	0x0800773c

08003fdc <wcet_dump>:
/********************** Dump WCET ****************************************/
static uint32_t s_prof_dump_every = 100;
static uint32_t s_prof_tick = 0;

static void wcet_dump(void)
{
 8003fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fde:	b0a9      	sub	sp, #164	@ 0xa4
 8003fe0:	af0c      	add	r7, sp, #48	@ 0x30
    /* 1) Por tarea */
    LOGGER_LOG("\r\n--- WCET por tarea (us) ---\r\n");
 8003fe2:	b672      	cpsid	i
 8003fe4:	4b79      	ldr	r3, [pc, #484]	@ (80041cc <wcet_dump+0x1f0>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a79      	ldr	r2, [pc, #484]	@ (80041d0 <wcet_dump+0x1f4>)
 8003fea:	213f      	movs	r1, #63	@ 0x3f
 8003fec:	4618      	mov	r0, r3
 8003fee:	f002 fbbd 	bl	800676c <sniprintf>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	4a77      	ldr	r2, [pc, #476]	@ (80041d4 <wcet_dump+0x1f8>)
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	4b74      	ldr	r3, [pc, #464]	@ (80041cc <wcet_dump+0x1f0>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 ffd9 	bl	8004fb4 <logger_log_print_>
 8004002:	b662      	cpsie	i
    for (uint32_t i = 0; i < TASK_QTY; i++) {
 8004004:	2300      	movs	r3, #0
 8004006:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004008:	e03a      	b.n	8004080 <wcet_dump+0xa4>
        LOGGER_LOG("%s: last=%lu us, wcet=%lu us, calls=%lu\r\n",
 800400a:	b672      	cpsid	i
 800400c:	4b6f      	ldr	r3, [pc, #444]	@ (80041cc <wcet_dump+0x1f0>)
 800400e:	681c      	ldr	r4, [r3, #0]
 8004010:	4971      	ldr	r1, [pc, #452]	@ (80041d8 <wcet_dump+0x1fc>)
 8004012:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004014:	4613      	mov	r3, r2
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	4413      	add	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	440b      	add	r3, r1
 800401e:	681d      	ldr	r5, [r3, #0]
 8004020:	496d      	ldr	r1, [pc, #436]	@ (80041d8 <wcet_dump+0x1fc>)
 8004022:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004024:	4613      	mov	r3, r2
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	4413      	add	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	440b      	add	r3, r1
 800402e:	330c      	adds	r3, #12
 8004030:	6819      	ldr	r1, [r3, #0]
 8004032:	4869      	ldr	r0, [pc, #420]	@ (80041d8 <wcet_dump+0x1fc>)
 8004034:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004036:	4613      	mov	r3, r2
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	4413      	add	r3, r2
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	4403      	add	r3, r0
 8004040:	3310      	adds	r3, #16
 8004042:	6818      	ldr	r0, [r3, #0]
 8004044:	4e64      	ldr	r6, [pc, #400]	@ (80041d8 <wcet_dump+0x1fc>)
 8004046:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004048:	4613      	mov	r3, r2
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	4413      	add	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4433      	add	r3, r6
 8004052:	3314      	adds	r3, #20
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	9302      	str	r3, [sp, #8]
 8004058:	9001      	str	r0, [sp, #4]
 800405a:	9100      	str	r1, [sp, #0]
 800405c:	462b      	mov	r3, r5
 800405e:	4a5f      	ldr	r2, [pc, #380]	@ (80041dc <wcet_dump+0x200>)
 8004060:	213f      	movs	r1, #63	@ 0x3f
 8004062:	4620      	mov	r0, r4
 8004064:	f002 fb82 	bl	800676c <sniprintf>
 8004068:	4603      	mov	r3, r0
 800406a:	4a5a      	ldr	r2, [pc, #360]	@ (80041d4 <wcet_dump+0x1f8>)
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	4b57      	ldr	r3, [pc, #348]	@ (80041cc <wcet_dump+0x1f0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f000 ff9e 	bl	8004fb4 <logger_log_print_>
 8004078:	b662      	cpsie	i
    for (uint32_t i = 0; i < TASK_QTY; i++) {
 800407a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800407c:	3301      	adds	r3, #1
 800407e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004080:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004082:	2b02      	cmp	r3, #2
 8004084:	d9c1      	bls.n	800400a <wcet_dump+0x2e>
                   task_prof[i].name,
                   (unsigned long)task_prof[i].last_us,
                   (unsigned long)task_prof[i].wcet_us,
                   (unsigned long)task_prof[i].calls);
    }
    LOGGER_LOG("TOTAL_TICK: last=%lu us, wcet=%lu us, calls=%lu\r\n",
 8004086:	b672      	cpsid	i
 8004088:	4b50      	ldr	r3, [pc, #320]	@ (80041cc <wcet_dump+0x1f0>)
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	4b54      	ldr	r3, [pc, #336]	@ (80041e0 <wcet_dump+0x204>)
 800408e:	68d9      	ldr	r1, [r3, #12]
 8004090:	4b53      	ldr	r3, [pc, #332]	@ (80041e0 <wcet_dump+0x204>)
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	4a52      	ldr	r2, [pc, #328]	@ (80041e0 <wcet_dump+0x204>)
 8004096:	6952      	ldr	r2, [r2, #20]
 8004098:	9201      	str	r2, [sp, #4]
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	460b      	mov	r3, r1
 800409e:	4a51      	ldr	r2, [pc, #324]	@ (80041e4 <wcet_dump+0x208>)
 80040a0:	213f      	movs	r1, #63	@ 0x3f
 80040a2:	f002 fb63 	bl	800676c <sniprintf>
 80040a6:	4603      	mov	r3, r0
 80040a8:	4a4a      	ldr	r2, [pc, #296]	@ (80041d4 <wcet_dump+0x1f8>)
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	4b47      	ldr	r3, [pc, #284]	@ (80041cc <wcet_dump+0x1f0>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 ff7f 	bl	8004fb4 <logger_log_print_>
 80040b6:	b662      	cpsie	i
               (unsigned long)task_prof_total.last_us,
               (unsigned long)task_prof_total.wcet_us,
               (unsigned long)task_prof_total.calls);

    /* 2) Por categorías */
    uint32_t s_last[5]={0}, s_wcet[5]={0};
 80040b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	605a      	str	r2, [r3, #4]
 80040c2:	609a      	str	r2, [r3, #8]
 80040c4:	60da      	str	r2, [r3, #12]
 80040c6:	611a      	str	r2, [r3, #16]
 80040c8:	f107 0314 	add.w	r3, r7, #20
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	605a      	str	r2, [r3, #4]
 80040d2:	609a      	str	r2, [r3, #8]
 80040d4:	60da      	str	r2, [r3, #12]
 80040d6:	611a      	str	r2, [r3, #16]
    task_sistema_prof_get(s_last, s_wcet);
 80040d8:	f107 0214 	add.w	r2, r7, #20
 80040dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80040e0:	4611      	mov	r1, r2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f001 fed2 	bl	8005e8c <task_sistema_prof_get>

    int idx_sensor=-1, idx_act=-1;
 80040e8:	f04f 33ff 	mov.w	r3, #4294967295
 80040ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040ee:	f04f 33ff 	mov.w	r3, #4294967295
 80040f2:	667b      	str	r3, [r7, #100]	@ 0x64
    for (uint32_t i = 0; i < TASK_QTY; i++) {
 80040f4:	2300      	movs	r3, #0
 80040f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80040f8:	e024      	b.n	8004144 <wcet_dump+0x168>
        if (0 == strcmp(task_prof[i].name, "task_sensor.c"))   idx_sensor = (int)i;
 80040fa:	4937      	ldr	r1, [pc, #220]	@ (80041d8 <wcet_dump+0x1fc>)
 80040fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80040fe:	4613      	mov	r3, r2
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	4413      	add	r3, r2
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	440b      	add	r3, r1
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4937      	ldr	r1, [pc, #220]	@ (80041e8 <wcet_dump+0x20c>)
 800410c:	4618      	mov	r0, r3
 800410e:	f7fc f81d 	bl	800014c <strcmp>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <wcet_dump+0x140>
 8004118:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800411a:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (0 == strcmp(task_prof[i].name, "task_actuator.c")) idx_act    = (int)i;
 800411c:	492e      	ldr	r1, [pc, #184]	@ (80041d8 <wcet_dump+0x1fc>)
 800411e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004120:	4613      	mov	r3, r2
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	4413      	add	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	440b      	add	r3, r1
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	492f      	ldr	r1, [pc, #188]	@ (80041ec <wcet_dump+0x210>)
 800412e:	4618      	mov	r0, r3
 8004130:	f7fc f80c 	bl	800014c <strcmp>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <wcet_dump+0x162>
 800413a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800413c:	667b      	str	r3, [r7, #100]	@ 0x64
    for (uint32_t i = 0; i < TASK_QTY; i++) {
 800413e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004140:	3301      	adds	r3, #1
 8004142:	663b      	str	r3, [r7, #96]	@ 0x60
 8004144:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004146:	2b02      	cmp	r3, #2
 8004148:	d9d7      	bls.n	80040fa <wcet_dump+0x11e>
    }

    uint32_t sensores_last = (idx_sensor>=0 ? task_prof[idx_sensor].last_us : 0) + s_last[0];
 800414a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800414c:	2b00      	cmp	r3, #0
 800414e:	db09      	blt.n	8004164 <wcet_dump+0x188>
 8004150:	4921      	ldr	r1, [pc, #132]	@ (80041d8 <wcet_dump+0x1fc>)
 8004152:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004154:	4613      	mov	r3, r2
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	4413      	add	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	440b      	add	r3, r1
 800415e:	330c      	adds	r3, #12
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	e000      	b.n	8004166 <wcet_dump+0x18a>
 8004164:	2300      	movs	r3, #0
 8004166:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004168:	4413      	add	r3, r2
 800416a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    uint32_t sensores_wcet = (idx_sensor>=0 ? task_prof[idx_sensor].wcet_us : 0) + s_wcet[0];
 800416c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800416e:	2b00      	cmp	r3, #0
 8004170:	db09      	blt.n	8004186 <wcet_dump+0x1aa>
 8004172:	4919      	ldr	r1, [pc, #100]	@ (80041d8 <wcet_dump+0x1fc>)
 8004174:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004176:	4613      	mov	r3, r2
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	4413      	add	r3, r2
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	440b      	add	r3, r1
 8004180:	3310      	adds	r3, #16
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	e000      	b.n	8004188 <wcet_dump+0x1ac>
 8004186:	2300      	movs	r3, #0
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	4413      	add	r3, r2
 800418c:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint32_t actuadores_last = (idx_act>=0 ? task_prof[idx_act].last_us : 0) + s_last[4];
 800418e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004190:	2b00      	cmp	r3, #0
 8004192:	db09      	blt.n	80041a8 <wcet_dump+0x1cc>
 8004194:	4910      	ldr	r1, [pc, #64]	@ (80041d8 <wcet_dump+0x1fc>)
 8004196:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004198:	4613      	mov	r3, r2
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	4413      	add	r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	440b      	add	r3, r1
 80041a2:	330c      	adds	r3, #12
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	e000      	b.n	80041aa <wcet_dump+0x1ce>
 80041a8:	2300      	movs	r3, #0
 80041aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80041ac:	4413      	add	r3, r2
 80041ae:	657b      	str	r3, [r7, #84]	@ 0x54
    uint32_t actuadores_wcet = (idx_act>=0 ? task_prof[idx_act].wcet_us : 0) + s_wcet[4];
 80041b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	db1c      	blt.n	80041f0 <wcet_dump+0x214>
 80041b6:	4908      	ldr	r1, [pc, #32]	@ (80041d8 <wcet_dump+0x1fc>)
 80041b8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80041ba:	4613      	mov	r3, r2
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	4413      	add	r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	440b      	add	r3, r1
 80041c4:	3310      	adds	r3, #16
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	e013      	b.n	80041f2 <wcet_dump+0x216>
 80041ca:	bf00      	nop
 80041cc:	08007a34 	.word	0x08007a34
 80041d0:	08007754 	.word	0x08007754
 80041d4:	200003cc 	.word	0x200003cc
 80041d8:	20000244 	.word	0x20000244
 80041dc:	08007774 	.word	0x08007774
 80041e0:	2000000c 	.word	0x2000000c
 80041e4:	080077a0 	.word	0x080077a0
 80041e8:	080076e4 	.word	0x080076e4
 80041ec:	080076f4 	.word	0x080076f4
 80041f0:	2300      	movs	r3, #0
 80041f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041f4:	4413      	add	r3, r2
 80041f6:	653b      	str	r3, [r7, #80]	@ 0x50
    uint32_t sistema_last = s_last[3] + s_last[1] + s_last[2];
 80041f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80041fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041fc:	441a      	add	r2, r3
 80041fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004200:	4413      	add	r3, r2
 8004202:	64fb      	str	r3, [r7, #76]	@ 0x4c
    uint32_t sistema_wcet = s_wcet[3] + s_wcet[1] + s_wcet[2];
 8004204:	6a3a      	ldr	r2, [r7, #32]
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	441a      	add	r2, r3
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	4413      	add	r3, r2
 800420e:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t total_last = sensores_last + actuadores_last + sistema_last;
 8004210:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004214:	4413      	add	r3, r2
 8004216:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004218:	4413      	add	r3, r2
 800421a:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t total_wcet = sensores_wcet + actuadores_wcet + sistema_wcet;
 800421c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800421e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004220:	4413      	add	r3, r2
 8004222:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004224:	4413      	add	r3, r2
 8004226:	643b      	str	r3, [r7, #64]	@ 0x40

    LOGGER_LOG("--- WCET por categoria (us) ---\r\n");
 8004228:	b672      	cpsid	i
 800422a:	4b73      	ldr	r3, [pc, #460]	@ (80043f8 <wcet_dump+0x41c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a73      	ldr	r2, [pc, #460]	@ (80043fc <wcet_dump+0x420>)
 8004230:	213f      	movs	r1, #63	@ 0x3f
 8004232:	4618      	mov	r0, r3
 8004234:	f002 fa9a 	bl	800676c <sniprintf>
 8004238:	4603      	mov	r3, r0
 800423a:	4a71      	ldr	r2, [pc, #452]	@ (8004400 <wcet_dump+0x424>)
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	4b6e      	ldr	r3, [pc, #440]	@ (80043f8 <wcet_dump+0x41c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f000 feb6 	bl	8004fb4 <logger_log_print_>
 8004248:	b662      	cpsie	i
    LOGGER_LOG("sensores  : last=%lu us, wcet=%lu us\r\n", (unsigned long)sensores_last,  (unsigned long)sensores_wcet);
 800424a:	b672      	cpsid	i
 800424c:	4b6a      	ldr	r3, [pc, #424]	@ (80043f8 <wcet_dump+0x41c>)
 800424e:	6818      	ldr	r0, [r3, #0]
 8004250:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004256:	4a6b      	ldr	r2, [pc, #428]	@ (8004404 <wcet_dump+0x428>)
 8004258:	213f      	movs	r1, #63	@ 0x3f
 800425a:	f002 fa87 	bl	800676c <sniprintf>
 800425e:	4603      	mov	r3, r0
 8004260:	4a67      	ldr	r2, [pc, #412]	@ (8004400 <wcet_dump+0x424>)
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	4b64      	ldr	r3, [pc, #400]	@ (80043f8 <wcet_dump+0x41c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f000 fea3 	bl	8004fb4 <logger_log_print_>
 800426e:	b662      	cpsie	i
    LOGGER_LOG("actuadores: last=%lu us, wcet=%lu us\r\n", (unsigned long)actuadores_last,(unsigned long)actuadores_wcet);
 8004270:	b672      	cpsid	i
 8004272:	4b61      	ldr	r3, [pc, #388]	@ (80043f8 <wcet_dump+0x41c>)
 8004274:	6818      	ldr	r0, [r3, #0]
 8004276:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800427c:	4a62      	ldr	r2, [pc, #392]	@ (8004408 <wcet_dump+0x42c>)
 800427e:	213f      	movs	r1, #63	@ 0x3f
 8004280:	f002 fa74 	bl	800676c <sniprintf>
 8004284:	4603      	mov	r3, r0
 8004286:	4a5e      	ldr	r2, [pc, #376]	@ (8004400 <wcet_dump+0x424>)
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	4b5b      	ldr	r3, [pc, #364]	@ (80043f8 <wcet_dump+0x41c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fe90 	bl	8004fb4 <logger_log_print_>
 8004294:	b662      	cpsie	i
    LOGGER_LOG("sistema   : last=%lu us, wcet=%lu us\r\n", (unsigned long)sistema_last,   (unsigned long)sistema_wcet);
 8004296:	b672      	cpsid	i
 8004298:	4b57      	ldr	r3, [pc, #348]	@ (80043f8 <wcet_dump+0x41c>)
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042a2:	4a5a      	ldr	r2, [pc, #360]	@ (800440c <wcet_dump+0x430>)
 80042a4:	213f      	movs	r1, #63	@ 0x3f
 80042a6:	f002 fa61 	bl	800676c <sniprintf>
 80042aa:	4603      	mov	r3, r0
 80042ac:	4a54      	ldr	r2, [pc, #336]	@ (8004400 <wcet_dump+0x424>)
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	4b51      	ldr	r3, [pc, #324]	@ (80043f8 <wcet_dump+0x41c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fe7d 	bl	8004fb4 <logger_log_print_>
 80042ba:	b662      	cpsie	i
    LOGGER_LOG("TOTAL(sum): last=%lu us, wcet=%lu us\r\n", (unsigned long)total_last,     (unsigned long)total_wcet);
 80042bc:	b672      	cpsid	i
 80042be:	4b4e      	ldr	r3, [pc, #312]	@ (80043f8 <wcet_dump+0x41c>)
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042c8:	4a51      	ldr	r2, [pc, #324]	@ (8004410 <wcet_dump+0x434>)
 80042ca:	213f      	movs	r1, #63	@ 0x3f
 80042cc:	f002 fa4e 	bl	800676c <sniprintf>
 80042d0:	4603      	mov	r3, r0
 80042d2:	4a4b      	ldr	r2, [pc, #300]	@ (8004400 <wcet_dump+0x424>)
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	4b48      	ldr	r3, [pc, #288]	@ (80043f8 <wcet_dump+0x41c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fe6a 	bl	8004fb4 <logger_log_print_>
 80042e0:	b662      	cpsie	i

    /* 3) CPU usage */
    uint32_t tick_us = (tick_us_cal ? tick_us_cal : systick_period_us_reg());
 80042e2:	4b4c      	ldr	r3, [pc, #304]	@ (8004414 <wcet_dump+0x438>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d103      	bne.n	80042f2 <wcet_dump+0x316>
 80042ea:	f7ff fd5d 	bl	8003da8 <systick_period_us_reg>
 80042ee:	4603      	mov	r3, r0
 80042f0:	e001      	b.n	80042f6 <wcet_dump+0x31a>
 80042f2:	4b48      	ldr	r3, [pc, #288]	@ (8004414 <wcet_dump+0x438>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    LOGGER_LOG(
 80042f8:	b672      	cpsid	i
 80042fa:	4b3f      	ldr	r3, [pc, #252]	@ (80043f8 <wcet_dump+0x41c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	4b45      	ldr	r3, [pc, #276]	@ (8004418 <wcet_dump+0x43c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a45      	ldr	r2, [pc, #276]	@ (800441c <wcet_dump+0x440>)
 8004306:	fba2 2303 	umull	r2, r3, r2, r3
 800430a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800430e:	4b42      	ldr	r3, [pc, #264]	@ (8004418 <wcet_dump+0x43c>)
 8004310:	6819      	ldr	r1, [r3, #0]
 8004312:	4b42      	ldr	r3, [pc, #264]	@ (800441c <wcet_dump+0x440>)
 8004314:	fba3 2301 	umull	r2, r3, r3, r1
 8004318:	08da      	lsrs	r2, r3, #3
 800431a:	4613      	mov	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	1aca      	subs	r2, r1, r3
 8004324:	4b3e      	ldr	r3, [pc, #248]	@ (8004420 <wcet_dump+0x444>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	493c      	ldr	r1, [pc, #240]	@ (800441c <wcet_dump+0x440>)
 800432a:	fba1 1303 	umull	r1, r3, r1, r3
 800432e:	08de      	lsrs	r6, r3, #3
 8004330:	4b3b      	ldr	r3, [pc, #236]	@ (8004420 <wcet_dump+0x444>)
 8004332:	6818      	ldr	r0, [r3, #0]
 8004334:	4b39      	ldr	r3, [pc, #228]	@ (800441c <wcet_dump+0x440>)
 8004336:	fba3 1300 	umull	r1, r3, r3, r0
 800433a:	08d9      	lsrs	r1, r3, #3
 800433c:	460b      	mov	r3, r1
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	1ac1      	subs	r1, r0, r3
 8004346:	4b37      	ldr	r3, [pc, #220]	@ (8004424 <wcet_dump+0x448>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4834      	ldr	r0, [pc, #208]	@ (800441c <wcet_dump+0x440>)
 800434c:	fba0 0303 	umull	r0, r3, r0, r3
 8004350:	08db      	lsrs	r3, r3, #3
 8004352:	60bb      	str	r3, [r7, #8]
 8004354:	4b33      	ldr	r3, [pc, #204]	@ (8004424 <wcet_dump+0x448>)
 8004356:	681c      	ldr	r4, [r3, #0]
 8004358:	4b30      	ldr	r3, [pc, #192]	@ (800441c <wcet_dump+0x440>)
 800435a:	fba3 0304 	umull	r0, r3, r3, r4
 800435e:	08d8      	lsrs	r0, r3, #3
 8004360:	4603      	mov	r3, r0
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4403      	add	r3, r0
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	1ae0      	subs	r0, r4, r3
 800436a:	4b2f      	ldr	r3, [pc, #188]	@ (8004428 <wcet_dump+0x44c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4c2b      	ldr	r4, [pc, #172]	@ (800441c <wcet_dump+0x440>)
 8004370:	fba4 4303 	umull	r4, r3, r4, r3
 8004374:	08db      	lsrs	r3, r3, #3
 8004376:	607b      	str	r3, [r7, #4]
 8004378:	4b2b      	ldr	r3, [pc, #172]	@ (8004428 <wcet_dump+0x44c>)
 800437a:	681d      	ldr	r5, [r3, #0]
 800437c:	4b27      	ldr	r3, [pc, #156]	@ (800441c <wcet_dump+0x440>)
 800437e:	fba3 4305 	umull	r4, r3, r3, r5
 8004382:	08dc      	lsrs	r4, r3, #3
 8004384:	4623      	mov	r3, r4
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4423      	add	r3, r4
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	1aec      	subs	r4, r5, r3
 800438e:	4b27      	ldr	r3, [pc, #156]	@ (800442c <wcet_dump+0x450>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 8004394:	429d      	cmp	r5, r3
 8004396:	d201      	bcs.n	800439c <wcet_dump+0x3c0>
 8004398:	4b25      	ldr	r3, [pc, #148]	@ (8004430 <wcet_dump+0x454>)
 800439a:	e000      	b.n	800439e <wcet_dump+0x3c2>
 800439c:	4b25      	ldr	r3, [pc, #148]	@ (8004434 <wcet_dump+0x458>)
 800439e:	4d23      	ldr	r5, [pc, #140]	@ (800442c <wcet_dump+0x450>)
 80043a0:	692d      	ldr	r5, [r5, #16]
 80043a2:	f8d7 e03c 	ldr.w	lr, [r7, #60]	@ 0x3c
 80043a6:	45ae      	cmp	lr, r5
 80043a8:	d201      	bcs.n	80043ae <wcet_dump+0x3d2>
 80043aa:	4d23      	ldr	r5, [pc, #140]	@ (8004438 <wcet_dump+0x45c>)
 80043ac:	e000      	b.n	80043b0 <wcet_dump+0x3d4>
 80043ae:	4d21      	ldr	r5, [pc, #132]	@ (8004434 <wcet_dump+0x458>)
 80043b0:	950a      	str	r5, [sp, #40]	@ 0x28
 80043b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80043b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043b6:	9308      	str	r3, [sp, #32]
 80043b8:	9407      	str	r4, [sp, #28]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	9306      	str	r3, [sp, #24]
 80043be:	9005      	str	r0, [sp, #20]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	9304      	str	r3, [sp, #16]
 80043c4:	2332      	movs	r3, #50	@ 0x32
 80043c6:	9303      	str	r3, [sp, #12]
 80043c8:	9102      	str	r1, [sp, #8]
 80043ca:	9601      	str	r6, [sp, #4]
 80043cc:	9200      	str	r2, [sp, #0]
 80043ce:	4663      	mov	r3, ip
 80043d0:	4a1a      	ldr	r2, [pc, #104]	@ (800443c <wcet_dump+0x460>)
 80043d2:	213f      	movs	r1, #63	@ 0x3f
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f002 f9c9 	bl	800676c <sniprintf>
 80043da:	4603      	mov	r3, r0
 80043dc:	4a08      	ldr	r2, [pc, #32]	@ (8004400 <wcet_dump+0x424>)
 80043de:	6013      	str	r3, [r2, #0]
 80043e0:	4b05      	ldr	r3, [pc, #20]	@ (80043f8 <wcet_dump+0x41c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fde5 	bl	8004fb4 <logger_log_print_>
 80043ea:	b662      	cpsie	i
      (task_prof_total.last_us > tick_us) ? " [OVERRUN ahora]" : "",
      (task_prof_total.wcet_us  > tick_us) ? " [OVERRUN hist]"  : ""
    );

    /* 4) Snapshot ciclos / tiempo */
    app_cpu_snapshot_log();
 80043ec:	f7ff fd46 	bl	8003e7c <app_cpu_snapshot_log>
}
 80043f0:	bf00      	nop
 80043f2:	3774      	adds	r7, #116	@ 0x74
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043f8:	08007a34 	.word	0x08007a34
 80043fc:	080077d4 	.word	0x080077d4
 8004400:	200003cc 	.word	0x200003cc
 8004404:	080077f8 	.word	0x080077f8
 8004408:	08007820 	.word	0x08007820
 800440c:	08007848 	.word	0x08007848
 8004410:	08007870 	.word	0x08007870
 8004414:	2000036c 	.word	0x2000036c
 8004418:	2000028c 	.word	0x2000028c
 800441c:	cccccccd 	.word	0xcccccccd
 8004420:	20000290 	.word	0x20000290
 8004424:	20000368 	.word	0x20000368
 8004428:	20000294 	.word	0x20000294
 800442c:	2000000c 	.word	0x2000000c
 8004430:	08007898 	.word	0x08007898
 8004434:	080078ac 	.word	0x080078ac
 8004438:	080078b0 	.word	0x080078b0
 800443c:	080078c0 	.word	0x080078c0

08004440 <app_init>:

/********************** Implementación ***********************************/
void app_init(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af02      	add	r7, sp, #8
    LOGGER_LOG("\r\nIniciando aplicación\r\n");
 8004446:	b672      	cpsid	i
 8004448:	4b2d      	ldr	r3, [pc, #180]	@ (8004500 <app_init+0xc0>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a2d      	ldr	r2, [pc, #180]	@ (8004504 <app_init+0xc4>)
 800444e:	213f      	movs	r1, #63	@ 0x3f
 8004450:	4618      	mov	r0, r3
 8004452:	f002 f98b 	bl	800676c <sniprintf>
 8004456:	4603      	mov	r3, r0
 8004458:	4a2b      	ldr	r2, [pc, #172]	@ (8004508 <app_init+0xc8>)
 800445a:	6013      	str	r3, [r2, #0]
 800445c:	4b28      	ldr	r3, [pc, #160]	@ (8004500 <app_init+0xc0>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fda7 	bl	8004fb4 <logger_log_print_>
 8004466:	b662      	cpsie	i
    g_app_cnt = G_APP_CNT_INI;
 8004468:	4b28      	ldr	r3, [pc, #160]	@ (800450c <app_init+0xcc>)
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]
    dwt_init();
 800446e:	f7ff fc21 	bl	8003cb4 <dwt_init>

    sen_temp_init(&hadc1, &hadc2, ADC_CHANNEL_0, 50, 3.30f);
 8004472:	4b27      	ldr	r3, [pc, #156]	@ (8004510 <app_init+0xd0>)
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	2332      	movs	r3, #50	@ 0x32
 8004478:	2200      	movs	r2, #0
 800447a:	4926      	ldr	r1, [pc, #152]	@ (8004514 <app_init+0xd4>)
 800447c:	4826      	ldr	r0, [pc, #152]	@ (8004518 <app_init+0xd8>)
 800447e:	f000 ffa1 	bl	80053c4 <sen_temp_init>

    for (uint32_t i = 0; i < TASK_QTY; i++) {
 8004482:	2300      	movs	r3, #0
 8004484:	607b      	str	r3, [r7, #4]
 8004486:	e025      	b.n	80044d4 <app_init+0x94>
        task_prof[i].name = task_cfg_list[i].name;
 8004488:	4a24      	ldr	r2, [pc, #144]	@ (800451c <app_init+0xdc>)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	4413      	add	r3, r2
 8004490:	6819      	ldr	r1, [r3, #0]
 8004492:	4823      	ldr	r0, [pc, #140]	@ (8004520 <app_init+0xe0>)
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	4613      	mov	r3, r2
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	4413      	add	r3, r2
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	4403      	add	r3, r0
 80044a0:	6019      	str	r1, [r3, #0]
        if (task_cfg_list[i].task_init) task_cfg_list[i].task_init(task_cfg_list[i].parameters);
 80044a2:	4a1e      	ldr	r2, [pc, #120]	@ (800451c <app_init+0xdc>)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	4413      	add	r3, r2
 80044aa:	3304      	adds	r3, #4
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00d      	beq.n	80044ce <app_init+0x8e>
 80044b2:	4a1a      	ldr	r2, [pc, #104]	@ (800451c <app_init+0xdc>)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	4413      	add	r3, r2
 80044ba:	3304      	adds	r3, #4
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4917      	ldr	r1, [pc, #92]	@ (800451c <app_init+0xdc>)
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	0112      	lsls	r2, r2, #4
 80044c4:	440a      	add	r2, r1
 80044c6:	320c      	adds	r2, #12
 80044c8:	6812      	ldr	r2, [r2, #0]
 80044ca:	4610      	mov	r0, r2
 80044cc:	4798      	blx	r3
    for (uint32_t i = 0; i < TASK_QTY; i++) {
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3301      	adds	r3, #1
 80044d2:	607b      	str	r3, [r7, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d9d6      	bls.n	8004488 <app_init+0x48>
    }

    tcal_t0 = dwt_get_cycles();
 80044da:	f7ff fc05 	bl	8003ce8 <dwt_get_cycles>
 80044de:	4603      	mov	r3, r0
 80044e0:	4a10      	ldr	r2, [pc, #64]	@ (8004524 <app_init+0xe4>)
 80044e2:	6013      	str	r3, [r2, #0]
    last_tick_cnt = g_app_cnt;
 80044e4:	4b09      	ldr	r3, [pc, #36]	@ (800450c <app_init+0xcc>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a0f      	ldr	r2, [pc, #60]	@ (8004528 <app_init+0xe8>)
 80044ea:	6013      	str	r3, [r2, #0]
    tick_us_cal = systick_period_us_reg();
 80044ec:	f7ff fc5c 	bl	8003da8 <systick_period_us_reg>
 80044f0:	4603      	mov	r3, r0
 80044f2:	4a0e      	ldr	r2, [pc, #56]	@ (800452c <app_init+0xec>)
 80044f4:	6013      	str	r3, [r2, #0]
}
 80044f6:	bf00      	nop
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	08007a34 	.word	0x08007a34
 8004504:	0800792c 	.word	0x0800792c
 8004508:	200003cc 	.word	0x200003cc
 800450c:	20000378 	.word	0x20000378
 8004510:	40533333 	.word	0x40533333
 8004514:	20000170 	.word	0x20000170
 8004518:	20000140 	.word	0x20000140
 800451c:	08007a04 	.word	0x08007a04
 8004520:	20000244 	.word	0x20000244
 8004524:	20000374 	.word	0x20000374
 8004528:	20000370 	.word	0x20000370
 800452c:	2000036c 	.word	0x2000036c

08004530 <app_update>:

void app_update(void)
{
 8004530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004534:	b0ac      	sub	sp, #176	@ 0xb0
 8004536:	af00      	add	r7, sp, #0
    if (G_APP_TICK_CNT_INI < g_app_tick_cnt) {
 8004538:	4b65      	ldr	r3, [pc, #404]	@ (80046d0 <app_update+0x1a0>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 82b0 	beq.w	8004aa2 <app_update+0x572>
        g_app_tick_cnt--;
 8004542:	4b63      	ldr	r3, [pc, #396]	@ (80046d0 <app_update+0x1a0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	1e5a      	subs	r2, r3, #1
 8004548:	4b61      	ldr	r3, [pc, #388]	@ (80046d0 <app_update+0x1a0>)
 800454a:	601a      	str	r2, [r3, #0]
        g_app_cnt++;
 800454c:	4b61      	ldr	r3, [pc, #388]	@ (80046d4 <app_update+0x1a4>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	1c5a      	adds	r2, r3, #1
 8004552:	4b60      	ldr	r3, [pc, #384]	@ (80046d4 <app_update+0x1a4>)
 8004554:	601a      	str	r2, [r3, #0]

        uint32_t tick_start = dwt_get_cycles();
 8004556:	f7ff fbc7 	bl	8003ce8 <dwt_get_cycles>
 800455a:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8

        for (uint32_t i = 0; i < TASK_QTY; i++) {
 800455e:	2300      	movs	r3, #0
 8004560:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004564:	e07d      	b.n	8004662 <app_update+0x132>
            if (task_cfg_list[i].task_update) {
 8004566:	4a5c      	ldr	r2, [pc, #368]	@ (80046d8 <app_update+0x1a8>)
 8004568:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	4413      	add	r3, r2
 8004570:	3308      	adds	r3, #8
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d06f      	beq.n	8004658 <app_update+0x128>
                uint32_t t0 = dwt_get_cycles();
 8004578:	f7ff fbb6 	bl	8003ce8 <dwt_get_cycles>
 800457c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                task_cfg_list[i].task_update(task_cfg_list[i].parameters);
 8004580:	4a55      	ldr	r2, [pc, #340]	@ (80046d8 <app_update+0x1a8>)
 8004582:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	4413      	add	r3, r2
 800458a:	3308      	adds	r3, #8
 800458c:	6819      	ldr	r1, [r3, #0]
 800458e:	4a52      	ldr	r2, [pc, #328]	@ (80046d8 <app_update+0x1a8>)
 8004590:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	4413      	add	r3, r2
 8004598:	330c      	adds	r3, #12
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	4788      	blx	r1
                uint32_t dt_cycles = dwt_get_cycles() - t0;
 80045a0:	f7ff fba2 	bl	8003ce8 <dwt_get_cycles>
 80045a4:	4602      	mov	r2, r0
 80045a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
                uint32_t dt_us     = cycles_to_us(dt_cycles);
 80045ae:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80045b0:	f7ff fba4 	bl	8003cfc <cycles_to_us>
 80045b4:	67b8      	str	r0, [r7, #120]	@ 0x78
                task_prof[i].last_cycles = dt_cycles;
 80045b6:	4949      	ldr	r1, [pc, #292]	@ (80046dc <app_update+0x1ac>)
 80045b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80045bc:	4613      	mov	r3, r2
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	4413      	add	r3, r2
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	440b      	add	r3, r1
 80045c6:	1d1a      	adds	r2, r3, #4
 80045c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045ca:	6013      	str	r3, [r2, #0]
                task_prof[i].last_us     = dt_us;
 80045cc:	4943      	ldr	r1, [pc, #268]	@ (80046dc <app_update+0x1ac>)
 80045ce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80045d2:	4613      	mov	r3, r2
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	4413      	add	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	440b      	add	r3, r1
 80045dc:	f103 020c 	add.w	r2, r3, #12
 80045e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045e2:	6013      	str	r3, [r2, #0]
                task_prof[i].calls++;
 80045e4:	493d      	ldr	r1, [pc, #244]	@ (80046dc <app_update+0x1ac>)
 80045e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80045ea:	4613      	mov	r3, r2
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	4413      	add	r3, r2
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	440b      	add	r3, r1
 80045f4:	3314      	adds	r3, #20
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	1c58      	adds	r0, r3, #1
 80045fa:	4938      	ldr	r1, [pc, #224]	@ (80046dc <app_update+0x1ac>)
 80045fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004600:	4613      	mov	r3, r2
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	4413      	add	r3, r2
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	440b      	add	r3, r1
 800460a:	3314      	adds	r3, #20
 800460c:	6018      	str	r0, [r3, #0]
                if (dt_cycles > task_prof[i].wcet_cycles) {
 800460e:	4933      	ldr	r1, [pc, #204]	@ (80046dc <app_update+0x1ac>)
 8004610:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004614:	4613      	mov	r3, r2
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	4413      	add	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	440b      	add	r3, r1
 800461e:	3308      	adds	r3, #8
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004624:	4293      	cmp	r3, r2
 8004626:	d917      	bls.n	8004658 <app_update+0x128>
                    task_prof[i].wcet_cycles = dt_cycles;
 8004628:	492c      	ldr	r1, [pc, #176]	@ (80046dc <app_update+0x1ac>)
 800462a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800462e:	4613      	mov	r3, r2
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	4413      	add	r3, r2
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	440b      	add	r3, r1
 8004638:	f103 0208 	add.w	r2, r3, #8
 800463c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800463e:	6013      	str	r3, [r2, #0]
                    task_prof[i].wcet_us     = dt_us;
 8004640:	4926      	ldr	r1, [pc, #152]	@ (80046dc <app_update+0x1ac>)
 8004642:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004646:	4613      	mov	r3, r2
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	4413      	add	r3, r2
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	440b      	add	r3, r1
 8004650:	f103 0210 	add.w	r2, r3, #16
 8004654:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004656:	6013      	str	r3, [r2, #0]
        for (uint32_t i = 0; i < TASK_QTY; i++) {
 8004658:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800465c:	3301      	adds	r3, #1
 800465e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004666:	2b02      	cmp	r3, #2
 8004668:	f67f af7d 	bls.w	8004566 <app_update+0x36>
                }
            }
        }

        uint32_t tick_dt_cycles = dwt_get_cycles() - tick_start;
 800466c:	f7ff fb3c 	bl	8003ce8 <dwt_get_cycles>
 8004670:	4602      	mov	r2, r0
 8004672:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        uint32_t tick_dt_us     = cycles_to_us(tick_dt_cycles);
 800467c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8004680:	f7ff fb3c 	bl	8003cfc <cycles_to_us>
 8004684:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
        task_prof_total.last_cycles = tick_dt_cycles;
 8004688:	4a15      	ldr	r2, [pc, #84]	@ (80046e0 <app_update+0x1b0>)
 800468a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800468e:	6053      	str	r3, [r2, #4]
        task_prof_total.last_us     = tick_dt_us;
 8004690:	4a13      	ldr	r2, [pc, #76]	@ (80046e0 <app_update+0x1b0>)
 8004692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004696:	60d3      	str	r3, [r2, #12]
        task_prof_total.calls++;
 8004698:	4b11      	ldr	r3, [pc, #68]	@ (80046e0 <app_update+0x1b0>)
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	4b10      	ldr	r3, [pc, #64]	@ (80046e0 <app_update+0x1b0>)
 80046a0:	615a      	str	r2, [r3, #20]
        if (tick_dt_cycles > task_prof_total.wcet_cycles) {
 80046a2:	4b0f      	ldr	r3, [pc, #60]	@ (80046e0 <app_update+0x1b0>)
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d907      	bls.n	80046be <app_update+0x18e>
            task_prof_total.wcet_cycles = tick_dt_cycles;
 80046ae:	4a0c      	ldr	r2, [pc, #48]	@ (80046e0 <app_update+0x1b0>)
 80046b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80046b4:	6093      	str	r3, [r2, #8]
            task_prof_total.wcet_us     = tick_dt_us;
 80046b6:	4a0a      	ldr	r2, [pc, #40]	@ (80046e0 <app_update+0x1b0>)
 80046b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046bc:	6113      	str	r3, [r2, #16]
        }

        /* CPU usage */
        uint32_t tick_us = (tick_us_cal ? tick_us_cal : systick_period_us_reg());
 80046be:	4b09      	ldr	r3, [pc, #36]	@ (80046e4 <app_update+0x1b4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d110      	bne.n	80046e8 <app_update+0x1b8>
 80046c6:	f7ff fb6f 	bl	8003da8 <systick_period_us_reg>
 80046ca:	4603      	mov	r3, r0
 80046cc:	e00e      	b.n	80046ec <app_update+0x1bc>
 80046ce:	bf00      	nop
 80046d0:	2000037c 	.word	0x2000037c
 80046d4:	20000378 	.word	0x20000378
 80046d8:	08007a04 	.word	0x08007a04
 80046dc:	20000244 	.word	0x20000244
 80046e0:	2000000c 	.word	0x2000000c
 80046e4:	2000036c 	.word	0x2000036c
 80046e8:	4bb3      	ldr	r3, [pc, #716]	@ (80049b8 <app_update+0x488>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        if (tick_us > 0) {
 80046f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 8173 	beq.w	80049e0 <app_update+0x4b0>
            cpu_use_inst_tenths = (uint32_t)(( (uint64_t)task_prof_total.last_us * 1000ull + tick_us/2 ) / tick_us);
 80046fa:	4bb0      	ldr	r3, [pc, #704]	@ (80049bc <app_update+0x48c>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	673b      	str	r3, [r7, #112]	@ 0x70
 8004702:	677a      	str	r2, [r7, #116]	@ 0x74
 8004704:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004708:	f04f 0000 	mov.w	r0, #0
 800470c:	f04f 0100 	mov.w	r1, #0
 8004710:	0159      	lsls	r1, r3, #5
 8004712:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004716:	0150      	lsls	r0, r2, #5
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004720:	4684      	mov	ip, r0
 8004722:	ebb2 040c 	subs.w	r4, r2, ip
 8004726:	468c      	mov	ip, r1
 8004728:	eb63 050c 	sbc.w	r5, r3, ip
 800472c:	f04f 0200 	mov.w	r2, #0
 8004730:	f04f 0300 	mov.w	r3, #0
 8004734:	00ab      	lsls	r3, r5, #2
 8004736:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800473a:	00a2      	lsls	r2, r4, #2
 800473c:	4614      	mov	r4, r2
 800473e:	461d      	mov	r5, r3
 8004740:	4603      	mov	r3, r0
 8004742:	18e3      	adds	r3, r4, r3
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	460b      	mov	r3, r1
 8004748:	eb45 0303 	adc.w	r3, r5, r3
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	f04f 0300 	mov.w	r3, #0
 8004756:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800475a:	4629      	mov	r1, r5
 800475c:	00cb      	lsls	r3, r1, #3
 800475e:	4620      	mov	r0, r4
 8004760:	4629      	mov	r1, r5
 8004762:	4604      	mov	r4, r0
 8004764:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004768:	4601      	mov	r1, r0
 800476a:	00ca      	lsls	r2, r1, #3
 800476c:	4610      	mov	r0, r2
 800476e:	4619      	mov	r1, r3
 8004770:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004774:	085b      	lsrs	r3, r3, #1
 8004776:	2200      	movs	r2, #0
 8004778:	66bb      	str	r3, [r7, #104]	@ 0x68
 800477a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800477c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8004780:	4623      	mov	r3, r4
 8004782:	18c3      	adds	r3, r0, r3
 8004784:	663b      	str	r3, [r7, #96]	@ 0x60
 8004786:	462b      	mov	r3, r5
 8004788:	eb41 0303 	adc.w	r3, r1, r3
 800478c:	667b      	str	r3, [r7, #100]	@ 0x64
 800478e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004792:	2200      	movs	r2, #0
 8004794:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004796:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004798:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800479c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80047a0:	f7fb ffe0 	bl	8000764 <__aeabi_uldivmod>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	4b85      	ldr	r3, [pc, #532]	@ (80049c0 <app_update+0x490>)
 80047aa:	601a      	str	r2, [r3, #0]
            cpu_use_ema_tenths = ( (cpu_use_ema_tenths * (100 - EMA_ALPHA_PCT)) +
 80047ac:	4b85      	ldr	r3, [pc, #532]	@ (80049c4 <app_update+0x494>)
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	235a      	movs	r3, #90	@ 0x5a
 80047b2:	fb03 f102 	mul.w	r1, r3, r2
                                   (cpu_use_inst_tenths * EMA_ALPHA_PCT) + 50 ) / 100;
 80047b6:	4b82      	ldr	r3, [pc, #520]	@ (80049c0 <app_update+0x490>)
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	4613      	mov	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	005b      	lsls	r3, r3, #1
            cpu_use_ema_tenths = ( (cpu_use_ema_tenths * (100 - EMA_ALPHA_PCT)) +
 80047c2:	440b      	add	r3, r1
                                   (cpu_use_inst_tenths * EMA_ALPHA_PCT) + 50 ) / 100;
 80047c4:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80047c8:	4b7f      	ldr	r3, [pc, #508]	@ (80049c8 <app_update+0x498>)
 80047ca:	fba3 2302 	umull	r2, r3, r3, r2
 80047ce:	095a      	lsrs	r2, r3, #5
            cpu_use_ema_tenths = ( (cpu_use_ema_tenths * (100 - EMA_ALPHA_PCT)) +
 80047d0:	4b7c      	ldr	r3, [pc, #496]	@ (80049c4 <app_update+0x494>)
 80047d2:	601a      	str	r2, [r3, #0]
            uint32_t wcet_tenths = (uint32_t)(( (uint64_t)task_prof_total.wcet_us * 1000ull + tick_us/2 ) / tick_us);
 80047d4:	4b79      	ldr	r3, [pc, #484]	@ (80049bc <app_update+0x48c>)
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	2200      	movs	r2, #0
 80047da:	653b      	str	r3, [r7, #80]	@ 0x50
 80047dc:	657a      	str	r2, [r7, #84]	@ 0x54
 80047de:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80047e2:	4622      	mov	r2, r4
 80047e4:	462b      	mov	r3, r5
 80047e6:	f04f 0000 	mov.w	r0, #0
 80047ea:	f04f 0100 	mov.w	r1, #0
 80047ee:	0159      	lsls	r1, r3, #5
 80047f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047f4:	0150      	lsls	r0, r2, #5
 80047f6:	4602      	mov	r2, r0
 80047f8:	460b      	mov	r3, r1
 80047fa:	4620      	mov	r0, r4
 80047fc:	4629      	mov	r1, r5
 80047fe:	4604      	mov	r4, r0
 8004800:	ebb2 0804 	subs.w	r8, r2, r4
 8004804:	460c      	mov	r4, r1
 8004806:	eb63 0904 	sbc.w	r9, r3, r4
 800480a:	f04f 0200 	mov.w	r2, #0
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8004816:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800481a:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800481e:	4690      	mov	r8, r2
 8004820:	4699      	mov	r9, r3
 8004822:	4603      	mov	r3, r0
 8004824:	eb18 0303 	adds.w	r3, r8, r3
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	460b      	mov	r3, r1
 800482c:	eb49 0303 	adc.w	r3, r9, r3
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	f04f 0300 	mov.w	r3, #0
 800483a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800483e:	4629      	mov	r1, r5
 8004840:	00cb      	lsls	r3, r1, #3
 8004842:	4620      	mov	r0, r4
 8004844:	4629      	mov	r1, r5
 8004846:	4604      	mov	r4, r0
 8004848:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800484c:	4601      	mov	r1, r0
 800484e:	00ca      	lsls	r2, r1, #3
 8004850:	4610      	mov	r0, r2
 8004852:	4619      	mov	r1, r3
 8004854:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004858:	085b      	lsrs	r3, r3, #1
 800485a:	2200      	movs	r2, #0
 800485c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800485e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004860:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004864:	4623      	mov	r3, r4
 8004866:	18c3      	adds	r3, r0, r3
 8004868:	643b      	str	r3, [r7, #64]	@ 0x40
 800486a:	462b      	mov	r3, r5
 800486c:	eb41 0303 	adc.w	r3, r1, r3
 8004870:	647b      	str	r3, [r7, #68]	@ 0x44
 8004872:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004876:	2200      	movs	r2, #0
 8004878:	63bb      	str	r3, [r7, #56]	@ 0x38
 800487a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800487c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004880:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8004884:	f7fb ff6e 	bl	8000764 <__aeabi_uldivmod>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4613      	mov	r3, r2
 800488e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
            if (wcet_tenths > cpu_use_max_tenths) cpu_use_max_tenths = wcet_tenths;
 8004892:	4b4e      	ldr	r3, [pc, #312]	@ (80049cc <app_update+0x49c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800489a:	429a      	cmp	r2, r3
 800489c:	d903      	bls.n	80048a6 <app_update+0x376>
 800489e:	4a4b      	ldr	r2, [pc, #300]	@ (80049cc <app_update+0x49c>)
 80048a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80048a4:	6013      	str	r3, [r2, #0]
            uint32_t old = win_buf[win_idx];
 80048a6:	4b4a      	ldr	r3, [pc, #296]	@ (80049d0 <app_update+0x4a0>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a4a      	ldr	r2, [pc, #296]	@ (80049d4 <app_update+0x4a4>)
 80048ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            win_buf[win_idx] = task_prof_total.last_us;
 80048b4:	4b46      	ldr	r3, [pc, #280]	@ (80049d0 <app_update+0x4a0>)
 80048b6:	6819      	ldr	r1, [r3, #0]
 80048b8:	4b40      	ldr	r3, [pc, #256]	@ (80049bc <app_update+0x48c>)
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	4b45      	ldr	r3, [pc, #276]	@ (80049d4 <app_update+0x4a4>)
 80048be:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            win_idx = (win_idx + 1) % CPU_WIN;
 80048c2:	4b43      	ldr	r3, [pc, #268]	@ (80049d0 <app_update+0x4a0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	1c59      	adds	r1, r3, #1
 80048c8:	4b3f      	ldr	r3, [pc, #252]	@ (80049c8 <app_update+0x498>)
 80048ca:	fba3 2301 	umull	r2, r3, r3, r1
 80048ce:	091b      	lsrs	r3, r3, #4
 80048d0:	2232      	movs	r2, #50	@ 0x32
 80048d2:	fb02 f303 	mul.w	r3, r2, r3
 80048d6:	1acb      	subs	r3, r1, r3
 80048d8:	4a3d      	ldr	r2, [pc, #244]	@ (80049d0 <app_update+0x4a0>)
 80048da:	6013      	str	r3, [r2, #0]
            win_sum_us = win_sum_us + task_prof_total.last_us - old;
 80048dc:	4b37      	ldr	r3, [pc, #220]	@ (80049bc <app_update+0x48c>)
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	4b3d      	ldr	r3, [pc, #244]	@ (80049d8 <app_update+0x4a8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	441a      	add	r2, r3
 80048e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	4a3a      	ldr	r2, [pc, #232]	@ (80049d8 <app_update+0x4a8>)
 80048ee:	6013      	str	r3, [r2, #0]
            cpu_use_win_tenths =
                (uint32_t)(((uint64_t)win_sum_us * 1000ull + (CPU_WIN*tick_us)/2) / (CPU_WIN * tick_us));
 80048f0:	4b39      	ldr	r3, [pc, #228]	@ (80049d8 <app_update+0x4a8>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2200      	movs	r2, #0
 80048f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80048f8:	637a      	str	r2, [r7, #52]	@ 0x34
 80048fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80048fe:	4622      	mov	r2, r4
 8004900:	462b      	mov	r3, r5
 8004902:	f04f 0000 	mov.w	r0, #0
 8004906:	f04f 0100 	mov.w	r1, #0
 800490a:	0159      	lsls	r1, r3, #5
 800490c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004910:	0150      	lsls	r0, r2, #5
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4620      	mov	r0, r4
 8004918:	4629      	mov	r1, r5
 800491a:	4604      	mov	r4, r0
 800491c:	ebb2 0a04 	subs.w	sl, r2, r4
 8004920:	460c      	mov	r4, r1
 8004922:	eb63 0b04 	sbc.w	fp, r3, r4
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	f04f 0300 	mov.w	r3, #0
 800492e:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8004932:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8004936:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800493a:	4692      	mov	sl, r2
 800493c:	469b      	mov	fp, r3
 800493e:	4603      	mov	r3, r0
 8004940:	eb1a 0303 	adds.w	r3, sl, r3
 8004944:	603b      	str	r3, [r7, #0]
 8004946:	460b      	mov	r3, r1
 8004948:	eb4b 0303 	adc.w	r3, fp, r3
 800494c:	607b      	str	r3, [r7, #4]
 800494e:	f04f 0200 	mov.w	r2, #0
 8004952:	f04f 0300 	mov.w	r3, #0
 8004956:	e9d7 4500 	ldrd	r4, r5, [r7]
 800495a:	4629      	mov	r1, r5
 800495c:	00cb      	lsls	r3, r1, #3
 800495e:	4620      	mov	r0, r4
 8004960:	4629      	mov	r1, r5
 8004962:	4604      	mov	r4, r0
 8004964:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004968:	4601      	mov	r1, r0
 800496a:	00ca      	lsls	r2, r1, #3
 800496c:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8004970:	2032      	movs	r0, #50	@ 0x32
 8004972:	fb00 f101 	mul.w	r1, r0, r1
 8004976:	0849      	lsrs	r1, r1, #1
 8004978:	2000      	movs	r0, #0
 800497a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800497c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800497e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8004982:	4621      	mov	r1, r4
 8004984:	1851      	adds	r1, r2, r1
 8004986:	6239      	str	r1, [r7, #32]
 8004988:	4629      	mov	r1, r5
 800498a:	eb43 0101 	adc.w	r1, r3, r1
 800498e:	6279      	str	r1, [r7, #36]	@ 0x24
 8004990:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004994:	2232      	movs	r2, #50	@ 0x32
 8004996:	fb02 f303 	mul.w	r3, r2, r3
 800499a:	2200      	movs	r2, #0
 800499c:	61bb      	str	r3, [r7, #24]
 800499e:	61fa      	str	r2, [r7, #28]
 80049a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80049a8:	f7fb fedc 	bl	8000764 <__aeabi_uldivmod>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
            cpu_use_win_tenths =
 80049b0:	4b0a      	ldr	r3, [pc, #40]	@ (80049dc <app_update+0x4ac>)
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	e017      	b.n	80049e6 <app_update+0x4b6>
 80049b6:	bf00      	nop
 80049b8:	2000036c 	.word	0x2000036c
 80049bc:	2000000c 	.word	0x2000000c
 80049c0:	2000028c 	.word	0x2000028c
 80049c4:	20000290 	.word	0x20000290
 80049c8:	51eb851f 	.word	0x51eb851f
 80049cc:	20000294 	.word	0x20000294
 80049d0:	20000364 	.word	0x20000364
 80049d4:	20000298 	.word	0x20000298
 80049d8:	20000360 	.word	0x20000360
 80049dc:	20000368 	.word	0x20000368
        } else {
            cpu_use_inst_tenths = 0;
 80049e0:	4b32      	ldr	r3, [pc, #200]	@ (8004aac <app_update+0x57c>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
        }

        static uint32_t cal_ticks = 0;
        if (++cal_ticks >= 1000) {
 80049e6:	4b32      	ldr	r3, [pc, #200]	@ (8004ab0 <app_update+0x580>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	3301      	adds	r3, #1
 80049ec:	4a30      	ldr	r2, [pc, #192]	@ (8004ab0 <app_update+0x580>)
 80049ee:	6013      	str	r3, [r2, #0]
 80049f0:	4b2f      	ldr	r3, [pc, #188]	@ (8004ab0 <app_update+0x580>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049f8:	d341      	bcc.n	8004a7e <app_update+0x54e>
            cal_ticks = 0;
 80049fa:	4b2d      	ldr	r3, [pc, #180]	@ (8004ab0 <app_update+0x580>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]
            uint32_t t1 = dwt_get_cycles();
 8004a00:	f7ff f972 	bl	8003ce8 <dwt_get_cycles>
 8004a04:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
            uint32_t dt_ticks = g_app_cnt - last_tick_cnt;
 8004a08:	4b2a      	ldr	r3, [pc, #168]	@ (8004ab4 <app_update+0x584>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8004ab8 <app_update+0x588>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            last_tick_cnt = g_app_cnt;
 8004a16:	4b27      	ldr	r3, [pc, #156]	@ (8004ab4 <app_update+0x584>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a27      	ldr	r2, [pc, #156]	@ (8004ab8 <app_update+0x588>)
 8004a1c:	6013      	str	r3, [r2, #0]
            if (dt_ticks > 0) {
 8004a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d02b      	beq.n	8004a7e <app_update+0x54e>
                uint32_t dt_us = cycles_to_us(t1 - tcal_t0);
 8004a26:	4b25      	ldr	r3, [pc, #148]	@ (8004abc <app_update+0x58c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff f963 	bl	8003cfc <cycles_to_us>
 8004a36:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
                tcal_t0 = t1;
 8004a3a:	4a20      	ldr	r2, [pc, #128]	@ (8004abc <app_update+0x58c>)
 8004a3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a40:	6013      	str	r3, [r2, #0]
                uint32_t new_tick_us = (dt_us + dt_ticks/2) / dt_ticks;
 8004a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a46:	085a      	lsrs	r2, r3, #1
 8004a48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a4c:	441a      	add	r2, r3
 8004a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                tick_us_cal = (tick_us_cal == 0) ? new_tick_us : (tick_us_cal*3 + new_tick_us)/4;
 8004a5a:	4b19      	ldr	r3, [pc, #100]	@ (8004ac0 <app_update+0x590>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d009      	beq.n	8004a76 <app_update+0x546>
 8004a62:	4b17      	ldr	r3, [pc, #92]	@ (8004ac0 <app_update+0x590>)
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	4613      	mov	r3, r2
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	441a      	add	r2, r3
 8004a6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a70:	4413      	add	r3, r2
 8004a72:	089b      	lsrs	r3, r3, #2
 8004a74:	e001      	b.n	8004a7a <app_update+0x54a>
 8004a76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a7a:	4a11      	ldr	r2, [pc, #68]	@ (8004ac0 <app_update+0x590>)
 8004a7c:	6013      	str	r3, [r2, #0]
            }
        }

        if ((++s_prof_tick % s_prof_dump_every) == 0) wcet_dump();
 8004a7e:	4b11      	ldr	r3, [pc, #68]	@ (8004ac4 <app_update+0x594>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3301      	adds	r3, #1
 8004a84:	4a0f      	ldr	r2, [pc, #60]	@ (8004ac4 <app_update+0x594>)
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	4b0e      	ldr	r3, [pc, #56]	@ (8004ac4 <app_update+0x594>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a0e      	ldr	r2, [pc, #56]	@ (8004ac8 <app_update+0x598>)
 8004a8e:	6812      	ldr	r2, [r2, #0]
 8004a90:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a94:	fb01 f202 	mul.w	r2, r1, r2
 8004a98:	1a9b      	subs	r3, r3, r2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <app_update+0x572>
 8004a9e:	f7ff fa9d 	bl	8003fdc <wcet_dump>
    }
}
 8004aa2:	bf00      	nop
 8004aa4:	37b0      	adds	r7, #176	@ 0xb0
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aac:	2000028c 	.word	0x2000028c
 8004ab0:	20000384 	.word	0x20000384
 8004ab4:	20000378 	.word	0x20000378
 8004ab8:	20000370 	.word	0x20000370
 8004abc:	20000374 	.word	0x20000374
 8004ac0:	2000036c 	.word	0x2000036c
 8004ac4:	20000380 	.word	0x20000380
 8004ac8:	20000024 	.word	0x20000024

08004acc <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
    g_app_tick_cnt++;
 8004ad0:	4b04      	ldr	r3, [pc, #16]	@ (8004ae4 <HAL_SYSTICK_Callback+0x18>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	4a03      	ldr	r2, [pc, #12]	@ (8004ae4 <HAL_SYSTICK_Callback+0x18>)
 8004ad8:	6013      	str	r3, [r2, #0]
}
 8004ada:	bf00      	nop
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bc80      	pop	{r7}
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	2000037c 	.word	0x2000037c

08004ae8 <cinta_inicializar>:
           (a->modo != b->modo);
}

// Inicializa todos los campos de la estructura Cinta en cero
void cinta_inicializar(Cinta *ptr)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
    ptr->velocidad = 0;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	701a      	strb	r2, [r3, #0]
    ptr->modo = 0;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	705a      	strb	r2, [r3, #1]
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bc80      	pop	{r7}
 8004b04:	4770      	bx	lr

08004b06 <cinta_set_velocidad>:

// Setters

void cinta_set_velocidad(Cinta *ptr, int8_t nueva_velocidad)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	460b      	mov	r3, r1
 8004b10:	70fb      	strb	r3, [r7, #3]
    ptr->velocidad = nueva_velocidad;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	78fa      	ldrb	r2, [r7, #3]
 8004b16:	701a      	strb	r2, [r3, #0]
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bc80      	pop	{r7}
 8004b20:	4770      	bx	lr

08004b22 <cinta_set_modo>:

void cinta_set_modo(Cinta *ptr, int8_t nuevo_modo)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	70fb      	strb	r3, [r7, #3]
    ptr->modo = nuevo_modo;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	78fa      	ldrb	r2, [r7, #3]
 8004b32:	705a      	strb	r2, [r3, #1]

    // Si se setea modo en 0 (Error), forzar velocidad a 0
    if (nuevo_modo == 0) {
 8004b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d102      	bne.n	8004b42 <cinta_set_modo+0x20>
        ptr->velocidad = 0;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	701a      	strb	r2, [r3, #0]
    }
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr

08004b4c <cinta_get_velocidad>:
// Getters

int8_t cinta_get_velocidad(Cinta *ptr)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
    return ptr->velocidad;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f993 3000 	ldrsb.w	r3, [r3]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bc80      	pop	{r7}
 8004b62:	4770      	bx	lr

08004b64 <cinta_get_modo>:

int8_t cinta_get_modo(Cinta *ptr)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
    return ptr->modo;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f993 3001 	ldrsb.w	r3, [r3, #1]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr

08004b7c <delay_us>:
static void displayPinWrite(uint8_t pinName, int value);
static void displayDataBusWrite(uint8_t dataByte);
static void displayCodeWrite(bool type, uint8_t dataBus);

/* Delay en microsegundos usando DWT->CYCCNT (DWT habilitado en app_init) */
static inline void delay_us(uint32_t us) {
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 8004b84:	4b0d      	ldr	r3, [pc, #52]	@ (8004bbc <delay_us+0x40>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = (SystemCoreClock/1000000U) * us;
 8004b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc0 <delay_us+0x44>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a0d      	ldr	r2, [pc, #52]	@ (8004bc4 <delay_us+0x48>)
 8004b90:	fba2 2303 	umull	r2, r3, r2, r3
 8004b94:	0c9a      	lsrs	r2, r3, #18
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	fb02 f303 	mul.w	r3, r2, r3
 8004b9c:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks) { __NOP(); }
 8004b9e:	e000      	b.n	8004ba2 <delay_us+0x26>
 8004ba0:	bf00      	nop
 8004ba2:	4b06      	ldr	r3, [pc, #24]	@ (8004bbc <delay_us+0x40>)
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d8f7      	bhi.n	8004ba0 <delay_us+0x24>
}
 8004bb0:	bf00      	nop
 8004bb2:	bf00      	nop
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr
 8004bbc:	e0001000 	.word	0xe0001000
 8004bc0:	20000000 	.word	0x20000000
 8004bc4:	431bde83 	.word	0x431bde83

08004bc8 <displayInit>:

/********************** external functions definition ************************/

void displayInit()
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
    display.connection = DISPLAY_CONNECTION_GPIO_4BITS;
 8004bcc:	4b27      	ldr	r3, [pc, #156]	@ (8004c6c <displayInit+0xa4>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	701a      	strb	r2, [r3, #0]
    initial8BitCommunicationIsCompleted = false;
 8004bd2:	4b27      	ldr	r3, [pc, #156]	@ (8004c70 <displayInit+0xa8>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	701a      	strb	r2, [r3, #0]

    /* Secuencia de init estándar (HD44780 datasheet) */
    delay_us(15000); // >15 ms después de VCC
 8004bd8:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8004bdc:	f7ff ffce 	bl	8004b7c <delay_us>

    // Function set (8 bits) x3
    displayCodeWrite(LCD_RS_COMMAND, LCD_CMD_FUNCTION_SET | LCD_CMD_FUNCTION_SET_8BITS);
 8004be0:	2130      	movs	r1, #48	@ 0x30
 8004be2:	2000      	movs	r0, #0
 8004be4:	f000 f89b 	bl	8004d1e <displayCodeWrite>
    delay_us(4100);
 8004be8:	f241 0004 	movw	r0, #4100	@ 0x1004
 8004bec:	f7ff ffc6 	bl	8004b7c <delay_us>
    displayCodeWrite(LCD_RS_COMMAND, LCD_CMD_FUNCTION_SET | LCD_CMD_FUNCTION_SET_8BITS);
 8004bf0:	2130      	movs	r1, #48	@ 0x30
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	f000 f893 	bl	8004d1e <displayCodeWrite>
    delay_us(100);
 8004bf8:	2064      	movs	r0, #100	@ 0x64
 8004bfa:	f7ff ffbf 	bl	8004b7c <delay_us>
    displayCodeWrite(LCD_RS_COMMAND, LCD_CMD_FUNCTION_SET | LCD_CMD_FUNCTION_SET_8BITS);
 8004bfe:	2130      	movs	r1, #48	@ 0x30
 8004c00:	2000      	movs	r0, #0
 8004c02:	f000 f88c 	bl	8004d1e <displayCodeWrite>
    delay_us(40);
 8004c06:	2028      	movs	r0, #40	@ 0x28
 8004c08:	f7ff ffb8 	bl	8004b7c <delay_us>

    // Pasar a 4 bits
    displayCodeWrite(LCD_RS_COMMAND, LCD_CMD_FUNCTION_SET | LCD_CMD_FUNCTION_SET_4BITS);
 8004c0c:	2120      	movs	r1, #32
 8004c0e:	2000      	movs	r0, #0
 8004c10:	f000 f885 	bl	8004d1e <displayCodeWrite>
    delay_us(40);
 8004c14:	2028      	movs	r0, #40	@ 0x28
 8004c16:	f7ff ffb1 	bl	8004b7c <delay_us>

    initial8BitCommunicationIsCompleted = true;
 8004c1a:	4b15      	ldr	r3, [pc, #84]	@ (8004c70 <displayInit+0xa8>)
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	701a      	strb	r2, [r3, #0]

    // Configuración 4 bits, 2 líneas, 5x8
    displayCodeWrite(LCD_RS_COMMAND,
 8004c20:	2128      	movs	r1, #40	@ 0x28
 8004c22:	2000      	movs	r0, #0
 8004c24:	f000 f87b 	bl	8004d1e <displayCodeWrite>
                     LCD_CMD_FUNCTION_SET |
                     LCD_CMD_FUNCTION_SET_4BITS |
                     LCD_CMD_FUNCTION_SET_2LINES |
                     LCD_CMD_FUNCTION_SET_5x8DOTS);
    delay_us(40);
 8004c28:	2028      	movs	r0, #40	@ 0x28
 8004c2a:	f7ff ffa7 	bl	8004b7c <delay_us>

    // Display OFF, cursor/blink OFF
    displayCodeWrite(LCD_RS_COMMAND,
 8004c2e:	2108      	movs	r1, #8
 8004c30:	2000      	movs	r0, #0
 8004c32:	f000 f874 	bl	8004d1e <displayCodeWrite>
                     LCD_CMD_DISPLAY_CTRL |
                     LCD_CMD_DISPLAY_CTRL_DISPLAY_OFF |
                     LCD_CMD_DISPLAY_CTRL_CURSOR_OFF |
                     LCD_CMD_DISPLAY_CTRL_BLINK_OFF);
    delay_us(40);
 8004c36:	2028      	movs	r0, #40	@ 0x28
 8004c38:	f7ff ffa0 	bl	8004b7c <delay_us>

    // Clear (comando “lento”)
    displayCodeWrite(LCD_RS_COMMAND, LCD_CMD_CLEAR);
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	2000      	movs	r0, #0
 8004c40:	f000 f86d 	bl	8004d1e <displayCodeWrite>
    delay_us(1600);
 8004c44:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8004c48:	f7ff ff98 	bl	8004b7c <delay_us>

    // Entry mode: incrementar, no shift
    displayCodeWrite(LCD_RS_COMMAND,
 8004c4c:	2106      	movs	r1, #6
 8004c4e:	2000      	movs	r0, #0
 8004c50:	f000 f865 	bl	8004d1e <displayCodeWrite>
                     LCD_CMD_ENTRY_MODE |
                     LCD_CMD_ENTRY_MODE_SET_INCREMENT |
                     LCD_CMD_ENTRY_MODE_SET_NO_SHIFT);
    delay_us(40);
 8004c54:	2028      	movs	r0, #40	@ 0x28
 8004c56:	f7ff ff91 	bl	8004b7c <delay_us>

    // Display ON
    displayCodeWrite(LCD_RS_COMMAND,
 8004c5a:	210c      	movs	r1, #12
 8004c5c:	2000      	movs	r0, #0
 8004c5e:	f000 f85e 	bl	8004d1e <displayCodeWrite>
                     LCD_CMD_DISPLAY_CTRL |
                     LCD_CMD_DISPLAY_CTRL_DISPLAY_ON |
                     LCD_CMD_DISPLAY_CTRL_CURSOR_OFF |
                     LCD_CMD_DISPLAY_CTRL_BLINK_OFF);
    delay_us(40);
 8004c62:	2028      	movs	r0, #40	@ 0x28
 8004c64:	f7ff ff8a 	bl	8004b7c <delay_us>
}
 8004c68:	bf00      	nop
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20000388 	.word	0x20000388
 8004c70:	20000389 	.word	0x20000389

08004c74 <displayCharPositionWrite>:

void displayCharPositionWrite(uint8_t charPositionX, uint8_t charPositionY)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	460a      	mov	r2, r1
 8004c7e:	71fb      	strb	r3, [r7, #7]
 8004c80:	4613      	mov	r3, r2
 8004c82:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = 0;
 8004c84:	2300      	movs	r3, #0
 8004c86:	73fb      	strb	r3, [r7, #15]
    switch (charPositionY) {
 8004c88:	79bb      	ldrb	r3, [r7, #6]
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	d816      	bhi.n	8004cbc <displayCharPositionWrite+0x48>
 8004c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c94 <displayCharPositionWrite+0x20>)
 8004c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c94:	08004ca5 	.word	0x08004ca5
 8004c98:	08004cab 	.word	0x08004cab
 8004c9c:	08004cb1 	.word	0x08004cb1
 8004ca0:	08004cb7 	.word	0x08004cb7
        case 0: addr = LCD_20X4_LINE1_DDRAM_ADDR; break;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	73fb      	strb	r3, [r7, #15]
 8004ca8:	e00b      	b.n	8004cc2 <displayCharPositionWrite+0x4e>
        case 1: addr = LCD_20X4_LINE2_DDRAM_ADDR; break;
 8004caa:	2340      	movs	r3, #64	@ 0x40
 8004cac:	73fb      	strb	r3, [r7, #15]
 8004cae:	e008      	b.n	8004cc2 <displayCharPositionWrite+0x4e>
        case 2: addr = LCD_20X4_LINE3_DDRAM_ADDR; break;
 8004cb0:	2314      	movs	r3, #20
 8004cb2:	73fb      	strb	r3, [r7, #15]
 8004cb4:	e005      	b.n	8004cc2 <displayCharPositionWrite+0x4e>
        case 3: addr = LCD_20X4_LINE4_DDRAM_ADDR; break;
 8004cb6:	2354      	movs	r3, #84	@ 0x54
 8004cb8:	73fb      	strb	r3, [r7, #15]
 8004cba:	e002      	b.n	8004cc2 <displayCharPositionWrite+0x4e>
        default: addr = LCD_20X4_LINE1_DDRAM_ADDR; break;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	73fb      	strb	r3, [r7, #15]
 8004cc0:	bf00      	nop
    }
    displayCodeWrite(LCD_RS_COMMAND, LCD_CMD_SET_DDRAM_ADDR | (addr + charPositionX));
 8004cc2:	7bfa      	ldrb	r2, [r7, #15]
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	b25b      	sxtb	r3, r3
 8004ccc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004cd0:	b25b      	sxtb	r3, r3
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	f000 f821 	bl	8004d1e <displayCodeWrite>
    delay_us(40);
 8004cdc:	2028      	movs	r0, #40	@ 0x28
 8004cde:	f7ff ff4d 	bl	8004b7c <delay_us>
}
 8004ce2:	bf00      	nop
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop

08004cec <displayStringWrite>:

void displayStringWrite(const char *str)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
    while (*str) {
 8004cf4:	e00a      	b.n	8004d0c <displayStringWrite+0x20>
        displayCodeWrite(LCD_RS_DATA, *str++);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	1c5a      	adds	r2, r3, #1
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	4619      	mov	r1, r3
 8004d00:	2001      	movs	r0, #1
 8004d02:	f000 f80c 	bl	8004d1e <displayCodeWrite>
        delay_us(40);  // tiempo típico instrucción “write data”
 8004d06:	2028      	movs	r0, #40	@ 0x28
 8004d08:	f7ff ff38 	bl	8004b7c <delay_us>
    while (*str) {
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1f0      	bne.n	8004cf6 <displayStringWrite+0xa>
    }
}
 8004d14:	bf00      	nop
 8004d16:	bf00      	nop
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <displayCodeWrite>:

/********************** internal functions definition ************************/

static void displayCodeWrite(bool type, uint8_t dataBus)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b082      	sub	sp, #8
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	4603      	mov	r3, r0
 8004d26:	460a      	mov	r2, r1
 8004d28:	71fb      	strb	r3, [r7, #7]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	71bb      	strb	r3, [r7, #6]
    // RS: 0 comando, 1 dato
    if (type == LCD_RS_COMMAND)
 8004d2e:	79fb      	ldrb	r3, [r7, #7]
 8004d30:	f083 0301 	eor.w	r3, r3, #1
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d004      	beq.n	8004d44 <displayCodeWrite+0x26>
        displayPinWrite(LCD_PIN_RS, LCD_RS_COMMAND);
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	2004      	movs	r0, #4
 8004d3e:	f000 f811 	bl	8004d64 <displayPinWrite>
 8004d42:	e003      	b.n	8004d4c <displayCodeWrite+0x2e>
    else
        displayPinWrite(LCD_PIN_RS, LCD_RS_DATA);
 8004d44:	2101      	movs	r1, #1
 8004d46:	2004      	movs	r0, #4
 8004d48:	f000 f80c 	bl	8004d64 <displayPinWrite>

    displayPinWrite(LCD_PIN_RW, LCD_RW_WRITE);
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	2005      	movs	r0, #5
 8004d50:	f000 f808 	bl	8004d64 <displayPinWrite>

    // Enviar byte en dos nibbles
    displayDataBusWrite(dataBus);
 8004d54:	79bb      	ldrb	r3, [r7, #6]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 f866 	bl	8004e28 <displayDataBusWrite>
}
 8004d5c:	bf00      	nop
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <displayPinWrite>:

static void displayPinWrite(uint8_t pinName, int value)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	6039      	str	r1, [r7, #0]
 8004d6e:	71fb      	strb	r3, [r7, #7]
    // Mapeo físico de pines (igual que tu versión anterior)
    switch (pinName) {
 8004d70:	79fb      	ldrb	r3, [r7, #7]
 8004d72:	3b04      	subs	r3, #4
 8004d74:	2b0a      	cmp	r3, #10
 8004d76:	d84c      	bhi.n	8004e12 <displayPinWrite+0xae>
 8004d78:	a201      	add	r2, pc, #4	@ (adr r2, 8004d80 <displayPinWrite+0x1c>)
 8004d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7e:	bf00      	nop
 8004d80:	08004df3 	.word	0x08004df3
 8004d84:	08004e13 	.word	0x08004e13
 8004d88:	08004e03 	.word	0x08004e03
 8004d8c:	08004e13 	.word	0x08004e13
 8004d90:	08004e13 	.word	0x08004e13
 8004d94:	08004e13 	.word	0x08004e13
 8004d98:	08004e13 	.word	0x08004e13
 8004d9c:	08004dad 	.word	0x08004dad
 8004da0:	08004dbf 	.word	0x08004dbf
 8004da4:	08004dd1 	.word	0x08004dd1
 8004da8:	08004de3 	.word	0x08004de3
        case LCD_PIN_D4: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, value); break; // D4 lógico -> PA10
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	461a      	mov	r2, r3
 8004db2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004db6:	4819      	ldr	r0, [pc, #100]	@ (8004e1c <displayPinWrite+0xb8>)
 8004db8:	f7fd f955 	bl	8002066 <HAL_GPIO_WritePin>
 8004dbc:	e02a      	b.n	8004e14 <displayPinWrite+0xb0>
        case LCD_PIN_D5: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  value); break; // D5 lógico -> PA8
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004dc8:	4814      	ldr	r0, [pc, #80]	@ (8004e1c <displayPinWrite+0xb8>)
 8004dca:	f7fd f94c 	bl	8002066 <HAL_GPIO_WritePin>
 8004dce:	e021      	b.n	8004e14 <displayPinWrite+0xb0>
        case LCD_PIN_D6: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  value); break; // D6 lógico -> PA9
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004dda:	4810      	ldr	r0, [pc, #64]	@ (8004e1c <displayPinWrite+0xb8>)
 8004ddc:	f7fd f943 	bl	8002066 <HAL_GPIO_WritePin>
 8004de0:	e018      	b.n	8004e14 <displayPinWrite+0xb0>
        case LCD_PIN_D7: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,  value); break; // D7 lógico -> PC7
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	461a      	mov	r2, r3
 8004de8:	2180      	movs	r1, #128	@ 0x80
 8004dea:	480d      	ldr	r0, [pc, #52]	@ (8004e20 <displayPinWrite+0xbc>)
 8004dec:	f7fd f93b 	bl	8002066 <HAL_GPIO_WritePin>
 8004df0:	e010      	b.n	8004e14 <displayPinWrite+0xb0>
        case LCD_PIN_RS: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,  value); break; // RS -> PB6
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	461a      	mov	r2, r3
 8004df8:	2140      	movs	r1, #64	@ 0x40
 8004dfa:	480a      	ldr	r0, [pc, #40]	@ (8004e24 <displayPinWrite+0xc0>)
 8004dfc:	f7fd f933 	bl	8002066 <HAL_GPIO_WritePin>
 8004e00:	e008      	b.n	8004e14 <displayPinWrite+0xb0>
        case LCD_PIN_EN: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,  value); break; // EN -> PA7
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	461a      	mov	r2, r3
 8004e08:	2180      	movs	r1, #128	@ 0x80
 8004e0a:	4804      	ldr	r0, [pc, #16]	@ (8004e1c <displayPinWrite+0xb8>)
 8004e0c:	f7fd f92b 	bl	8002066 <HAL_GPIO_WritePin>
 8004e10:	e000      	b.n	8004e14 <displayPinWrite+0xb0>
        case LCD_PIN_RW: /* no usado (write only) */ break;
        default: break;
 8004e12:	bf00      	nop
    }
}
 8004e14:	bf00      	nop
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40010800 	.word	0x40010800
 8004e20:	40011000 	.word	0x40011000
 8004e24:	40010c00 	.word	0x40010c00

08004e28 <displayDataBusWrite>:

static void displayDataBusWrite(uint8_t dataBus)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	71fb      	strb	r3, [r7, #7]
    // Nibble alto
    displayPinWrite(LCD_PIN_D7, (dataBus & 0x80) ? HIGH : LOW);
 8004e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e36:	11db      	asrs	r3, r3, #7
 8004e38:	b25b      	sxtb	r3, r3
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	4619      	mov	r1, r3
 8004e40:	200e      	movs	r0, #14
 8004e42:	f7ff ff8f 	bl	8004d64 <displayPinWrite>
    displayPinWrite(LCD_PIN_D6, (dataBus & 0x40) ? HIGH : LOW);
 8004e46:	79fb      	ldrb	r3, [r7, #7]
 8004e48:	119b      	asrs	r3, r3, #6
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	4619      	mov	r1, r3
 8004e50:	200d      	movs	r0, #13
 8004e52:	f7ff ff87 	bl	8004d64 <displayPinWrite>
    displayPinWrite(LCD_PIN_D5, (dataBus & 0x20) ? HIGH : LOW);
 8004e56:	79fb      	ldrb	r3, [r7, #7]
 8004e58:	115b      	asrs	r3, r3, #5
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	4619      	mov	r1, r3
 8004e60:	200c      	movs	r0, #12
 8004e62:	f7ff ff7f 	bl	8004d64 <displayPinWrite>
    displayPinWrite(LCD_PIN_D4, (dataBus & 0x10) ? HIGH : LOW);
 8004e66:	79fb      	ldrb	r3, [r7, #7]
 8004e68:	111b      	asrs	r3, r3, #4
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	4619      	mov	r1, r3
 8004e70:	200b      	movs	r0, #11
 8004e72:	f7ff ff77 	bl	8004d64 <displayPinWrite>

    displayPinWrite(LCD_PIN_EN, ON);
 8004e76:	2101      	movs	r1, #1
 8004e78:	2006      	movs	r0, #6
 8004e7a:	f7ff ff73 	bl	8004d64 <displayPinWrite>
    delay_us(2);
 8004e7e:	2002      	movs	r0, #2
 8004e80:	f7ff fe7c 	bl	8004b7c <delay_us>
    displayPinWrite(LCD_PIN_EN, OFF);
 8004e84:	2100      	movs	r1, #0
 8004e86:	2006      	movs	r0, #6
 8004e88:	f7ff ff6c 	bl	8004d64 <displayPinWrite>
    delay_us(2);
 8004e8c:	2002      	movs	r0, #2
 8004e8e:	f7ff fe75 	bl	8004b7c <delay_us>

    // Nibble bajo (solo tras completar init 4 bits)
    if (initial8BitCommunicationIsCompleted) {
 8004e92:	4b1a      	ldr	r3, [pc, #104]	@ (8004efc <displayDataBusWrite+0xd4>)
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d02c      	beq.n	8004ef4 <displayDataBusWrite+0xcc>
        displayPinWrite(LCD_PIN_D7, (dataBus & 0x08) ? HIGH : LOW);
 8004e9a:	79fb      	ldrb	r3, [r7, #7]
 8004e9c:	10db      	asrs	r3, r3, #3
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	200e      	movs	r0, #14
 8004ea6:	f7ff ff5d 	bl	8004d64 <displayPinWrite>
        displayPinWrite(LCD_PIN_D6, (dataBus & 0x04) ? HIGH : LOW);
 8004eaa:	79fb      	ldrb	r3, [r7, #7]
 8004eac:	109b      	asrs	r3, r3, #2
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	200d      	movs	r0, #13
 8004eb6:	f7ff ff55 	bl	8004d64 <displayPinWrite>
        displayPinWrite(LCD_PIN_D5, (dataBus & 0x02) ? HIGH : LOW);
 8004eba:	79fb      	ldrb	r3, [r7, #7]
 8004ebc:	105b      	asrs	r3, r3, #1
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	200c      	movs	r0, #12
 8004ec6:	f7ff ff4d 	bl	8004d64 <displayPinWrite>
        displayPinWrite(LCD_PIN_D4, (dataBus & 0x01) ? HIGH : LOW);
 8004eca:	79fb      	ldrb	r3, [r7, #7]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	200b      	movs	r0, #11
 8004ed4:	f7ff ff46 	bl	8004d64 <displayPinWrite>

        displayPinWrite(LCD_PIN_EN, ON);
 8004ed8:	2101      	movs	r1, #1
 8004eda:	2006      	movs	r0, #6
 8004edc:	f7ff ff42 	bl	8004d64 <displayPinWrite>
        delay_us(2);
 8004ee0:	2002      	movs	r0, #2
 8004ee2:	f7ff fe4b 	bl	8004b7c <delay_us>
        displayPinWrite(LCD_PIN_EN, OFF);
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	2006      	movs	r0, #6
 8004eea:	f7ff ff3b 	bl	8004d64 <displayPinWrite>
        delay_us(2);
 8004eee:	2002      	movs	r0, #2
 8004ef0:	f7ff fe44 	bl	8004b7c <delay_us>
    }
}
 8004ef4:	bf00      	nop
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	20000389 	.word	0x20000389

08004f00 <EPROM_WriteByte>:
#include "eprom.h"
#include "main.h"

bool EPROM_WriteByte(I2C_HandleTypeDef *hi2c, uint16_t mem_address, uint8_t data) {
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	807b      	strh	r3, [r7, #2]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	707b      	strb	r3, [r7, #1]
    uint8_t buf[3];
    buf[0] = (uint8_t)(mem_address >> 8);
 8004f10:	887b      	ldrh	r3, [r7, #2]
 8004f12:	0a1b      	lsrs	r3, r3, #8
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	733b      	strb	r3, [r7, #12]
    buf[1] = (uint8_t)(mem_address & 0xFF);
 8004f1a:	887b      	ldrh	r3, [r7, #2]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	737b      	strb	r3, [r7, #13]
    buf[2] = data;
 8004f20:	787b      	ldrb	r3, [r7, #1]
 8004f22:	73bb      	strb	r3, [r7, #14]

    if (HAL_I2C_Master_Transmit(hi2c, EPROM_I2C_ADDRESS, buf, 3, HAL_MAX_DELAY) != HAL_OK)
 8004f24:	f107 020c 	add.w	r2, r7, #12
 8004f28:	f04f 33ff 	mov.w	r3, #4294967295
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	2303      	movs	r3, #3
 8004f30:	21a0      	movs	r1, #160	@ 0xa0
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7fd fa16 	bl	8002364 <HAL_I2C_Master_Transmit>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <EPROM_WriteByte+0x42>
        return false;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e003      	b.n	8004f4a <EPROM_WriteByte+0x4a>

    HAL_Delay(EPROM_WRITE_DELAY_MS);
 8004f42:	2005      	movs	r0, #5
 8004f44:	f7fc f9be 	bl	80012c4 <HAL_Delay>
    return true;
 8004f48:	2301      	movs	r3, #1
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <EPROM_ReadByte>:

bool EPROM_ReadByte(I2C_HandleTypeDef *hi2c, uint16_t mem_address, uint8_t *data) {
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b088      	sub	sp, #32
 8004f56:	af02      	add	r7, sp, #8
 8004f58:	60f8      	str	r0, [r7, #12]
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	607a      	str	r2, [r7, #4]
 8004f5e:	817b      	strh	r3, [r7, #10]
    uint8_t addr[2];
    addr[0] = (uint8_t)(mem_address >> 8);
 8004f60:	897b      	ldrh	r3, [r7, #10]
 8004f62:	0a1b      	lsrs	r3, r3, #8
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	753b      	strb	r3, [r7, #20]
    addr[1] = (uint8_t)(mem_address & 0xFF);
 8004f6a:	897b      	ldrh	r3, [r7, #10]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	757b      	strb	r3, [r7, #21]

    if (HAL_I2C_Master_Transmit(hi2c, EPROM_I2C_ADDRESS, addr, 2, HAL_MAX_DELAY) != HAL_OK)
 8004f70:	f107 0214 	add.w	r2, r7, #20
 8004f74:	f04f 33ff 	mov.w	r3, #4294967295
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	21a0      	movs	r1, #160	@ 0xa0
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f7fd f9f0 	bl	8002364 <HAL_I2C_Master_Transmit>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <EPROM_ReadByte+0x3c>
        return false;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	e00e      	b.n	8004fac <EPROM_ReadByte+0x5a>

    if (HAL_I2C_Master_Receive(hi2c, EPROM_I2C_ADDRESS, data, 1, HAL_MAX_DELAY) != HAL_OK)
 8004f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	2301      	movs	r3, #1
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	21a0      	movs	r1, #160	@ 0xa0
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f7fd fae0 	bl	8002560 <HAL_I2C_Master_Receive>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <EPROM_ReadByte+0x58>
        return false;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	e000      	b.n	8004fac <EPROM_ReadByte+0x5a>

    return true;
 8004faa:	2301      	movs	r3, #1
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
	printf(msg);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f001 fbc3 	bl	8006748 <iprintf>
	fflush(stdout);
 8004fc2:	4b05      	ldr	r3, [pc, #20]	@ (8004fd8 <logger_log_print_+0x24>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f001 fae7 	bl	800659c <fflush>
}
 8004fce:	bf00      	nop
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	200000d4 	.word	0x200000d4

08004fdc <actuadores_init>:
/********************** Implementación ****************************************/
/**

 */
void actuadores_init(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
    for (int i = 0; i < LED_QTY; i++) {
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	607b      	str	r3, [r7, #4]
 8004fe6:	e02e      	b.n	8005046 <actuadores_init+0x6a>
        actuadores_dta[i].state = ST_LED_XX_OFF;
 8004fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8005058 <actuadores_init+0x7c>)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	4413      	add	r3, r2
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	711a      	strb	r2, [r3, #4]
        actuadores_dta[i].event = EV_LED_XX_TURN_OFF;
 8004ff4:	4a18      	ldr	r2, [pc, #96]	@ (8005058 <actuadores_init+0x7c>)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	4413      	add	r3, r2
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	715a      	strb	r2, [r3, #5]
        actuadores_dta[i].tick = 0;
 8005000:	4a15      	ldr	r2, [pc, #84]	@ (8005058 <actuadores_init+0x7c>)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2100      	movs	r1, #0
 8005006:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        actuadores_dta[i].flag = false;
 800500a:	4a13      	ldr	r2, [pc, #76]	@ (8005058 <actuadores_init+0x7c>)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	4413      	add	r3, r2
 8005012:	2200      	movs	r2, #0
 8005014:	719a      	strb	r2, [r3, #6]

        // Apagar físicamente el LED
        HAL_GPIO_WritePin(actuadores_cfg[i].gpio_port, actuadores_cfg[i].pin, actuadores_cfg[i].led_off);
 8005016:	4a11      	ldr	r2, [pc, #68]	@ (800505c <actuadores_init+0x80>)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	4413      	add	r3, r2
 800501e:	3304      	adds	r3, #4
 8005020:	6818      	ldr	r0, [r3, #0]
 8005022:	4a0e      	ldr	r2, [pc, #56]	@ (800505c <actuadores_init+0x80>)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	4413      	add	r3, r2
 800502a:	3308      	adds	r3, #8
 800502c:	8819      	ldrh	r1, [r3, #0]
 800502e:	4a0b      	ldr	r2, [pc, #44]	@ (800505c <actuadores_init+0x80>)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	4413      	add	r3, r2
 8005036:	330b      	adds	r3, #11
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	461a      	mov	r2, r3
 800503c:	f7fd f813 	bl	8002066 <HAL_GPIO_WritePin>
    for (int i = 0; i < LED_QTY; i++) {
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3301      	adds	r3, #1
 8005044:	607b      	str	r3, [r7, #4]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b02      	cmp	r3, #2
 800504a:	ddcd      	ble.n	8004fe8 <actuadores_init+0xc>
    }
}
 800504c:	bf00      	nop
 800504e:	bf00      	nop
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	200003d0 	.word	0x200003d0
 800505c:	08007a38 	.word	0x08007a38

08005060 <actuadores_update>:

/**

 */
void actuadores_update(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
    for (int i = 0; i < LED_QTY; i++) {
 8005066:	2300      	movs	r3, #0
 8005068:	60fb      	str	r3, [r7, #12]
 800506a:	e0b2      	b.n	80051d2 <actuadores_update+0x172>
        const task_actuator_cfg_t *cfg = &actuadores_cfg[i];
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	4a5c      	ldr	r2, [pc, #368]	@ (80051e4 <actuadores_update+0x184>)
 8005072:	4413      	add	r3, r2
 8005074:	60bb      	str	r3, [r7, #8]
        task_actuator_dta_t *dta = &actuadores_dta[i];
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	4a5b      	ldr	r2, [pc, #364]	@ (80051e8 <actuadores_update+0x188>)
 800507c:	4413      	add	r3, r2
 800507e:	607b      	str	r3, [r7, #4]

        switch (dta->state) {
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	791b      	ldrb	r3, [r3, #4]
 8005084:	2b02      	cmp	r3, #2
 8005086:	d050      	beq.n	800512a <actuadores_update+0xca>
 8005088:	2b02      	cmp	r3, #2
 800508a:	f300 8090 	bgt.w	80051ae <actuadores_update+0x14e>
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <actuadores_update+0x38>
 8005092:	2b01      	cmp	r3, #1
 8005094:	d029      	beq.n	80050ea <actuadores_update+0x8a>
 8005096:	e08a      	b.n	80051ae <actuadores_update+0x14e>
        case ST_LED_XX_OFF:
            if (dta->event == EV_LED_XX_TURN_ON) {
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	795b      	ldrb	r3, [r3, #5]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d10c      	bne.n	80050ba <actuadores_update+0x5a>
                HAL_GPIO_WritePin(cfg->gpio_port, cfg->pin, cfg->led_on);
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	6858      	ldr	r0, [r3, #4]
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	8919      	ldrh	r1, [r3, #8]
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	7a9b      	ldrb	r3, [r3, #10]
 80050ac:	461a      	mov	r2, r3
 80050ae:	f7fc ffda 	bl	8002066 <HAL_GPIO_WritePin>
                dta->state = ST_LED_XX_ON;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	711a      	strb	r2, [r3, #4]
                dta->tick = cfg->tick_blink;
                dta->flag = true;
                HAL_GPIO_WritePin(cfg->gpio_port, cfg->pin, cfg->led_on);
                dta->state = ST_LED_XX_BLINK;
            }
            break;
 80050b8:	e076      	b.n	80051a8 <actuadores_update+0x148>
            else if (dta->event == EV_LED_XX_BLINKING_ON) {
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	795b      	ldrb	r3, [r3, #5]
 80050be:	2b03      	cmp	r3, #3
 80050c0:	d172      	bne.n	80051a8 <actuadores_update+0x148>
                dta->tick = cfg->tick_blink;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	601a      	str	r2, [r3, #0]
                dta->flag = true;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	719a      	strb	r2, [r3, #6]
                HAL_GPIO_WritePin(cfg->gpio_port, cfg->pin, cfg->led_on);
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	6858      	ldr	r0, [r3, #4]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	8919      	ldrh	r1, [r3, #8]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	7a9b      	ldrb	r3, [r3, #10]
 80050dc:	461a      	mov	r2, r3
 80050de:	f7fc ffc2 	bl	8002066 <HAL_GPIO_WritePin>
                dta->state = ST_LED_XX_BLINK;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2202      	movs	r2, #2
 80050e6:	711a      	strb	r2, [r3, #4]
            break;
 80050e8:	e05e      	b.n	80051a8 <actuadores_update+0x148>

        case ST_LED_XX_ON:
            if (dta->event == EV_LED_XX_TURN_OFF) {
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	795b      	ldrb	r3, [r3, #5]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10c      	bne.n	800510c <actuadores_update+0xac>
                HAL_GPIO_WritePin(cfg->gpio_port, cfg->pin, cfg->led_off);
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	6858      	ldr	r0, [r3, #4]
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	8919      	ldrh	r1, [r3, #8]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	7adb      	ldrb	r3, [r3, #11]
 80050fe:	461a      	mov	r2, r3
 8005100:	f7fc ffb1 	bl	8002066 <HAL_GPIO_WritePin>
                dta->state = ST_LED_XX_OFF;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	711a      	strb	r2, [r3, #4]
            else if (dta->event == EV_LED_XX_BLINKING_ON) {
                dta->tick = cfg->tick_blink;
                dta->flag = true;
                dta->state = ST_LED_XX_BLINK;
            }
            break;
 800510a:	e04f      	b.n	80051ac <actuadores_update+0x14c>
            else if (dta->event == EV_LED_XX_BLINKING_ON) {
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	795b      	ldrb	r3, [r3, #5]
 8005110:	2b03      	cmp	r3, #3
 8005112:	d14b      	bne.n	80051ac <actuadores_update+0x14c>
                dta->tick = cfg->tick_blink;
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	601a      	str	r2, [r3, #0]
                dta->flag = true;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	719a      	strb	r2, [r3, #6]
                dta->state = ST_LED_XX_BLINK;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2202      	movs	r2, #2
 8005126:	711a      	strb	r2, [r3, #4]
            break;
 8005128:	e040      	b.n	80051ac <actuadores_update+0x14c>

        case ST_LED_XX_BLINK:
            if (dta->event == EV_LED_XX_BLINKING_OFF) {
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	795b      	ldrb	r3, [r3, #5]
 800512e:	2b02      	cmp	r3, #2
 8005130:	d10c      	bne.n	800514c <actuadores_update+0xec>
                HAL_GPIO_WritePin(cfg->gpio_port, cfg->pin, cfg->led_off);
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	6858      	ldr	r0, [r3, #4]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	8919      	ldrh	r1, [r3, #8]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	7adb      	ldrb	r3, [r3, #11]
 800513e:	461a      	mov	r2, r3
 8005140:	f7fc ff91 	bl	8002066 <HAL_GPIO_WritePin>
                dta->state = ST_LED_XX_OFF;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	711a      	strb	r2, [r3, #4]
                break;
 800514a:	e030      	b.n	80051ae <actuadores_update+0x14e>
            }

            if (dta->tick > 0) {
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d005      	beq.n	8005160 <actuadores_update+0x100>
                dta->tick--;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	1e5a      	subs	r2, r3, #1
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	601a      	str	r2, [r3, #0]
            } else {
                dta->tick = cfg->tick_blink;
                dta->flag = !dta->flag;
                HAL_GPIO_WritePin(cfg->gpio_port, cfg->pin, dta->flag ? cfg->led_on : cfg->led_off);
            }
            break;
 800515e:	e026      	b.n	80051ae <actuadores_update+0x14e>
                dta->tick = cfg->tick_blink;
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	601a      	str	r2, [r3, #0]
                dta->flag = !dta->flag;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	799b      	ldrb	r3, [r3, #6]
 800516c:	2b00      	cmp	r3, #0
 800516e:	bf14      	ite	ne
 8005170:	2301      	movne	r3, #1
 8005172:	2300      	moveq	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	f083 0301 	eor.w	r3, r3, #1
 800517a:	b2db      	uxtb	r3, r3
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	b2da      	uxtb	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	719a      	strb	r2, [r3, #6]
                HAL_GPIO_WritePin(cfg->gpio_port, cfg->pin, dta->flag ? cfg->led_on : cfg->led_off);
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	6858      	ldr	r0, [r3, #4]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	8919      	ldrh	r1, [r3, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	799b      	ldrb	r3, [r3, #6]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <actuadores_update+0x13c>
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	7a9b      	ldrb	r3, [r3, #10]
 800519a:	e001      	b.n	80051a0 <actuadores_update+0x140>
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	7adb      	ldrb	r3, [r3, #11]
 80051a0:	461a      	mov	r2, r3
 80051a2:	f7fc ff60 	bl	8002066 <HAL_GPIO_WritePin>
            break;
 80051a6:	e002      	b.n	80051ae <actuadores_update+0x14e>
            break;
 80051a8:	bf00      	nop
 80051aa:	e000      	b.n	80051ae <actuadores_update+0x14e>
            break;
 80051ac:	bf00      	nop
        }

        // Reset event para no re-procesarlo infinitamente
        dta->event = (dta->state == ST_LED_XX_OFF) ? EV_LED_XX_TURN_OFF :
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	791b      	ldrb	r3, [r3, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d007      	beq.n	80051c6 <actuadores_update+0x166>
                     (dta->state == ST_LED_XX_ON)  ? EV_LED_XX_TURN_ON :
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	791b      	ldrb	r3, [r3, #4]
        dta->event = (dta->state == ST_LED_XX_OFF) ? EV_LED_XX_TURN_OFF :
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d101      	bne.n	80051c2 <actuadores_update+0x162>
 80051be:	2301      	movs	r3, #1
 80051c0:	e002      	b.n	80051c8 <actuadores_update+0x168>
 80051c2:	2303      	movs	r3, #3
 80051c4:	e000      	b.n	80051c8 <actuadores_update+0x168>
 80051c6:	2300      	movs	r3, #0
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	7153      	strb	r3, [r2, #5]
    for (int i = 0; i < LED_QTY; i++) {
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	3301      	adds	r3, #1
 80051d0:	60fb      	str	r3, [r7, #12]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	f77f af49 	ble.w	800506c <actuadores_update+0xc>
                     EV_LED_XX_BLINKING_ON;
    }
}
 80051da:	bf00      	nop
 80051dc:	bf00      	nop
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	08007a38 	.word	0x08007a38
 80051e8:	200003d0 	.word	0x200003d0

080051ec <task_sensor_init>:
    {GPIOB, GPIO_PIN_13, false, false, 0, false}, // BTN_3
    {GPIOB, GPIO_PIN_12, false, false, 0, false}  // BTN_4
};

void task_sensor_init(void *parameters)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < BTN_QTY; i++) {
 80051f4:	2300      	movs	r3, #0
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	e01e      	b.n	8005238 <task_sensor_init+0x4c>
        botones[i].stable_state = false;
 80051fa:	4a14      	ldr	r2, [pc, #80]	@ (800524c <task_sensor_init+0x60>)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	4413      	add	r3, r2
 8005202:	3306      	adds	r3, #6
 8005204:	2200      	movs	r2, #0
 8005206:	701a      	strb	r2, [r3, #0]
        botones[i].last_state = false;
 8005208:	4a10      	ldr	r2, [pc, #64]	@ (800524c <task_sensor_init+0x60>)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	4413      	add	r3, r2
 8005210:	3307      	adds	r3, #7
 8005212:	2200      	movs	r2, #0
 8005214:	701a      	strb	r2, [r3, #0]
        botones[i].counter = 0;
 8005216:	4a0d      	ldr	r2, [pc, #52]	@ (800524c <task_sensor_init+0x60>)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	4413      	add	r3, r2
 800521e:	3308      	adds	r3, #8
 8005220:	2200      	movs	r2, #0
 8005222:	601a      	str	r2, [r3, #0]
        botones[i].edge_flag = false;
 8005224:	4a09      	ldr	r2, [pc, #36]	@ (800524c <task_sensor_init+0x60>)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	4413      	add	r3, r2
 800522c:	330c      	adds	r3, #12
 800522e:	2200      	movs	r2, #0
 8005230:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BTN_QTY; i++) {
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3301      	adds	r3, #1
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b03      	cmp	r3, #3
 800523c:	dddd      	ble.n	80051fa <task_sensor_init+0xe>
    }
}
 800523e:	bf00      	nop
 8005240:	bf00      	nop
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	bc80      	pop	{r7}
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	20000028 	.word	0x20000028

08005250 <task_sensor_update>:

void task_sensor_update(void *parameters)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < BTN_QTY; i++) {
 8005258:	2300      	movs	r3, #0
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	e05a      	b.n	8005314 <task_sensor_update+0xc4>
        bool raw = (HAL_GPIO_ReadPin(botones[i].port, botones[i].pin) == GPIO_PIN_RESET);
 800525e:	4a31      	ldr	r2, [pc, #196]	@ (8005324 <task_sensor_update+0xd4>)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	4413      	add	r3, r2
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	492e      	ldr	r1, [pc, #184]	@ (8005324 <task_sensor_update+0xd4>)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	440b      	add	r3, r1
 8005270:	3304      	adds	r3, #4
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	4619      	mov	r1, r3
 8005276:	4610      	mov	r0, r2
 8005278:	f7fc fede 	bl	8002038 <HAL_GPIO_ReadPin>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	bf0c      	ite	eq
 8005282:	2301      	moveq	r3, #1
 8005284:	2300      	movne	r3, #0
 8005286:	72fb      	strb	r3, [r7, #11]

        if (raw != botones[i].stable_state) {
 8005288:	4a26      	ldr	r2, [pc, #152]	@ (8005324 <task_sensor_update+0xd4>)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	4413      	add	r3, r2
 8005290:	3306      	adds	r3, #6
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	7afa      	ldrb	r2, [r7, #11]
 8005296:	429a      	cmp	r2, r3
 8005298:	d032      	beq.n	8005300 <task_sensor_update+0xb0>
            if (++botones[i].counter >= DEBOUNCE_TICKS) {
 800529a:	4a22      	ldr	r2, [pc, #136]	@ (8005324 <task_sensor_update+0xd4>)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	4413      	add	r3, r2
 80052a2:	3308      	adds	r3, #8
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	491e      	ldr	r1, [pc, #120]	@ (8005324 <task_sensor_update+0xd4>)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	440b      	add	r3, r1
 80052b0:	3308      	adds	r3, #8
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005324 <task_sensor_update+0xd4>)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	011b      	lsls	r3, r3, #4
 80052ba:	4413      	add	r3, r2
 80052bc:	3308      	adds	r3, #8
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d924      	bls.n	800530e <task_sensor_update+0xbe>
                botones[i].stable_state = raw;
 80052c4:	4a17      	ldr	r2, [pc, #92]	@ (8005324 <task_sensor_update+0xd4>)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	011b      	lsls	r3, r3, #4
 80052ca:	4413      	add	r3, r2
 80052cc:	3306      	adds	r3, #6
 80052ce:	7afa      	ldrb	r2, [r7, #11]
 80052d0:	701a      	strb	r2, [r3, #0]
                botones[i].counter = 0;
 80052d2:	4a14      	ldr	r2, [pc, #80]	@ (8005324 <task_sensor_update+0xd4>)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	4413      	add	r3, r2
 80052da:	3308      	adds	r3, #8
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]

                if (botones[i].stable_state) {
 80052e0:	4a10      	ldr	r2, [pc, #64]	@ (8005324 <task_sensor_update+0xd4>)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	4413      	add	r3, r2
 80052e8:	3306      	adds	r3, #6
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00e      	beq.n	800530e <task_sensor_update+0xbe>
                    botones[i].edge_flag = true; // Flanco DOWN
 80052f0:	4a0c      	ldr	r2, [pc, #48]	@ (8005324 <task_sensor_update+0xd4>)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	4413      	add	r3, r2
 80052f8:	330c      	adds	r3, #12
 80052fa:	2201      	movs	r2, #1
 80052fc:	701a      	strb	r2, [r3, #0]
 80052fe:	e006      	b.n	800530e <task_sensor_update+0xbe>
                }
            }
        } else {
            botones[i].counter = 0; // Solo reinicia si está igual
 8005300:	4a08      	ldr	r2, [pc, #32]	@ (8005324 <task_sensor_update+0xd4>)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	4413      	add	r3, r2
 8005308:	3308      	adds	r3, #8
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < BTN_QTY; i++) {
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	3301      	adds	r3, #1
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b03      	cmp	r3, #3
 8005318:	dda1      	ble.n	800525e <task_sensor_update+0xe>
        }
    }
}
 800531a:	bf00      	nop
 800531c:	bf00      	nop
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	20000028 	.word	0x20000028

08005328 <task_sensor_get_edge>:
{
    return botones[id].stable_state;
}

bool task_sensor_get_edge(task_sensor_id_t id)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	4603      	mov	r3, r0
 8005330:	71fb      	strb	r3, [r7, #7]
    if (botones[id].edge_flag) {
 8005332:	79fb      	ldrb	r3, [r7, #7]
 8005334:	4a0a      	ldr	r2, [pc, #40]	@ (8005360 <task_sensor_get_edge+0x38>)
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	4413      	add	r3, r2
 800533a:	330c      	adds	r3, #12
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d008      	beq.n	8005354 <task_sensor_get_edge+0x2c>
        botones[id].edge_flag = false; // Consumir evento
 8005342:	79fb      	ldrb	r3, [r7, #7]
 8005344:	4a06      	ldr	r2, [pc, #24]	@ (8005360 <task_sensor_get_edge+0x38>)
 8005346:	011b      	lsls	r3, r3, #4
 8005348:	4413      	add	r3, r2
 800534a:	330c      	adds	r3, #12
 800534c:	2200      	movs	r2, #0
 800534e:	701a      	strb	r2, [r3, #0]
        return true;
 8005350:	2301      	movs	r3, #1
 8005352:	e000      	b.n	8005356 <task_sensor_get_edge+0x2e>
    }
    return false;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	bc80      	pop	{r7}
 800535e:	4770      	bx	lr
 8005360:	20000028 	.word	0x20000028

08005364 <start_adc_it>:
static volatile sm_t s_state = ST_IDLE;
static volatile uint32_t s_next_tick = 0;

/* ---------- Helper: iniciar conversión por IT ---------- */
static bool start_adc_it(ADC_HandleTypeDef *hadc, uint32_t channel, uint32_t sample_time)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08a      	sub	sp, #40	@ 0x28
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
    if (!hadc) return false;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <start_adc_it+0x16>
 8005376:	2300      	movs	r3, #0
 8005378:	e01f      	b.n	80053ba <start_adc_it+0x56>
    ADC_ChannelConfTypeDef cfg = (ADC_ChannelConfTypeDef){0};
 800537a:	f107 031c 	add.w	r3, r7, #28
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	605a      	str	r2, [r3, #4]
 8005384:	609a      	str	r2, [r3, #8]
    cfg.Channel      = channel;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	61fb      	str	r3, [r7, #28]
    cfg.Rank         = ADC_REGULAR_RANK_1;
 800538a:	2301      	movs	r3, #1
 800538c:	623b      	str	r3, [r7, #32]
    cfg.SamplingTime = sample_time;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	627b      	str	r3, [r7, #36]	@ 0x24

    if (HAL_ADC_ConfigChannel(hadc, &cfg) != HAL_OK) return false;
 8005392:	f107 031c 	add.w	r3, r7, #28
 8005396:	4619      	mov	r1, r3
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f7fc fa19 	bl	80017d0 <HAL_ADC_ConfigChannel>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <start_adc_it+0x44>
 80053a4:	2300      	movs	r3, #0
 80053a6:	e008      	b.n	80053ba <start_adc_it+0x56>
    if (HAL_ADC_Start_IT(hadc) != HAL_OK)           return false;
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f7fc f887 	bl	80014bc <HAL_ADC_Start_IT>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <start_adc_it+0x54>
 80053b4:	2300      	movs	r3, #0
 80053b6:	e000      	b.n	80053ba <start_adc_it+0x56>
    return true;
 80053b8:	2301      	movs	r3, #1
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3728      	adds	r7, #40	@ 0x28
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
	...

080053c4 <sen_temp_init>:
void sen_temp_init(ADC_HandleTypeDef *hadc_int,
                   ADC_HandleTypeDef *hadc_ext,
                   uint32_t ext_chan,
                   uint32_t period_ms,
                   float vdda)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
 80053d0:	603b      	str	r3, [r7, #0]
    s_hadc_int  = hadc_int;
 80053d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005444 <sen_temp_init+0x80>)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6013      	str	r3, [r2, #0]
    s_hadc_ext  = hadc_ext;
 80053d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005448 <sen_temp_init+0x84>)
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	6013      	str	r3, [r2, #0]
    s_ext_chan  = ext_chan;
 80053de:	4a1b      	ldr	r2, [pc, #108]	@ (800544c <sen_temp_init+0x88>)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6013      	str	r3, [r2, #0]
    s_period_ms = (period_ms == 0) ? 100 : period_ms;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <sen_temp_init+0x2a>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	e000      	b.n	80053f0 <sen_temp_init+0x2c>
 80053ee:	2364      	movs	r3, #100	@ 0x64
 80053f0:	4a17      	ldr	r2, [pc, #92]	@ (8005450 <sen_temp_init+0x8c>)
 80053f2:	6013      	str	r3, [r2, #0]
    s_vdda      = (vdda > 0.0f) ? vdda : 3.3f;
 80053f4:	f04f 0100 	mov.w	r1, #0
 80053f8:	69b8      	ldr	r0, [r7, #24]
 80053fa:	f7fb f983 	bl	8000704 <__aeabi_fcmpgt>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <sen_temp_init+0x44>
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	e000      	b.n	800540a <sen_temp_init+0x46>
 8005408:	4b12      	ldr	r3, [pc, #72]	@ (8005454 <sen_temp_init+0x90>)
 800540a:	4a13      	ldr	r2, [pc, #76]	@ (8005458 <sen_temp_init+0x94>)
 800540c:	6013      	str	r3, [r2, #0]

    s_t_int = 0.0f;
 800540e:	4b13      	ldr	r3, [pc, #76]	@ (800545c <sen_temp_init+0x98>)
 8005410:	f04f 0200 	mov.w	r2, #0
 8005414:	601a      	str	r2, [r3, #0]
    s_t_ext = 0.0f;
 8005416:	4b12      	ldr	r3, [pc, #72]	@ (8005460 <sen_temp_init+0x9c>)
 8005418:	f04f 0200 	mov.w	r2, #0
 800541c:	601a      	str	r2, [r3, #0]
    s_new_int = s_new_ext = false;
 800541e:	2100      	movs	r1, #0
 8005420:	4b10      	ldr	r3, [pc, #64]	@ (8005464 <sen_temp_init+0xa0>)
 8005422:	460a      	mov	r2, r1
 8005424:	701a      	strb	r2, [r3, #0]
 8005426:	4b10      	ldr	r3, [pc, #64]	@ (8005468 <sen_temp_init+0xa4>)
 8005428:	460a      	mov	r2, r1
 800542a:	701a      	strb	r2, [r3, #0]

    s_state = ST_IDLE;
 800542c:	4b0f      	ldr	r3, [pc, #60]	@ (800546c <sen_temp_init+0xa8>)
 800542e:	2200      	movs	r2, #0
 8005430:	701a      	strb	r2, [r3, #0]
    s_next_tick = HAL_GetTick(); // arranca ya
 8005432:	f7fb ff3d 	bl	80012b0 <HAL_GetTick>
 8005436:	4603      	mov	r3, r0
 8005438:	4a0d      	ldr	r2, [pc, #52]	@ (8005470 <sen_temp_init+0xac>)
 800543a:	6013      	str	r3, [r2, #0]

    /* IMPORTANTE en CubeMX:
       - ADC1: habilitar "Temperature sensor" (TSVREFE) y usar SampleTime = 239.5 cycles.
       - ADC2: pin PA0 en Analog; Regular Channel = ADC_CHANNEL_0; SampleTime ~71.5 cycles.
    */
}
 800543c:	bf00      	nop
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	200003e8 	.word	0x200003e8
 8005448:	200003ec 	.word	0x200003ec
 800544c:	200003f0 	.word	0x200003f0
 8005450:	20000068 	.word	0x20000068
 8005454:	40533333 	.word	0x40533333
 8005458:	2000006c 	.word	0x2000006c
 800545c:	200003f4 	.word	0x200003f4
 8005460:	200003f8 	.word	0x200003f8
 8005464:	200003fd 	.word	0x200003fd
 8005468:	200003fc 	.word	0x200003fc
 800546c:	200003fe 	.word	0x200003fe
 8005470:	20000400 	.word	0x20000400

08005474 <sen_temp_update>:
{
    if (vdda > 2.4f && vdda < 3.6f) s_vdda = vdda;
}

void sen_temp_update(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 800547a:	f7fb ff19 	bl	80012b0 <HAL_GetTick>
 800547e:	6078      	str	r0, [r7, #4]

    switch (s_state)
 8005480:	4b2d      	ldr	r3, [pc, #180]	@ (8005538 <sen_temp_update+0xc4>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b04      	cmp	r3, #4
 8005488:	d852      	bhi.n	8005530 <sen_temp_update+0xbc>
 800548a:	a201      	add	r2, pc, #4	@ (adr r2, 8005490 <sen_temp_update+0x1c>)
 800548c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005490:	080054a5 	.word	0x080054a5
 8005494:	080054b9 	.word	0x080054b9
 8005498:	0800552b 	.word	0x0800552b
 800549c:	080054dd 	.word	0x080054dd
 80054a0:	0800552b 	.word	0x0800552b
    {
    case ST_IDLE:
        if ((int32_t)(now - s_next_tick) >= 0)
 80054a4:	4b25      	ldr	r3, [pc, #148]	@ (800553c <sen_temp_update+0xc8>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	db3e      	blt.n	800552e <sen_temp_update+0xba>
            s_state = ST_START_INT;
 80054b0:	4b21      	ldr	r3, [pc, #132]	@ (8005538 <sen_temp_update+0xc4>)
 80054b2:	2201      	movs	r2, #1
 80054b4:	701a      	strb	r2, [r3, #0]
        break;
 80054b6:	e03a      	b.n	800552e <sen_temp_update+0xba>

    case ST_START_INT:
        /* Interna: canal TEMPSENSOR con sample time largo */
        if (start_adc_it(s_hadc_int, ADC_CHANNEL_TEMPSENSOR, ADC_SAMPLETIME_239CYCLES_5))
 80054b8:	4b21      	ldr	r3, [pc, #132]	@ (8005540 <sen_temp_update+0xcc>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2207      	movs	r2, #7
 80054be:	2110      	movs	r1, #16
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7ff ff4f 	bl	8005364 <start_adc_it>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <sen_temp_update+0x60>
            s_state = ST_WAIT_INT;
 80054cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005538 <sen_temp_update+0xc4>)
 80054ce:	2202      	movs	r2, #2
 80054d0:	701a      	strb	r2, [r3, #0]
        else
            s_state = ST_START_EXT; // intenta externa si interna falló
        break;
 80054d2:	e02d      	b.n	8005530 <sen_temp_update+0xbc>
            s_state = ST_START_EXT; // intenta externa si interna falló
 80054d4:	4b18      	ldr	r3, [pc, #96]	@ (8005538 <sen_temp_update+0xc4>)
 80054d6:	2203      	movs	r2, #3
 80054d8:	701a      	strb	r2, [r3, #0]
        break;
 80054da:	e029      	b.n	8005530 <sen_temp_update+0xbc>
    case ST_WAIT_INT:
        /* ISR avanzará a START_EXT */
        break;

    case ST_START_EXT:
        if (s_hadc_ext) {
 80054dc:	4b19      	ldr	r3, [pc, #100]	@ (8005544 <sen_temp_update+0xd0>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d018      	beq.n	8005516 <sen_temp_update+0xa2>
            /* Externa (pot): sample time medio/alto según RC. */
            if (start_adc_it(s_hadc_ext, s_ext_chan, ADC_SAMPLETIME_71CYCLES_5))
 80054e4:	4b17      	ldr	r3, [pc, #92]	@ (8005544 <sen_temp_update+0xd0>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a17      	ldr	r2, [pc, #92]	@ (8005548 <sen_temp_update+0xd4>)
 80054ea:	6811      	ldr	r1, [r2, #0]
 80054ec:	2206      	movs	r2, #6
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7ff ff38 	bl	8005364 <start_adc_it>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <sen_temp_update+0x8e>
                s_state = ST_WAIT_EXT;
 80054fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005538 <sen_temp_update+0xc4>)
 80054fc:	2204      	movs	r2, #4
 80054fe:	701a      	strb	r2, [r3, #0]
            }
        } else {
            s_next_tick = now + s_period_ms;
            s_state = ST_IDLE;
        }
        break;
 8005500:	e016      	b.n	8005530 <sen_temp_update+0xbc>
                s_next_tick = now + s_period_ms;
 8005502:	4b12      	ldr	r3, [pc, #72]	@ (800554c <sen_temp_update+0xd8>)
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4413      	add	r3, r2
 800550a:	4a0c      	ldr	r2, [pc, #48]	@ (800553c <sen_temp_update+0xc8>)
 800550c:	6013      	str	r3, [r2, #0]
                s_state = ST_IDLE;
 800550e:	4b0a      	ldr	r3, [pc, #40]	@ (8005538 <sen_temp_update+0xc4>)
 8005510:	2200      	movs	r2, #0
 8005512:	701a      	strb	r2, [r3, #0]
        break;
 8005514:	e00c      	b.n	8005530 <sen_temp_update+0xbc>
            s_next_tick = now + s_period_ms;
 8005516:	4b0d      	ldr	r3, [pc, #52]	@ (800554c <sen_temp_update+0xd8>)
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4413      	add	r3, r2
 800551e:	4a07      	ldr	r2, [pc, #28]	@ (800553c <sen_temp_update+0xc8>)
 8005520:	6013      	str	r3, [r2, #0]
            s_state = ST_IDLE;
 8005522:	4b05      	ldr	r3, [pc, #20]	@ (8005538 <sen_temp_update+0xc4>)
 8005524:	2200      	movs	r2, #0
 8005526:	701a      	strb	r2, [r3, #0]
        break;
 8005528:	e002      	b.n	8005530 <sen_temp_update+0xbc>
        break;
 800552a:	bf00      	nop
 800552c:	e000      	b.n	8005530 <sen_temp_update+0xbc>
        break;
 800552e:	bf00      	nop

    case ST_WAIT_EXT:
        /* ISR volverá a IDLE y agenda próximo período */
        break;
    }
}
 8005530:	bf00      	nop
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	200003fe 	.word	0x200003fe
 800553c:	20000400 	.word	0x20000400
 8005540:	200003e8 	.word	0x200003e8
 8005544:	200003ec 	.word	0x200003ec
 8005548:	200003f0 	.word	0x200003f0
 800554c:	20000068 	.word	0x20000068

08005550 <sen_temp_get_internal>:

/* Getters (consumen el flag) */
bool sen_temp_get_internal(float *t_c)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
    if (!t_c) return false;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <sen_temp_get_internal+0x12>
 800555e:	2300      	movs	r3, #0
 8005560:	e00a      	b.n	8005578 <sen_temp_get_internal+0x28>
    bool had = s_new_int;
 8005562:	4b08      	ldr	r3, [pc, #32]	@ (8005584 <sen_temp_get_internal+0x34>)
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	73fb      	strb	r3, [r7, #15]
    s_new_int = false;
 8005568:	4b06      	ldr	r3, [pc, #24]	@ (8005584 <sen_temp_get_internal+0x34>)
 800556a:	2200      	movs	r2, #0
 800556c:	701a      	strb	r2, [r3, #0]
    *t_c = s_t_int;
 800556e:	4b06      	ldr	r3, [pc, #24]	@ (8005588 <sen_temp_get_internal+0x38>)
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	601a      	str	r2, [r3, #0]
    return had;
 8005576:	7bfb      	ldrb	r3, [r7, #15]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	bc80      	pop	{r7}
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	200003fc 	.word	0x200003fc
 8005588:	200003f4 	.word	0x200003f4

0800558c <sen_temp_get_external>:

bool sen_temp_get_external(float *t_0_100)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
    if (!t_0_100) return false;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <sen_temp_get_external+0x12>
 800559a:	2300      	movs	r3, #0
 800559c:	e00a      	b.n	80055b4 <sen_temp_get_external+0x28>
    bool had = s_new_ext;
 800559e:	4b08      	ldr	r3, [pc, #32]	@ (80055c0 <sen_temp_get_external+0x34>)
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	73fb      	strb	r3, [r7, #15]
    s_new_ext = false;
 80055a4:	4b06      	ldr	r3, [pc, #24]	@ (80055c0 <sen_temp_get_external+0x34>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	701a      	strb	r2, [r3, #0]
    *t_0_100 = s_t_ext;
 80055aa:	4b06      	ldr	r3, [pc, #24]	@ (80055c4 <sen_temp_get_external+0x38>)
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	601a      	str	r2, [r3, #0]
    return had;
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bc80      	pop	{r7}
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	200003fd 	.word	0x200003fd
 80055c4:	200003f8 	.word	0x200003f8

080055c8 <HAL_ADC_ConvCpltCallback>:

/* ---------- ISR de conversión completa ---------- */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
    uint16_t raw = HAL_ADC_GetValue(hadc);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7fc f829 	bl	8001628 <HAL_ADC_GetValue>
 80055d6:	4603      	mov	r3, r0
 80055d8:	81fb      	strh	r3, [r7, #14]

    if (hadc == s_hadc_int && (s_state == ST_WAIT_INT))
 80055da:	4b32      	ldr	r3, [pc, #200]	@ (80056a4 <HAL_ADC_ConvCpltCallback+0xdc>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d130      	bne.n	8005646 <HAL_ADC_ConvCpltCallback+0x7e>
 80055e4:	4b30      	ldr	r3, [pc, #192]	@ (80056a8 <HAL_ADC_ConvCpltCallback+0xe0>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d12b      	bne.n	8005646 <HAL_ADC_ConvCpltCallback+0x7e>
    {
        /* Interna (°C reales):
           T = (V25 - Vsense)/AVG_SLOPE + 25;  Vsense = raw * VDDA / 4095 */
        float Vsense = (raw * s_vdda) / ADC_FS;
 80055ee:	89fb      	ldrh	r3, [r7, #14]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fa fe77 	bl	80002e4 <__aeabi_i2f>
 80055f6:	4602      	mov	r2, r0
 80055f8:	4b2c      	ldr	r3, [pc, #176]	@ (80056ac <HAL_ADC_ConvCpltCallback+0xe4>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4619      	mov	r1, r3
 80055fe:	4610      	mov	r0, r2
 8005600:	f7fa fec4 	bl	800038c <__aeabi_fmul>
 8005604:	4603      	mov	r3, r0
 8005606:	492a      	ldr	r1, [pc, #168]	@ (80056b0 <HAL_ADC_ConvCpltCallback+0xe8>)
 8005608:	4618      	mov	r0, r3
 800560a:	f7fa ff73 	bl	80004f4 <__aeabi_fdiv>
 800560e:	4603      	mov	r3, r0
 8005610:	60bb      	str	r3, [r7, #8]
        s_t_int = ((V25 - Vsense) / AVG_SLOPE) + 25.0f;
 8005612:	68b9      	ldr	r1, [r7, #8]
 8005614:	4827      	ldr	r0, [pc, #156]	@ (80056b4 <HAL_ADC_ConvCpltCallback+0xec>)
 8005616:	f7fa fdaf 	bl	8000178 <__aeabi_fsub>
 800561a:	4603      	mov	r3, r0
 800561c:	4926      	ldr	r1, [pc, #152]	@ (80056b8 <HAL_ADC_ConvCpltCallback+0xf0>)
 800561e:	4618      	mov	r0, r3
 8005620:	f7fa ff68 	bl	80004f4 <__aeabi_fdiv>
 8005624:	4603      	mov	r3, r0
 8005626:	4925      	ldr	r1, [pc, #148]	@ (80056bc <HAL_ADC_ConvCpltCallback+0xf4>)
 8005628:	4618      	mov	r0, r3
 800562a:	f7fa fda7 	bl	800017c <__addsf3>
 800562e:	4603      	mov	r3, r0
 8005630:	461a      	mov	r2, r3
 8005632:	4b23      	ldr	r3, [pc, #140]	@ (80056c0 <HAL_ADC_ConvCpltCallback+0xf8>)
 8005634:	601a      	str	r2, [r3, #0]
        s_new_int = true;
 8005636:	4b23      	ldr	r3, [pc, #140]	@ (80056c4 <HAL_ADC_ConvCpltCallback+0xfc>)
 8005638:	2201      	movs	r2, #1
 800563a:	701a      	strb	r2, [r3, #0]

        /* Siguiente: externa */
        s_state = ST_START_EXT;
 800563c:	4b1a      	ldr	r3, [pc, #104]	@ (80056a8 <HAL_ADC_ConvCpltCallback+0xe0>)
 800563e:	2203      	movs	r2, #3
 8005640:	701a      	strb	r2, [r3, #0]
    {
 8005642:	bf00      	nop

        /* Agenda próximo ciclo y vuelve a IDLE */
        s_next_tick = HAL_GetTick() + s_period_ms;
        s_state = ST_IDLE;
    }
}
 8005644:	e029      	b.n	800569a <HAL_ADC_ConvCpltCallback+0xd2>
    else if (hadc == s_hadc_ext && (s_state == ST_WAIT_EXT))
 8005646:	4b20      	ldr	r3, [pc, #128]	@ (80056c8 <HAL_ADC_ConvCpltCallback+0x100>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	429a      	cmp	r2, r3
 800564e:	d124      	bne.n	800569a <HAL_ADC_ConvCpltCallback+0xd2>
 8005650:	4b15      	ldr	r3, [pc, #84]	@ (80056a8 <HAL_ADC_ConvCpltCallback+0xe0>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b04      	cmp	r3, #4
 8005658:	d11f      	bne.n	800569a <HAL_ADC_ConvCpltCallback+0xd2>
        s_t_ext = (raw * 100.0f) / ADC_FS;
 800565a:	89fb      	ldrh	r3, [r7, #14]
 800565c:	4618      	mov	r0, r3
 800565e:	f7fa fe41 	bl	80002e4 <__aeabi_i2f>
 8005662:	4603      	mov	r3, r0
 8005664:	4919      	ldr	r1, [pc, #100]	@ (80056cc <HAL_ADC_ConvCpltCallback+0x104>)
 8005666:	4618      	mov	r0, r3
 8005668:	f7fa fe90 	bl	800038c <__aeabi_fmul>
 800566c:	4603      	mov	r3, r0
 800566e:	4910      	ldr	r1, [pc, #64]	@ (80056b0 <HAL_ADC_ConvCpltCallback+0xe8>)
 8005670:	4618      	mov	r0, r3
 8005672:	f7fa ff3f 	bl	80004f4 <__aeabi_fdiv>
 8005676:	4603      	mov	r3, r0
 8005678:	461a      	mov	r2, r3
 800567a:	4b15      	ldr	r3, [pc, #84]	@ (80056d0 <HAL_ADC_ConvCpltCallback+0x108>)
 800567c:	601a      	str	r2, [r3, #0]
        s_new_ext = true;
 800567e:	4b15      	ldr	r3, [pc, #84]	@ (80056d4 <HAL_ADC_ConvCpltCallback+0x10c>)
 8005680:	2201      	movs	r2, #1
 8005682:	701a      	strb	r2, [r3, #0]
        s_next_tick = HAL_GetTick() + s_period_ms;
 8005684:	f7fb fe14 	bl	80012b0 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	4b13      	ldr	r3, [pc, #76]	@ (80056d8 <HAL_ADC_ConvCpltCallback+0x110>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4413      	add	r3, r2
 8005690:	4a12      	ldr	r2, [pc, #72]	@ (80056dc <HAL_ADC_ConvCpltCallback+0x114>)
 8005692:	6013      	str	r3, [r2, #0]
        s_state = ST_IDLE;
 8005694:	4b04      	ldr	r3, [pc, #16]	@ (80056a8 <HAL_ADC_ConvCpltCallback+0xe0>)
 8005696:	2200      	movs	r2, #0
 8005698:	701a      	strb	r2, [r3, #0]
}
 800569a:	bf00      	nop
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	200003e8 	.word	0x200003e8
 80056a8:	200003fe 	.word	0x200003fe
 80056ac:	2000006c 	.word	0x2000006c
 80056b0:	457ff000 	.word	0x457ff000
 80056b4:	3fb70a3d 	.word	0x3fb70a3d
 80056b8:	3b8ce704 	.word	0x3b8ce704
 80056bc:	41c80000 	.word	0x41c80000
 80056c0:	200003f4 	.word	0x200003f4
 80056c4:	200003fc 	.word	0x200003fc
 80056c8:	200003ec 	.word	0x200003ec
 80056cc:	42c80000 	.word	0x42c80000
 80056d0:	200003f8 	.word	0x200003f8
 80056d4:	200003fd 	.word	0x200003fd
 80056d8:	20000068 	.word	0x20000068
 80056dc:	20000400 	.word	0x20000400

080056e0 <dwt_cycles>:
#include <task_sensor_temperature.h>
#include <task_system.h>
#include "logger.h"

/* === Helpers DWT (app_init ya habilita DWT->CYCCNT) === */
static inline uint32_t dwt_cycles(void) { return DWT->CYCCNT; }
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	4b02      	ldr	r3, [pc, #8]	@ (80056f0 <dwt_cycles+0x10>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	4618      	mov	r0, r3
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bc80      	pop	{r7}
 80056ee:	4770      	bx	lr
 80056f0:	e0001000 	.word	0xe0001000

080056f4 <cycles_to_us>:
static inline uint32_t cycles_to_us(uint32_t cycles){
 80056f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056f8:	b088      	sub	sp, #32
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	61f8      	str	r0, [r7, #28]
    return (uint32_t)(((uint64_t)cycles * 1000000ull) / (uint64_t)SystemCoreClock);
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	2200      	movs	r2, #0
 8005702:	469a      	mov	sl, r3
 8005704:	4693      	mov	fp, r2
 8005706:	4652      	mov	r2, sl
 8005708:	465b      	mov	r3, fp
 800570a:	f04f 0000 	mov.w	r0, #0
 800570e:	f04f 0100 	mov.w	r1, #0
 8005712:	0159      	lsls	r1, r3, #5
 8005714:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005718:	0150      	lsls	r0, r2, #5
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	ebb2 040a 	subs.w	r4, r2, sl
 8005722:	eb63 050b 	sbc.w	r5, r3, fp
 8005726:	f04f 0200 	mov.w	r2, #0
 800572a:	f04f 0300 	mov.w	r3, #0
 800572e:	026b      	lsls	r3, r5, #9
 8005730:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8005734:	0262      	lsls	r2, r4, #9
 8005736:	4614      	mov	r4, r2
 8005738:	461d      	mov	r5, r3
 800573a:	eb14 080a 	adds.w	r8, r4, sl
 800573e:	eb45 090b 	adc.w	r9, r5, fp
 8005742:	f04f 0200 	mov.w	r2, #0
 8005746:	f04f 0300 	mov.w	r3, #0
 800574a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800574e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005752:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005756:	ebb2 0108 	subs.w	r1, r2, r8
 800575a:	6039      	str	r1, [r7, #0]
 800575c:	eb63 0309 	sbc.w	r3, r3, r9
 8005760:	607b      	str	r3, [r7, #4]
 8005762:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005766:	461a      	mov	r2, r3
 8005768:	eb12 020a 	adds.w	r2, r2, sl
 800576c:	613a      	str	r2, [r7, #16]
 800576e:	4623      	mov	r3, r4
 8005770:	eb43 030b 	adc.w	r3, r3, fp
 8005774:	617b      	str	r3, [r7, #20]
 8005776:	4b09      	ldr	r3, [pc, #36]	@ (800579c <cycles_to_us+0xa8>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2200      	movs	r2, #0
 800577c:	60bb      	str	r3, [r7, #8]
 800577e:	60fa      	str	r2, [r7, #12]
 8005780:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005784:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005788:	f7fa ffec 	bl	8000764 <__aeabi_uldivmod>
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4613      	mov	r3, r2
}
 8005792:	4618      	mov	r0, r3
 8005794:	3720      	adds	r7, #32
 8005796:	46bd      	mov	sp, r7
 8005798:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800579c:	20000000 	.word	0x20000000

080057a0 <sec_start>:
    [SEC_EE]    = { "EE",  0, 0, 0 },
    [SEC_LCD]   = { "LCD", 0, 0, 0 },
    [SEC_LED]   = { "LED", 0, 0, 0 },
};

static inline void sec_start(uint32_t *t0){ *t0 = dwt_cycles(); }
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	f7ff ff9a 	bl	80056e0 <dwt_cycles>
 80057ac:	4602      	mov	r2, r0
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	bf00      	nop
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
	...

080057bc <sec_end>:
static inline void sec_end(sec_id_t id, uint32_t t0){
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	4603      	mov	r3, r0
 80057c4:	6039      	str	r1, [r7, #0]
 80057c6:	71fb      	strb	r3, [r7, #7]
    uint32_t dt_us = cycles_to_us(dwt_cycles() - t0);
 80057c8:	f7ff ff8a 	bl	80056e0 <dwt_cycles>
 80057cc:	4602      	mov	r2, r0
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7ff ff8e 	bl	80056f4 <cycles_to_us>
 80057d8:	60f8      	str	r0, [r7, #12]
    g_sys_prof[id].last_us = dt_us;
 80057da:	79fb      	ldrb	r3, [r7, #7]
 80057dc:	4a12      	ldr	r2, [pc, #72]	@ (8005828 <sec_end+0x6c>)
 80057de:	011b      	lsls	r3, r3, #4
 80057e0:	4413      	add	r3, r2
 80057e2:	3304      	adds	r3, #4
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	601a      	str	r2, [r3, #0]
    g_sys_prof[id].calls++;
 80057e8:	79fb      	ldrb	r3, [r7, #7]
 80057ea:	490f      	ldr	r1, [pc, #60]	@ (8005828 <sec_end+0x6c>)
 80057ec:	011a      	lsls	r2, r3, #4
 80057ee:	440a      	add	r2, r1
 80057f0:	320c      	adds	r2, #12
 80057f2:	6812      	ldr	r2, [r2, #0]
 80057f4:	3201      	adds	r2, #1
 80057f6:	490c      	ldr	r1, [pc, #48]	@ (8005828 <sec_end+0x6c>)
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	440b      	add	r3, r1
 80057fc:	330c      	adds	r3, #12
 80057fe:	601a      	str	r2, [r3, #0]
    if (dt_us > g_sys_prof[id].wcet_us) g_sys_prof[id].wcet_us = dt_us;
 8005800:	79fb      	ldrb	r3, [r7, #7]
 8005802:	4a09      	ldr	r2, [pc, #36]	@ (8005828 <sec_end+0x6c>)
 8005804:	011b      	lsls	r3, r3, #4
 8005806:	4413      	add	r3, r2
 8005808:	3308      	adds	r3, #8
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	429a      	cmp	r2, r3
 8005810:	d906      	bls.n	8005820 <sec_end+0x64>
 8005812:	79fb      	ldrb	r3, [r7, #7]
 8005814:	4a04      	ldr	r2, [pc, #16]	@ (8005828 <sec_end+0x6c>)
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	4413      	add	r3, r2
 800581a:	3308      	adds	r3, #8
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	601a      	str	r2, [r3, #0]
}
 8005820:	bf00      	nop
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	20000070 	.word	0x20000070

0800582c <guardar_configuracion>:

/* --- UI throttle: solo LCD --- */
static uint32_t ui_next_ms = 0; // 0 = refresco inmediato

/* --- EEPROM helpers (cronometrados) --- */
static void guardar_configuracion(void){
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
    uint32_t t0; sec_start(&t0);
 8005832:	1d3b      	adds	r3, r7, #4
 8005834:	4618      	mov	r0, r3
 8005836:	f7ff ffb3 	bl	80057a0 <sec_start>
    if (cinta_get_modo(&cinta_actual) != 0) {
 800583a:	4810      	ldr	r0, [pc, #64]	@ (800587c <guardar_configuracion+0x50>)
 800583c:	f7ff f992 	bl	8004b64 <cinta_get_modo>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d010      	beq.n	8005868 <guardar_configuracion+0x3c>
        EPROM_WriteByte(&hi2c1, EEPROM_ADDR_MODO, (uint8_t)cinta_get_modo(&cinta_actual));
 8005846:	480d      	ldr	r0, [pc, #52]	@ (800587c <guardar_configuracion+0x50>)
 8005848:	f7ff f98c 	bl	8004b64 <cinta_get_modo>
 800584c:	4603      	mov	r3, r0
 800584e:	b2db      	uxtb	r3, r3
 8005850:	461a      	mov	r2, r3
 8005852:	2100      	movs	r1, #0
 8005854:	480a      	ldr	r0, [pc, #40]	@ (8005880 <guardar_configuracion+0x54>)
 8005856:	f7ff fb53 	bl	8004f00 <EPROM_WriteByte>
        EPROM_WriteByte(&hi2c1, EEPROM_ADDR_VEL,  (uint8_t)velocidad_guardada);
 800585a:	4b0a      	ldr	r3, [pc, #40]	@ (8005884 <guardar_configuracion+0x58>)
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	461a      	mov	r2, r3
 8005860:	2101      	movs	r1, #1
 8005862:	4807      	ldr	r0, [pc, #28]	@ (8005880 <guardar_configuracion+0x54>)
 8005864:	f7ff fb4c 	bl	8004f00 <EPROM_WriteByte>
    }
    sec_end(SEC_EE, t0);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4619      	mov	r1, r3
 800586c:	2002      	movs	r0, #2
 800586e:	f7ff ffa5 	bl	80057bc <sec_end>
}
 8005872:	bf00      	nop
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	20000404 	.word	0x20000404
 8005880:	200001a0 	.word	0x200001a0
 8005884:	20000406 	.word	0x20000406

08005888 <leer_configuracion>:

static void leer_configuracion(void){
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
    uint8_t modo_leido = 1;
 800588e:	2301      	movs	r3, #1
 8005890:	71fb      	strb	r3, [r7, #7]
    uint8_t vel_leida  = 0;
 8005892:	2300      	movs	r3, #0
 8005894:	71bb      	strb	r3, [r7, #6]
    EPROM_ReadByte(&hi2c1, EEPROM_ADDR_MODO, &modo_leido);
 8005896:	1dfb      	adds	r3, r7, #7
 8005898:	461a      	mov	r2, r3
 800589a:	2100      	movs	r1, #0
 800589c:	4816      	ldr	r0, [pc, #88]	@ (80058f8 <leer_configuracion+0x70>)
 800589e:	f7ff fb58 	bl	8004f52 <EPROM_ReadByte>
    EPROM_ReadByte(&hi2c1, EEPROM_ADDR_VEL,  &vel_leida);
 80058a2:	1dbb      	adds	r3, r7, #6
 80058a4:	461a      	mov	r2, r3
 80058a6:	2101      	movs	r1, #1
 80058a8:	4813      	ldr	r0, [pc, #76]	@ (80058f8 <leer_configuracion+0x70>)
 80058aa:	f7ff fb52 	bl	8004f52 <EPROM_ReadByte>

    if (modo_leido == 1 || modo_leido == 2)
 80058ae:	79fb      	ldrb	r3, [r7, #7]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d002      	beq.n	80058ba <leer_configuracion+0x32>
 80058b4:	79fb      	ldrb	r3, [r7, #7]
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d106      	bne.n	80058c8 <leer_configuracion+0x40>
        cinta_set_modo(&cinta_actual, (int8_t)modo_leido);
 80058ba:	79fb      	ldrb	r3, [r7, #7]
 80058bc:	b25b      	sxtb	r3, r3
 80058be:	4619      	mov	r1, r3
 80058c0:	480e      	ldr	r0, [pc, #56]	@ (80058fc <leer_configuracion+0x74>)
 80058c2:	f7ff f92e 	bl	8004b22 <cinta_set_modo>
 80058c6:	e003      	b.n	80058d0 <leer_configuracion+0x48>
    else
        cinta_set_modo(&cinta_actual, 1);
 80058c8:	2101      	movs	r1, #1
 80058ca:	480c      	ldr	r0, [pc, #48]	@ (80058fc <leer_configuracion+0x74>)
 80058cc:	f7ff f929 	bl	8004b22 <cinta_set_modo>

    velocidad_guardada = (vel_leida <= 2) ? vel_leida : 0;
 80058d0:	79bb      	ldrb	r3, [r7, #6]
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d801      	bhi.n	80058da <leer_configuracion+0x52>
 80058d6:	79bb      	ldrb	r3, [r7, #6]
 80058d8:	e000      	b.n	80058dc <leer_configuracion+0x54>
 80058da:	2300      	movs	r3, #0
 80058dc:	4a08      	ldr	r2, [pc, #32]	@ (8005900 <leer_configuracion+0x78>)
 80058de:	7013      	strb	r3, [r2, #0]
    cinta_set_velocidad(&cinta_actual, (int8_t)velocidad_guardada);
 80058e0:	4b07      	ldr	r3, [pc, #28]	@ (8005900 <leer_configuracion+0x78>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	b25b      	sxtb	r3, r3
 80058e6:	4619      	mov	r1, r3
 80058e8:	4804      	ldr	r0, [pc, #16]	@ (80058fc <leer_configuracion+0x74>)
 80058ea:	f7ff f90c 	bl	8004b06 <cinta_set_velocidad>
}
 80058ee:	bf00      	nop
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	200001a0 	.word	0x200001a0
 80058fc:	20000404 	.word	0x20000404
 8005900:	20000406 	.word	0x20000406

08005904 <task_sistema_init>:
}
#endif

/* === Init / Update === */
void task_sistema_init(void *params)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
    cinta_inicializar(&cinta_actual);
 800590c:	4811      	ldr	r0, [pc, #68]	@ (8005954 <task_sistema_init+0x50>)
 800590e:	f7ff f8eb 	bl	8004ae8 <cinta_inicializar>
    HAL_Delay(100);
 8005912:	2064      	movs	r0, #100	@ 0x64
 8005914:	f7fb fcd6 	bl	80012c4 <HAL_Delay>
    displayInit();
 8005918:	f7ff f956 	bl	8004bc8 <displayInit>

    leer_configuracion();
 800591c:	f7ff ffb4 	bl	8005888 <leer_configuracion>

    displayCharPositionWrite(0, 0);
 8005920:	2100      	movs	r1, #0
 8005922:	2000      	movs	r0, #0
 8005924:	f7ff f9a6 	bl	8004c74 <displayCharPositionWrite>
    displayStringWrite("Sistema Listo ");
 8005928:	480b      	ldr	r0, [pc, #44]	@ (8005958 <task_sistema_init+0x54>)
 800592a:	f7ff f9df 	bl	8004cec <displayStringWrite>
    displayCharPositionWrite(0, 1);
 800592e:	2101      	movs	r1, #1
 8005930:	2000      	movs	r0, #0
 8005932:	f7ff f99f 	bl	8004c74 <displayCharPositionWrite>
    displayStringWrite("Iniciando...");
 8005936:	4809      	ldr	r0, [pc, #36]	@ (800595c <task_sistema_init+0x58>)
 8005938:	f7ff f9d8 	bl	8004cec <displayStringWrite>
    HAL_Delay(300);
 800593c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8005940:	f7fb fcc0 	bl	80012c4 <HAL_Delay>

    ui_next_ms = 0; // primer refresh inmediato
 8005944:	4b06      	ldr	r3, [pc, #24]	@ (8005960 <task_sistema_init+0x5c>)
 8005946:	2200      	movs	r2, #0
 8005948:	601a      	str	r2, [r3, #0]
}
 800594a:	bf00      	nop
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20000404 	.word	0x20000404
 8005958:	0800795c 	.word	0x0800795c
 800595c:	0800796c 	.word	0x0800796c
 8005960:	20000414 	.word	0x20000414

08005964 <task_sistema_update>:

void task_sistema_update(void *params)
{
 8005964:	b590      	push	{r4, r7, lr}
 8005966:	b09f      	sub	sp, #124	@ 0x7c
 8005968:	af02      	add	r7, sp, #8
 800596a:	6078      	str	r0, [r7, #4]
    uint32_t t0;

    /* --- IN: Sensado no bloqueante --- */
    sec_start(&t0);
 800596c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005970:	4618      	mov	r0, r3
 8005972:	f7ff ff15 	bl	80057a0 <sec_start>
    sen_temp_update();
 8005976:	f7ff fd7d 	bl	8005474 <sen_temp_update>
    float ttmp;
    if (sen_temp_get_internal(&ttmp)) tin_c = ttmp;
 800597a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800597e:	4618      	mov	r0, r3
 8005980:	f7ff fde6 	bl	8005550 <sen_temp_get_internal>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d002      	beq.n	8005990 <task_sistema_update+0x2c>
 800598a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800598c:	4a98      	ldr	r2, [pc, #608]	@ (8005bf0 <task_sistema_update+0x28c>)
 800598e:	6013      	str	r3, [r2, #0]
    if (sen_temp_get_external(&ttmp)) tex_g = ttmp;
 8005990:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005994:	4618      	mov	r0, r3
 8005996:	f7ff fdf9 	bl	800558c <sen_temp_get_external>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <task_sistema_update+0x42>
 80059a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059a2:	4a94      	ldr	r2, [pc, #592]	@ (8005bf4 <task_sistema_update+0x290>)
 80059a4:	6013      	str	r3, [r2, #0]
    sec_end(SEC_IN, t0);
 80059a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80059a8:	4619      	mov	r1, r3
 80059aa:	2000      	movs	r0, #0
 80059ac:	f7ff ff06 	bl	80057bc <sec_end>

    /* --- LG: Lógica (protección + botones + FSM + resets) --- */
    sec_start(&t0);
 80059b0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7ff fef3 	bl	80057a0 <sec_start>

    // Protección por temperatura
    if ((tin_c > (float)TEMP_MAX) || (tex_g > (float)TEMP_MAX)) {
 80059ba:	4b8d      	ldr	r3, [pc, #564]	@ (8005bf0 <task_sistema_update+0x28c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	498e      	ldr	r1, [pc, #568]	@ (8005bf8 <task_sistema_update+0x294>)
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7fa fe9f 	bl	8000704 <__aeabi_fcmpgt>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d108      	bne.n	80059de <task_sistema_update+0x7a>
 80059cc:	4b89      	ldr	r3, [pc, #548]	@ (8005bf4 <task_sistema_update+0x290>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4989      	ldr	r1, [pc, #548]	@ (8005bf8 <task_sistema_update+0x294>)
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fa fe96 	bl	8000704 <__aeabi_fcmpgt>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d016      	beq.n	8005a0c <task_sistema_update+0xa8>
        if (cinta_get_modo(&cinta_actual) != 0) {
 80059de:	4887      	ldr	r0, [pc, #540]	@ (8005bfc <task_sistema_update+0x298>)
 80059e0:	f7ff f8c0 	bl	8004b64 <cinta_get_modo>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d010      	beq.n	8005a0c <task_sistema_update+0xa8>
            cinta_set_modo(&cinta_actual, 0);
 80059ea:	2100      	movs	r1, #0
 80059ec:	4883      	ldr	r0, [pc, #524]	@ (8005bfc <task_sistema_update+0x298>)
 80059ee:	f7ff f898 	bl	8004b22 <cinta_set_modo>
            cinta_set_velocidad(&cinta_actual, 0);
 80059f2:	2100      	movs	r1, #0
 80059f4:	4881      	ldr	r0, [pc, #516]	@ (8005bfc <task_sistema_update+0x298>)
 80059f6:	f7ff f886 	bl	8004b06 <cinta_set_velocidad>
            velocidad_guardada = 0;
 80059fa:	4b81      	ldr	r3, [pc, #516]	@ (8005c00 <task_sistema_update+0x29c>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	701a      	strb	r2, [r3, #0]
            contador_auto = 0;
 8005a00:	4b80      	ldr	r3, [pc, #512]	@ (8005c04 <task_sistema_update+0x2a0>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	701a      	strb	r2, [r3, #0]
            ui_next_ms = 0;
 8005a06:	4b80      	ldr	r3, [pc, #512]	@ (8005c08 <task_sistema_update+0x2a4>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]
        }
    }

    // BTN_2: Falla ON/OFF
    if (task_sensor_get_edge(BTN_2)) {
 8005a0c:	2001      	movs	r0, #1
 8005a0e:	f7ff fc8b 	bl	8005328 <task_sensor_get_edge>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d021      	beq.n	8005a5c <task_sistema_update+0xf8>
        if (cinta_get_modo(&cinta_actual) != 0) {
 8005a18:	4878      	ldr	r0, [pc, #480]	@ (8005bfc <task_sistema_update+0x298>)
 8005a1a:	f7ff f8a3 	bl	8004b64 <cinta_get_modo>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00e      	beq.n	8005a42 <task_sistema_update+0xde>
            cinta_set_modo(&cinta_actual, 0);
 8005a24:	2100      	movs	r1, #0
 8005a26:	4875      	ldr	r0, [pc, #468]	@ (8005bfc <task_sistema_update+0x298>)
 8005a28:	f7ff f87b 	bl	8004b22 <cinta_set_modo>
            cinta_set_velocidad(&cinta_actual, 0);
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	4873      	ldr	r0, [pc, #460]	@ (8005bfc <task_sistema_update+0x298>)
 8005a30:	f7ff f869 	bl	8004b06 <cinta_set_velocidad>
            velocidad_guardada = 0;
 8005a34:	4b72      	ldr	r3, [pc, #456]	@ (8005c00 <task_sistema_update+0x29c>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	701a      	strb	r2, [r3, #0]
            contador_auto = 0;
 8005a3a:	4b72      	ldr	r3, [pc, #456]	@ (8005c04 <task_sistema_update+0x2a0>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	701a      	strb	r2, [r3, #0]
 8005a40:	e007      	b.n	8005a52 <task_sistema_update+0xee>
        } else {
            cinta_set_modo(&cinta_actual, 1);
 8005a42:	2101      	movs	r1, #1
 8005a44:	486d      	ldr	r0, [pc, #436]	@ (8005bfc <task_sistema_update+0x298>)
 8005a46:	f7ff f86c 	bl	8004b22 <cinta_set_modo>
            cinta_set_velocidad(&cinta_actual, 0);
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	486b      	ldr	r0, [pc, #428]	@ (8005bfc <task_sistema_update+0x298>)
 8005a4e:	f7ff f85a 	bl	8004b06 <cinta_set_velocidad>
        }
        guardar_configuracion();
 8005a52:	f7ff feeb 	bl	800582c <guardar_configuracion>
        ui_next_ms = 0;
 8005a56:	4b6c      	ldr	r3, [pc, #432]	@ (8005c08 <task_sistema_update+0x2a4>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]
    }

    // BTN_3: Manual/Auto
    if (task_sensor_get_edge(BTN_3) && cinta_get_modo(&cinta_actual) != 0) {
 8005a5c:	2002      	movs	r0, #2
 8005a5e:	f7ff fc63 	bl	8005328 <task_sensor_get_edge>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d02f      	beq.n	8005ac8 <task_sistema_update+0x164>
 8005a68:	4864      	ldr	r0, [pc, #400]	@ (8005bfc <task_sistema_update+0x298>)
 8005a6a:	f7ff f87b 	bl	8004b64 <cinta_get_modo>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d029      	beq.n	8005ac8 <task_sistema_update+0x164>
        if (cinta_get_modo(&cinta_actual) == 1) {
 8005a74:	4861      	ldr	r0, [pc, #388]	@ (8005bfc <task_sistema_update+0x298>)
 8005a76:	f7ff f875 	bl	8004b64 <cinta_get_modo>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d113      	bne.n	8005aa8 <task_sistema_update+0x144>
            cinta_set_modo(&cinta_actual, 2);
 8005a80:	2102      	movs	r1, #2
 8005a82:	485e      	ldr	r0, [pc, #376]	@ (8005bfc <task_sistema_update+0x298>)
 8005a84:	f7ff f84d 	bl	8004b22 <cinta_set_modo>
            contador_auto = 0;
 8005a88:	4b5e      	ldr	r3, [pc, #376]	@ (8005c04 <task_sistema_update+0x2a0>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	701a      	strb	r2, [r3, #0]
            last_pulse_tick = HAL_GetTick();
 8005a8e:	f7fb fc0f 	bl	80012b0 <HAL_GetTick>
 8005a92:	4603      	mov	r3, r0
 8005a94:	4a5d      	ldr	r2, [pc, #372]	@ (8005c0c <task_sistema_update+0x2a8>)
 8005a96:	6013      	str	r3, [r2, #0]
            cinta_set_velocidad(&cinta_actual, (int8_t)velocidad_guardada);
 8005a98:	4b59      	ldr	r3, [pc, #356]	@ (8005c00 <task_sistema_update+0x29c>)
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	b25b      	sxtb	r3, r3
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	4856      	ldr	r0, [pc, #344]	@ (8005bfc <task_sistema_update+0x298>)
 8005aa2:	f7ff f830 	bl	8004b06 <cinta_set_velocidad>
 8005aa6:	e00a      	b.n	8005abe <task_sistema_update+0x15a>
        } else {
            cinta_set_modo(&cinta_actual, 1);
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	4854      	ldr	r0, [pc, #336]	@ (8005bfc <task_sistema_update+0x298>)
 8005aac:	f7ff f839 	bl	8004b22 <cinta_set_modo>
            cinta_set_velocidad(&cinta_actual, (int8_t)velocidad_guardada);
 8005ab0:	4b53      	ldr	r3, [pc, #332]	@ (8005c00 <task_sistema_update+0x29c>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	b25b      	sxtb	r3, r3
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	4850      	ldr	r0, [pc, #320]	@ (8005bfc <task_sistema_update+0x298>)
 8005aba:	f7ff f824 	bl	8004b06 <cinta_set_velocidad>
        }
        guardar_configuracion();
 8005abe:	f7ff feb5 	bl	800582c <guardar_configuracion>
        ui_next_ms = 0;
 8005ac2:	4b51      	ldr	r3, [pc, #324]	@ (8005c08 <task_sistema_update+0x2a4>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]
    }

    // BTN_4: Velocidad (en manual)
    if (cinta_get_modo(&cinta_actual) == 1 && task_sensor_get_edge(BTN_4)) {
 8005ac8:	484c      	ldr	r0, [pc, #304]	@ (8005bfc <task_sistema_update+0x298>)
 8005aca:	f7ff f84b 	bl	8004b64 <cinta_get_modo>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d120      	bne.n	8005b16 <task_sistema_update+0x1b2>
 8005ad4:	2003      	movs	r0, #3
 8005ad6:	f7ff fc27 	bl	8005328 <task_sensor_get_edge>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d01a      	beq.n	8005b16 <task_sistema_update+0x1b2>
        velocidad_guardada = (uint8_t)((velocidad_guardada + 1) % 3);
 8005ae0:	4b47      	ldr	r3, [pc, #284]	@ (8005c00 <task_sistema_update+0x29c>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8005c10 <task_sistema_update+0x2ac>)
 8005ae8:	fb83 3102 	smull	r3, r1, r3, r2
 8005aec:	17d3      	asrs	r3, r2, #31
 8005aee:	1ac9      	subs	r1, r1, r3
 8005af0:	460b      	mov	r3, r1
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	440b      	add	r3, r1
 8005af6:	1ad1      	subs	r1, r2, r3
 8005af8:	b2ca      	uxtb	r2, r1
 8005afa:	4b41      	ldr	r3, [pc, #260]	@ (8005c00 <task_sistema_update+0x29c>)
 8005afc:	701a      	strb	r2, [r3, #0]
        cinta_set_velocidad(&cinta_actual, (int8_t)velocidad_guardada);
 8005afe:	4b40      	ldr	r3, [pc, #256]	@ (8005c00 <task_sistema_update+0x29c>)
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	b25b      	sxtb	r3, r3
 8005b04:	4619      	mov	r1, r3
 8005b06:	483d      	ldr	r0, [pc, #244]	@ (8005bfc <task_sistema_update+0x298>)
 8005b08:	f7fe fffd 	bl	8004b06 <cinta_set_velocidad>
        guardar_configuracion();
 8005b0c:	f7ff fe8e 	bl	800582c <guardar_configuracion>
        ui_next_ms = 0;
 8005b10:	4b3d      	ldr	r3, [pc, #244]	@ (8005c08 <task_sistema_update+0x2a4>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	601a      	str	r2, [r3, #0]
    }

    // BTN_1: Contador (en auto)
    if (cinta_get_modo(&cinta_actual) == 2 && task_sensor_get_edge(BTN_1)) {
 8005b16:	4839      	ldr	r0, [pc, #228]	@ (8005bfc <task_sistema_update+0x298>)
 8005b18:	f7ff f824 	bl	8004b64 <cinta_get_modo>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d125      	bne.n	8005b6e <task_sistema_update+0x20a>
 8005b22:	2000      	movs	r0, #0
 8005b24:	f7ff fc00 	bl	8005328 <task_sensor_get_edge>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d01f      	beq.n	8005b6e <task_sistema_update+0x20a>
        contador_auto++;
 8005b2e:	4b35      	ldr	r3, [pc, #212]	@ (8005c04 <task_sistema_update+0x2a0>)
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	3301      	adds	r3, #1
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	4b33      	ldr	r3, [pc, #204]	@ (8005c04 <task_sistema_update+0x2a0>)
 8005b38:	701a      	strb	r2, [r3, #0]
        last_pulse_tick = HAL_GetTick();
 8005b3a:	f7fb fbb9 	bl	80012b0 <HAL_GetTick>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	4a32      	ldr	r2, [pc, #200]	@ (8005c0c <task_sistema_update+0x2a8>)
 8005b42:	6013      	str	r3, [r2, #0]
        velocidad_guardada = (contador_auto >= 2) ? 2 : 1;
 8005b44:	4b2f      	ldr	r3, [pc, #188]	@ (8005c04 <task_sistema_update+0x2a0>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d901      	bls.n	8005b50 <task_sistema_update+0x1ec>
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	e000      	b.n	8005b52 <task_sistema_update+0x1ee>
 8005b50:	2201      	movs	r2, #1
 8005b52:	4b2b      	ldr	r3, [pc, #172]	@ (8005c00 <task_sistema_update+0x29c>)
 8005b54:	701a      	strb	r2, [r3, #0]
        cinta_set_velocidad(&cinta_actual, (int8_t)velocidad_guardada);
 8005b56:	4b2a      	ldr	r3, [pc, #168]	@ (8005c00 <task_sistema_update+0x29c>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	b25b      	sxtb	r3, r3
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4827      	ldr	r0, [pc, #156]	@ (8005bfc <task_sistema_update+0x298>)
 8005b60:	f7fe ffd1 	bl	8004b06 <cinta_set_velocidad>
        guardar_configuracion();
 8005b64:	f7ff fe62 	bl	800582c <guardar_configuracion>
        ui_next_ms = 0;
 8005b68:	4b27      	ldr	r3, [pc, #156]	@ (8005c08 <task_sistema_update+0x2a4>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]
    }

    // Reset auto tras 10 s sin pulsos
    if (cinta_get_modo(&cinta_actual) == 2 &&
 8005b6e:	4823      	ldr	r0, [pc, #140]	@ (8005bfc <task_sistema_update+0x298>)
 8005b70:	f7fe fff8 	bl	8004b64 <cinta_get_modo>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d118      	bne.n	8005bac <task_sistema_update+0x248>
        (HAL_GetTick() - last_pulse_tick) >= INTERVALO_RESET_MS) {
 8005b7a:	f7fb fb99 	bl	80012b0 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	4b22      	ldr	r3, [pc, #136]	@ (8005c0c <task_sistema_update+0x2a8>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	1ad3      	subs	r3, r2, r3
    if (cinta_get_modo(&cinta_actual) == 2 &&
 8005b86:	f242 720f 	movw	r2, #9999	@ 0x270f
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d90e      	bls.n	8005bac <task_sistema_update+0x248>
        contador_auto = 0;
 8005b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8005c04 <task_sistema_update+0x2a0>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	701a      	strb	r2, [r3, #0]
        velocidad_guardada = 0;
 8005b94:	4b1a      	ldr	r3, [pc, #104]	@ (8005c00 <task_sistema_update+0x29c>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	701a      	strb	r2, [r3, #0]
        cinta_set_velocidad(&cinta_actual, 0);
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	4817      	ldr	r0, [pc, #92]	@ (8005bfc <task_sistema_update+0x298>)
 8005b9e:	f7fe ffb2 	bl	8004b06 <cinta_set_velocidad>
        guardar_configuracion();
 8005ba2:	f7ff fe43 	bl	800582c <guardar_configuracion>
        ui_next_ms = 0;
 8005ba6:	4b18      	ldr	r3, [pc, #96]	@ (8005c08 <task_sistema_update+0x2a4>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]
    }

    sec_end(SEC_LOGIC, t0);
 8005bac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005bae:	4619      	mov	r1, r3
 8005bb0:	2001      	movs	r0, #1
 8005bb2:	f7ff fe03 	bl	80057bc <sec_end>

    /* --- LED: siempre inmediato (barato) --- */
    sec_start(&t0);
 8005bb6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7ff fdf0 	bl	80057a0 <sec_start>
    if (cinta_get_modo(&cinta_actual) == 0) {
 8005bc0:	480e      	ldr	r0, [pc, #56]	@ (8005bfc <task_sistema_update+0x298>)
 8005bc2:	f7fe ffcf 	bl	8004b64 <cinta_get_modo>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d125      	bne.n	8005c18 <task_sistema_update+0x2b4>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005bd2:	4810      	ldr	r0, [pc, #64]	@ (8005c14 <task_sistema_update+0x2b0>)
 8005bd4:	f7fc fa47 	bl	8002066 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8005bd8:	2200      	movs	r2, #0
 8005bda:	2140      	movs	r1, #64	@ 0x40
 8005bdc:	480d      	ldr	r0, [pc, #52]	@ (8005c14 <task_sistema_update+0x2b0>)
 8005bde:	f7fc fa42 	bl	8002066 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8005be2:	2200      	movs	r2, #0
 8005be4:	2120      	movs	r1, #32
 8005be6:	480b      	ldr	r0, [pc, #44]	@ (8005c14 <task_sistema_update+0x2b0>)
 8005be8:	f7fc fa3d 	bl	8002066 <HAL_GPIO_WritePin>
 8005bec:	e035      	b.n	8005c5a <task_sistema_update+0x2f6>
 8005bee:	bf00      	nop
 8005bf0:	2000040c 	.word	0x2000040c
 8005bf4:	20000410 	.word	0x20000410
 8005bf8:	42a00000 	.word	0x42a00000
 8005bfc:	20000404 	.word	0x20000404
 8005c00:	20000406 	.word	0x20000406
 8005c04:	20000407 	.word	0x20000407
 8005c08:	20000414 	.word	0x20000414
 8005c0c:	20000408 	.word	0x20000408
 8005c10:	55555556 	.word	0x55555556
 8005c14:	40011000 	.word	0x40011000
    } else {
        int vel = cinta_get_velocidad(&cinta_actual);
 8005c18:	488c      	ldr	r0, [pc, #560]	@ (8005e4c <task_sistema_update+0x4e8>)
 8005c1a:	f7fe ff97 	bl	8004b4c <cinta_get_velocidad>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	66fb      	str	r3, [r7, #108]	@ 0x6c
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8005c22:	2200      	movs	r2, #0
 8005c24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005c28:	4889      	ldr	r0, [pc, #548]	@ (8005e50 <task_sistema_update+0x4ec>)
 8005c2a:	f7fc fa1c 	bl	8002066 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, (vel == 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005c2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	bf0c      	ite	eq
 8005c34:	2301      	moveq	r3, #1
 8005c36:	2300      	movne	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	2140      	movs	r1, #64	@ 0x40
 8005c3e:	4884      	ldr	r0, [pc, #528]	@ (8005e50 <task_sistema_update+0x4ec>)
 8005c40:	f7fc fa11 	bl	8002066 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, (vel > 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005c44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	bfcc      	ite	gt
 8005c4a:	2301      	movgt	r3, #1
 8005c4c:	2300      	movle	r3, #0
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	461a      	mov	r2, r3
 8005c52:	2120      	movs	r1, #32
 8005c54:	487e      	ldr	r0, [pc, #504]	@ (8005e50 <task_sistema_update+0x4ec>)
 8005c56:	f7fc fa06 	bl	8002066 <HAL_GPIO_WritePin>
    }
    sec_end(SEC_LED, t0);
 8005c5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	2004      	movs	r0, #4
 8005c60:	f7ff fdac 	bl	80057bc <sec_end>

    /* --- LCD: throttle 50 ms, refresca solo si cambió --- */
    uint32_t now = HAL_GetTick();
 8005c64:	f7fb fb24 	bl	80012b0 <HAL_GetTick>
 8005c68:	66b8      	str	r0, [r7, #104]	@ 0x68
    if (ui_next_ms != 0 && (int32_t)(now - ui_next_ms) < 0) return;
 8005c6a:	4b7a      	ldr	r3, [pc, #488]	@ (8005e54 <task_sistema_update+0x4f0>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d006      	beq.n	8005c80 <task_sistema_update+0x31c>
 8005c72:	4b78      	ldr	r3, [pc, #480]	@ (8005e54 <task_sistema_update+0x4f0>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f2c0 80e1 	blt.w	8005e42 <task_sistema_update+0x4de>
    ui_next_ms = now + SISTEMA_PERIOD_MS;
 8005c80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c82:	3332      	adds	r3, #50	@ 0x32
 8005c84:	4a73      	ldr	r2, [pc, #460]	@ (8005e54 <task_sistema_update+0x4f0>)
 8005c86:	6013      	str	r3, [r2, #0]

    sec_start(&t0);
 8005c88:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7ff fd87 	bl	80057a0 <sec_start>

    static char prevL0[24] = {0}, prevL1[24] = {0}, prevL2[24] = {0};
    char L0[24], L1[24], L2[24];

    snprintf(L0, sizeof L0,
             (cinta_get_modo(&cinta_actual)==0) ? "MODO: FALLA  " :
 8005c92:	486e      	ldr	r0, [pc, #440]	@ (8005e4c <task_sistema_update+0x4e8>)
 8005c94:	f7fe ff66 	bl	8004b64 <cinta_get_modo>
 8005c98:	4603      	mov	r3, r0
    snprintf(L0, sizeof L0,
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d009      	beq.n	8005cb2 <task_sistema_update+0x34e>
             (cinta_get_modo(&cinta_actual)==1) ? "MODO: MANUAL " :
 8005c9e:	486b      	ldr	r0, [pc, #428]	@ (8005e4c <task_sistema_update+0x4e8>)
 8005ca0:	f7fe ff60 	bl	8004b64 <cinta_get_modo>
 8005ca4:	4603      	mov	r3, r0
    snprintf(L0, sizeof L0,
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d101      	bne.n	8005cae <task_sistema_update+0x34a>
 8005caa:	4b6b      	ldr	r3, [pc, #428]	@ (8005e58 <task_sistema_update+0x4f4>)
 8005cac:	e002      	b.n	8005cb4 <task_sistema_update+0x350>
 8005cae:	4b6b      	ldr	r3, [pc, #428]	@ (8005e5c <task_sistema_update+0x4f8>)
 8005cb0:	e000      	b.n	8005cb4 <task_sistema_update+0x350>
 8005cb2:	4b6b      	ldr	r3, [pc, #428]	@ (8005e60 <task_sistema_update+0x4fc>)
 8005cb4:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8005cb8:	461a      	mov	r2, r3
 8005cba:	2118      	movs	r1, #24
 8005cbc:	f000 fd56 	bl	800676c <sniprintf>
                                                  "MODO: AUTO   ");

    int vel_display = (cinta_get_modo(&cinta_actual)==0) ? 0 : cinta_get_velocidad(&cinta_actual);
 8005cc0:	4862      	ldr	r0, [pc, #392]	@ (8005e4c <task_sistema_update+0x4e8>)
 8005cc2:	f7fe ff4f 	bl	8004b64 <cinta_get_modo>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d004      	beq.n	8005cd6 <task_sistema_update+0x372>
 8005ccc:	485f      	ldr	r0, [pc, #380]	@ (8005e4c <task_sistema_update+0x4e8>)
 8005cce:	f7fe ff3d 	bl	8004b4c <cinta_get_velocidad>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	e000      	b.n	8005cd8 <task_sistema_update+0x374>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	667b      	str	r3, [r7, #100]	@ 0x64
    snprintf(L1, sizeof L1, "VEL:%d  PAQ:%05u", vel_display, (unsigned)contador_auto);
 8005cda:	4b62      	ldr	r3, [pc, #392]	@ (8005e64 <task_sistema_update+0x500>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ce6:	4a60      	ldr	r2, [pc, #384]	@ (8005e68 <task_sistema_update+0x504>)
 8005ce8:	2118      	movs	r1, #24
 8005cea:	f000 fd3f 	bl	800676c <sniprintf>

    int tin10 = (int)(tin_c * 10.0f + (tin_c >= 0 ? 0.5f : -0.5f));
 8005cee:	4b5f      	ldr	r3, [pc, #380]	@ (8005e6c <task_sistema_update+0x508>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	495f      	ldr	r1, [pc, #380]	@ (8005e70 <task_sistema_update+0x50c>)
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fa fb49 	bl	800038c <__aeabi_fmul>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	461c      	mov	r4, r3
 8005cfe:	4b5b      	ldr	r3, [pc, #364]	@ (8005e6c <task_sistema_update+0x508>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f04f 0100 	mov.w	r1, #0
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fa fcf2 	bl	80006f0 <__aeabi_fcmpge>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d002      	beq.n	8005d18 <task_sistema_update+0x3b4>
 8005d12:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8005d16:	e001      	b.n	8005d1c <task_sistema_update+0x3b8>
 8005d18:	f04f 433f 	mov.w	r3, #3204448256	@ 0xbf000000
 8005d1c:	4621      	mov	r1, r4
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fa fa2c 	bl	800017c <__addsf3>
 8005d24:	4603      	mov	r3, r0
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fa fcf6 	bl	8000718 <__aeabi_f2iz>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	663b      	str	r3, [r7, #96]	@ 0x60
    int tex   = (int)(tex_g + 0.5f);
 8005d30:	4b50      	ldr	r3, [pc, #320]	@ (8005e74 <task_sistema_update+0x510>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fa fa1f 	bl	800017c <__addsf3>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7fa fce9 	bl	8000718 <__aeabi_f2iz>
 8005d46:	4603      	mov	r3, r0
 8005d48:	65fb      	str	r3, [r7, #92]	@ 0x5c
    snprintf(L2, sizeof L2, "TIn:%3d.%01dC TEx:%3dC",
 8005d4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d4c:	4a4a      	ldr	r2, [pc, #296]	@ (8005e78 <task_sistema_update+0x514>)
 8005d4e:	fb82 1203 	smull	r1, r2, r2, r3
 8005d52:	1092      	asrs	r2, r2, #2
 8005d54:	17db      	asrs	r3, r3, #31
 8005d56:	1ad4      	subs	r4, r2, r3
 8005d58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	da0d      	bge.n	8005d7a <task_sistema_update+0x416>
             tin10/10, (tin10 < 0 ? -(tin10%10) : (tin10%10)), tex);
 8005d5e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005d60:	4b45      	ldr	r3, [pc, #276]	@ (8005e78 <task_sistema_update+0x514>)
 8005d62:	fb83 2301 	smull	r2, r3, r3, r1
 8005d66:	109a      	asrs	r2, r3, #2
 8005d68:	17cb      	asrs	r3, r1, #31
 8005d6a:	1ad2      	subs	r2, r2, r3
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	1aca      	subs	r2, r1, r3
    snprintf(L2, sizeof L2, "TIn:%3d.%01dC TEx:%3dC",
 8005d76:	4252      	negs	r2, r2
 8005d78:	e00b      	b.n	8005d92 <task_sistema_update+0x42e>
 8005d7a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005d7c:	4b3e      	ldr	r3, [pc, #248]	@ (8005e78 <task_sistema_update+0x514>)
 8005d7e:	fb83 2301 	smull	r2, r3, r3, r1
 8005d82:	109a      	asrs	r2, r3, #2
 8005d84:	17cb      	asrs	r3, r1, #31
 8005d86:	1ad2      	subs	r2, r2, r3
 8005d88:	4613      	mov	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	1aca      	subs	r2, r1, r3
 8005d92:	f107 000c 	add.w	r0, r7, #12
 8005d96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d98:	9301      	str	r3, [sp, #4]
 8005d9a:	9200      	str	r2, [sp, #0]
 8005d9c:	4623      	mov	r3, r4
 8005d9e:	4a37      	ldr	r2, [pc, #220]	@ (8005e7c <task_sistema_update+0x518>)
 8005da0:	2118      	movs	r1, #24
 8005da2:	f000 fce3 	bl	800676c <sniprintf>

    if (strcmp(L0, prevL0)!=0) { displayCharPositionWrite(0,0); displayStringWrite(L0); strcpy((char*)prevL0,L0); }
 8005da6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005daa:	4935      	ldr	r1, [pc, #212]	@ (8005e80 <task_sistema_update+0x51c>)
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7fa f9cd 	bl	800014c <strcmp>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00e      	beq.n	8005dd6 <task_sistema_update+0x472>
 8005db8:	2100      	movs	r1, #0
 8005dba:	2000      	movs	r0, #0
 8005dbc:	f7fe ff5a 	bl	8004c74 <displayCharPositionWrite>
 8005dc0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7fe ff91 	bl	8004cec <displayStringWrite>
 8005dca:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005dce:	4619      	mov	r1, r3
 8005dd0:	482b      	ldr	r0, [pc, #172]	@ (8005e80 <task_sistema_update+0x51c>)
 8005dd2:	f000 fdc0 	bl	8006956 <strcpy>
    if (strcmp(L1, prevL1)!=0) { displayCharPositionWrite(0,1); displayStringWrite(L1); strcpy((char*)prevL1,L1); }
 8005dd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005dda:	492a      	ldr	r1, [pc, #168]	@ (8005e84 <task_sistema_update+0x520>)
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fa f9b5 	bl	800014c <strcmp>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00e      	beq.n	8005e06 <task_sistema_update+0x4a2>
 8005de8:	2101      	movs	r1, #1
 8005dea:	2000      	movs	r0, #0
 8005dec:	f7fe ff42 	bl	8004c74 <displayCharPositionWrite>
 8005df0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fe ff79 	bl	8004cec <displayStringWrite>
 8005dfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005dfe:	4619      	mov	r1, r3
 8005e00:	4820      	ldr	r0, [pc, #128]	@ (8005e84 <task_sistema_update+0x520>)
 8005e02:	f000 fda8 	bl	8006956 <strcpy>
    if (strcmp(L2, prevL2)!=0) { displayCharPositionWrite(0,2); displayStringWrite(L2); strcpy((char*)prevL2,L2); }
 8005e06:	f107 030c 	add.w	r3, r7, #12
 8005e0a:	491f      	ldr	r1, [pc, #124]	@ (8005e88 <task_sistema_update+0x524>)
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7fa f99d 	bl	800014c <strcmp>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00e      	beq.n	8005e36 <task_sistema_update+0x4d2>
 8005e18:	2102      	movs	r1, #2
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	f7fe ff2a 	bl	8004c74 <displayCharPositionWrite>
 8005e20:	f107 030c 	add.w	r3, r7, #12
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7fe ff61 	bl	8004cec <displayStringWrite>
 8005e2a:	f107 030c 	add.w	r3, r7, #12
 8005e2e:	4619      	mov	r1, r3
 8005e30:	4815      	ldr	r0, [pc, #84]	@ (8005e88 <task_sistema_update+0x524>)
 8005e32:	f000 fd90 	bl	8006956 <strcpy>

    sec_end(SEC_LCD, t0);
 8005e36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e38:	4619      	mov	r1, r3
 8005e3a:	2003      	movs	r0, #3
 8005e3c:	f7ff fcbe 	bl	80057bc <sec_end>
 8005e40:	e000      	b.n	8005e44 <task_sistema_update+0x4e0>
    if (ui_next_ms != 0 && (int32_t)(now - ui_next_ms) < 0) return;
 8005e42:	bf00      	nop
}
 8005e44:	3774      	adds	r7, #116	@ 0x74
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd90      	pop	{r4, r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20000404 	.word	0x20000404
 8005e50:	40011000 	.word	0x40011000
 8005e54:	20000414 	.word	0x20000414
 8005e58:	0800797c 	.word	0x0800797c
 8005e5c:	0800798c 	.word	0x0800798c
 8005e60:	0800799c 	.word	0x0800799c
 8005e64:	20000407 	.word	0x20000407
 8005e68:	080079ac 	.word	0x080079ac
 8005e6c:	2000040c 	.word	0x2000040c
 8005e70:	41200000 	.word	0x41200000
 8005e74:	20000410 	.word	0x20000410
 8005e78:	66666667 	.word	0x66666667
 8005e7c:	080079c0 	.word	0x080079c0
 8005e80:	20000418 	.word	0x20000418
 8005e84:	20000430 	.word	0x20000430
 8005e88:	20000448 	.word	0x20000448

08005e8c <task_sistema_prof_get>:

/* Getter para APP: devuelve last y wcet por sección
   Orden: [0]=IN, [1]=LG, [2]=EE, [3]=LCD, [4]=LED */
void task_sistema_prof_get(uint32_t out_last_us[5], uint32_t out_wcet_us[5])
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
    if (!out_last_us || !out_wcet_us) return;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d033      	beq.n	8005f04 <task_sistema_prof_get+0x78>
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d030      	beq.n	8005f04 <task_sistema_prof_get+0x78>

    out_last_us[0] = g_sys_prof[SEC_IN].last_us;
 8005ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8005f10 <task_sistema_prof_get+0x84>)
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	601a      	str	r2, [r3, #0]
    out_last_us[1] = g_sys_prof[SEC_LOGIC].last_us;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	3304      	adds	r3, #4
 8005eae:	4a18      	ldr	r2, [pc, #96]	@ (8005f10 <task_sistema_prof_get+0x84>)
 8005eb0:	6952      	ldr	r2, [r2, #20]
 8005eb2:	601a      	str	r2, [r3, #0]
    out_last_us[2] = g_sys_prof[SEC_EE].last_us;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	3308      	adds	r3, #8
 8005eb8:	4a15      	ldr	r2, [pc, #84]	@ (8005f10 <task_sistema_prof_get+0x84>)
 8005eba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ebc:	601a      	str	r2, [r3, #0]
    out_last_us[3] = g_sys_prof[SEC_LCD].last_us;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	330c      	adds	r3, #12
 8005ec2:	4a13      	ldr	r2, [pc, #76]	@ (8005f10 <task_sistema_prof_get+0x84>)
 8005ec4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005ec6:	601a      	str	r2, [r3, #0]
    out_last_us[4] = g_sys_prof[SEC_LED].last_us;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	3310      	adds	r3, #16
 8005ecc:	4a10      	ldr	r2, [pc, #64]	@ (8005f10 <task_sistema_prof_get+0x84>)
 8005ece:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005ed0:	601a      	str	r2, [r3, #0]

    out_wcet_us[0] = g_sys_prof[SEC_IN].wcet_us;
 8005ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8005f10 <task_sistema_prof_get+0x84>)
 8005ed4:	689a      	ldr	r2, [r3, #8]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	601a      	str	r2, [r3, #0]
    out_wcet_us[1] = g_sys_prof[SEC_LOGIC].wcet_us;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	3304      	adds	r3, #4
 8005ede:	4a0c      	ldr	r2, [pc, #48]	@ (8005f10 <task_sistema_prof_get+0x84>)
 8005ee0:	6992      	ldr	r2, [r2, #24]
 8005ee2:	601a      	str	r2, [r3, #0]
    out_wcet_us[2] = g_sys_prof[SEC_EE].wcet_us;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	3308      	adds	r3, #8
 8005ee8:	4a09      	ldr	r2, [pc, #36]	@ (8005f10 <task_sistema_prof_get+0x84>)
 8005eea:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005eec:	601a      	str	r2, [r3, #0]
    out_wcet_us[3] = g_sys_prof[SEC_LCD].wcet_us;
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	330c      	adds	r3, #12
 8005ef2:	4a07      	ldr	r2, [pc, #28]	@ (8005f10 <task_sistema_prof_get+0x84>)
 8005ef4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005ef6:	601a      	str	r2, [r3, #0]
    out_wcet_us[4] = g_sys_prof[SEC_LED].wcet_us;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	3310      	adds	r3, #16
 8005efc:	4a04      	ldr	r2, [pc, #16]	@ (8005f10 <task_sistema_prof_get+0x84>)
 8005efe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	e000      	b.n	8005f06 <task_sistema_prof_get+0x7a>
    if (!out_last_us || !out_wcet_us) return;
 8005f04:	bf00      	nop
}
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bc80      	pop	{r7}
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	20000070 	.word	0x20000070

08005f14 <findslot>:
 8005f14:	4b0a      	ldr	r3, [pc, #40]	@ (8005f40 <findslot+0x2c>)
 8005f16:	b510      	push	{r4, lr}
 8005f18:	4604      	mov	r4, r0
 8005f1a:	6818      	ldr	r0, [r3, #0]
 8005f1c:	b118      	cbz	r0, 8005f26 <findslot+0x12>
 8005f1e:	6a03      	ldr	r3, [r0, #32]
 8005f20:	b90b      	cbnz	r3, 8005f26 <findslot+0x12>
 8005f22:	f000 fbdb 	bl	80066dc <__sinit>
 8005f26:	2c13      	cmp	r4, #19
 8005f28:	d807      	bhi.n	8005f3a <findslot+0x26>
 8005f2a:	4806      	ldr	r0, [pc, #24]	@ (8005f44 <findslot+0x30>)
 8005f2c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8005f30:	3201      	adds	r2, #1
 8005f32:	d002      	beq.n	8005f3a <findslot+0x26>
 8005f34:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8005f38:	bd10      	pop	{r4, pc}
 8005f3a:	2000      	movs	r0, #0
 8005f3c:	e7fc      	b.n	8005f38 <findslot+0x24>
 8005f3e:	bf00      	nop
 8005f40:	200000d4 	.word	0x200000d4
 8005f44:	2000046c 	.word	0x2000046c

08005f48 <error>:
 8005f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	f000 fcd6 	bl	80068fc <__errno>
 8005f50:	2613      	movs	r6, #19
 8005f52:	4605      	mov	r5, r0
 8005f54:	2700      	movs	r7, #0
 8005f56:	4630      	mov	r0, r6
 8005f58:	4639      	mov	r1, r7
 8005f5a:	beab      	bkpt	0x00ab
 8005f5c:	4606      	mov	r6, r0
 8005f5e:	4620      	mov	r0, r4
 8005f60:	602e      	str	r6, [r5, #0]
 8005f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f64 <checkerror>:
 8005f64:	1c43      	adds	r3, r0, #1
 8005f66:	d101      	bne.n	8005f6c <checkerror+0x8>
 8005f68:	f7ff bfee 	b.w	8005f48 <error>
 8005f6c:	4770      	bx	lr

08005f6e <_swiread>:
 8005f6e:	b530      	push	{r4, r5, lr}
 8005f70:	b085      	sub	sp, #20
 8005f72:	2406      	movs	r4, #6
 8005f74:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005f78:	9203      	str	r2, [sp, #12]
 8005f7a:	ad01      	add	r5, sp, #4
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	4629      	mov	r1, r5
 8005f80:	beab      	bkpt	0x00ab
 8005f82:	4604      	mov	r4, r0
 8005f84:	4620      	mov	r0, r4
 8005f86:	f7ff ffed 	bl	8005f64 <checkerror>
 8005f8a:	b005      	add	sp, #20
 8005f8c:	bd30      	pop	{r4, r5, pc}

08005f8e <_read>:
 8005f8e:	b570      	push	{r4, r5, r6, lr}
 8005f90:	460e      	mov	r6, r1
 8005f92:	4614      	mov	r4, r2
 8005f94:	f7ff ffbe 	bl	8005f14 <findslot>
 8005f98:	4605      	mov	r5, r0
 8005f9a:	b930      	cbnz	r0, 8005faa <_read+0x1c>
 8005f9c:	f000 fcae 	bl	80068fc <__errno>
 8005fa0:	2309      	movs	r3, #9
 8005fa2:	6003      	str	r3, [r0, #0]
 8005fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa8:	bd70      	pop	{r4, r5, r6, pc}
 8005faa:	4622      	mov	r2, r4
 8005fac:	4631      	mov	r1, r6
 8005fae:	6800      	ldr	r0, [r0, #0]
 8005fb0:	f7ff ffdd 	bl	8005f6e <_swiread>
 8005fb4:	1c43      	adds	r3, r0, #1
 8005fb6:	d0f5      	beq.n	8005fa4 <_read+0x16>
 8005fb8:	686b      	ldr	r3, [r5, #4]
 8005fba:	1a20      	subs	r0, r4, r0
 8005fbc:	4403      	add	r3, r0
 8005fbe:	606b      	str	r3, [r5, #4]
 8005fc0:	e7f2      	b.n	8005fa8 <_read+0x1a>

08005fc2 <_swilseek>:
 8005fc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fc4:	460c      	mov	r4, r1
 8005fc6:	4616      	mov	r6, r2
 8005fc8:	f7ff ffa4 	bl	8005f14 <findslot>
 8005fcc:	4605      	mov	r5, r0
 8005fce:	b940      	cbnz	r0, 8005fe2 <_swilseek+0x20>
 8005fd0:	f000 fc94 	bl	80068fc <__errno>
 8005fd4:	2309      	movs	r3, #9
 8005fd6:	6003      	str	r3, [r0, #0]
 8005fd8:	f04f 34ff 	mov.w	r4, #4294967295
 8005fdc:	4620      	mov	r0, r4
 8005fde:	b003      	add	sp, #12
 8005fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fe2:	2e02      	cmp	r6, #2
 8005fe4:	d903      	bls.n	8005fee <_swilseek+0x2c>
 8005fe6:	f000 fc89 	bl	80068fc <__errno>
 8005fea:	2316      	movs	r3, #22
 8005fec:	e7f3      	b.n	8005fd6 <_swilseek+0x14>
 8005fee:	2e01      	cmp	r6, #1
 8005ff0:	d112      	bne.n	8006018 <_swilseek+0x56>
 8005ff2:	6843      	ldr	r3, [r0, #4]
 8005ff4:	18e4      	adds	r4, r4, r3
 8005ff6:	d4f6      	bmi.n	8005fe6 <_swilseek+0x24>
 8005ff8:	682b      	ldr	r3, [r5, #0]
 8005ffa:	260a      	movs	r6, #10
 8005ffc:	466f      	mov	r7, sp
 8005ffe:	e9cd 3400 	strd	r3, r4, [sp]
 8006002:	4630      	mov	r0, r6
 8006004:	4639      	mov	r1, r7
 8006006:	beab      	bkpt	0x00ab
 8006008:	4606      	mov	r6, r0
 800600a:	4630      	mov	r0, r6
 800600c:	f7ff ffaa 	bl	8005f64 <checkerror>
 8006010:	2800      	cmp	r0, #0
 8006012:	dbe1      	blt.n	8005fd8 <_swilseek+0x16>
 8006014:	606c      	str	r4, [r5, #4]
 8006016:	e7e1      	b.n	8005fdc <_swilseek+0x1a>
 8006018:	2e02      	cmp	r6, #2
 800601a:	6803      	ldr	r3, [r0, #0]
 800601c:	d1ec      	bne.n	8005ff8 <_swilseek+0x36>
 800601e:	260c      	movs	r6, #12
 8006020:	466f      	mov	r7, sp
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	4630      	mov	r0, r6
 8006026:	4639      	mov	r1, r7
 8006028:	beab      	bkpt	0x00ab
 800602a:	4606      	mov	r6, r0
 800602c:	4630      	mov	r0, r6
 800602e:	f7ff ff99 	bl	8005f64 <checkerror>
 8006032:	1c43      	adds	r3, r0, #1
 8006034:	d0d0      	beq.n	8005fd8 <_swilseek+0x16>
 8006036:	4404      	add	r4, r0
 8006038:	e7de      	b.n	8005ff8 <_swilseek+0x36>

0800603a <_lseek>:
 800603a:	f7ff bfc2 	b.w	8005fc2 <_swilseek>

0800603e <_swiwrite>:
 800603e:	b530      	push	{r4, r5, lr}
 8006040:	b085      	sub	sp, #20
 8006042:	2405      	movs	r4, #5
 8006044:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006048:	9203      	str	r2, [sp, #12]
 800604a:	ad01      	add	r5, sp, #4
 800604c:	4620      	mov	r0, r4
 800604e:	4629      	mov	r1, r5
 8006050:	beab      	bkpt	0x00ab
 8006052:	4604      	mov	r4, r0
 8006054:	4620      	mov	r0, r4
 8006056:	f7ff ff85 	bl	8005f64 <checkerror>
 800605a:	b005      	add	sp, #20
 800605c:	bd30      	pop	{r4, r5, pc}

0800605e <_write>:
 800605e:	b570      	push	{r4, r5, r6, lr}
 8006060:	460e      	mov	r6, r1
 8006062:	4615      	mov	r5, r2
 8006064:	f7ff ff56 	bl	8005f14 <findslot>
 8006068:	4604      	mov	r4, r0
 800606a:	b930      	cbnz	r0, 800607a <_write+0x1c>
 800606c:	f000 fc46 	bl	80068fc <__errno>
 8006070:	2309      	movs	r3, #9
 8006072:	6003      	str	r3, [r0, #0]
 8006074:	f04f 30ff 	mov.w	r0, #4294967295
 8006078:	bd70      	pop	{r4, r5, r6, pc}
 800607a:	462a      	mov	r2, r5
 800607c:	4631      	mov	r1, r6
 800607e:	6800      	ldr	r0, [r0, #0]
 8006080:	f7ff ffdd 	bl	800603e <_swiwrite>
 8006084:	1e03      	subs	r3, r0, #0
 8006086:	dbf5      	blt.n	8006074 <_write+0x16>
 8006088:	6862      	ldr	r2, [r4, #4]
 800608a:	1ae8      	subs	r0, r5, r3
 800608c:	4402      	add	r2, r0
 800608e:	42ab      	cmp	r3, r5
 8006090:	6062      	str	r2, [r4, #4]
 8006092:	d1f1      	bne.n	8006078 <_write+0x1a>
 8006094:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006098:	2000      	movs	r0, #0
 800609a:	f7ff bf55 	b.w	8005f48 <error>

0800609e <_swiclose>:
 800609e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060a0:	2402      	movs	r4, #2
 80060a2:	9001      	str	r0, [sp, #4]
 80060a4:	ad01      	add	r5, sp, #4
 80060a6:	4620      	mov	r0, r4
 80060a8:	4629      	mov	r1, r5
 80060aa:	beab      	bkpt	0x00ab
 80060ac:	4604      	mov	r4, r0
 80060ae:	4620      	mov	r0, r4
 80060b0:	f7ff ff58 	bl	8005f64 <checkerror>
 80060b4:	b003      	add	sp, #12
 80060b6:	bd30      	pop	{r4, r5, pc}

080060b8 <_close>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	4605      	mov	r5, r0
 80060bc:	f7ff ff2a 	bl	8005f14 <findslot>
 80060c0:	4604      	mov	r4, r0
 80060c2:	b930      	cbnz	r0, 80060d2 <_close+0x1a>
 80060c4:	f000 fc1a 	bl	80068fc <__errno>
 80060c8:	2309      	movs	r3, #9
 80060ca:	6003      	str	r3, [r0, #0]
 80060cc:	f04f 30ff 	mov.w	r0, #4294967295
 80060d0:	bd38      	pop	{r3, r4, r5, pc}
 80060d2:	3d01      	subs	r5, #1
 80060d4:	2d01      	cmp	r5, #1
 80060d6:	d809      	bhi.n	80060ec <_close+0x34>
 80060d8:	4b09      	ldr	r3, [pc, #36]	@ (8006100 <_close+0x48>)
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d104      	bne.n	80060ec <_close+0x34>
 80060e2:	f04f 33ff 	mov.w	r3, #4294967295
 80060e6:	6003      	str	r3, [r0, #0]
 80060e8:	2000      	movs	r0, #0
 80060ea:	e7f1      	b.n	80060d0 <_close+0x18>
 80060ec:	6820      	ldr	r0, [r4, #0]
 80060ee:	f7ff ffd6 	bl	800609e <_swiclose>
 80060f2:	2800      	cmp	r0, #0
 80060f4:	d1ec      	bne.n	80060d0 <_close+0x18>
 80060f6:	f04f 33ff 	mov.w	r3, #4294967295
 80060fa:	6023      	str	r3, [r4, #0]
 80060fc:	e7e8      	b.n	80060d0 <_close+0x18>
 80060fe:	bf00      	nop
 8006100:	2000046c 	.word	0x2000046c

08006104 <_swistat>:
 8006104:	b570      	push	{r4, r5, r6, lr}
 8006106:	460c      	mov	r4, r1
 8006108:	f7ff ff04 	bl	8005f14 <findslot>
 800610c:	4605      	mov	r5, r0
 800610e:	b930      	cbnz	r0, 800611e <_swistat+0x1a>
 8006110:	f000 fbf4 	bl	80068fc <__errno>
 8006114:	2309      	movs	r3, #9
 8006116:	6003      	str	r3, [r0, #0]
 8006118:	f04f 30ff 	mov.w	r0, #4294967295
 800611c:	bd70      	pop	{r4, r5, r6, pc}
 800611e:	6863      	ldr	r3, [r4, #4]
 8006120:	260c      	movs	r6, #12
 8006122:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006126:	6063      	str	r3, [r4, #4]
 8006128:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800612c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800612e:	4630      	mov	r0, r6
 8006130:	4629      	mov	r1, r5
 8006132:	beab      	bkpt	0x00ab
 8006134:	4605      	mov	r5, r0
 8006136:	4628      	mov	r0, r5
 8006138:	f7ff ff14 	bl	8005f64 <checkerror>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	d0eb      	beq.n	8006118 <_swistat+0x14>
 8006140:	6120      	str	r0, [r4, #16]
 8006142:	2000      	movs	r0, #0
 8006144:	e7ea      	b.n	800611c <_swistat+0x18>

08006146 <_fstat>:
 8006146:	460b      	mov	r3, r1
 8006148:	b510      	push	{r4, lr}
 800614a:	2100      	movs	r1, #0
 800614c:	4604      	mov	r4, r0
 800614e:	2258      	movs	r2, #88	@ 0x58
 8006150:	4618      	mov	r0, r3
 8006152:	f000 fb84 	bl	800685e <memset>
 8006156:	4601      	mov	r1, r0
 8006158:	4620      	mov	r0, r4
 800615a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800615e:	f7ff bfd1 	b.w	8006104 <_swistat>

08006162 <_stat>:
 8006162:	b538      	push	{r3, r4, r5, lr}
 8006164:	460d      	mov	r5, r1
 8006166:	4604      	mov	r4, r0
 8006168:	2258      	movs	r2, #88	@ 0x58
 800616a:	2100      	movs	r1, #0
 800616c:	4628      	mov	r0, r5
 800616e:	f000 fb76 	bl	800685e <memset>
 8006172:	4620      	mov	r0, r4
 8006174:	2100      	movs	r1, #0
 8006176:	f000 f811 	bl	800619c <_swiopen>
 800617a:	1c43      	adds	r3, r0, #1
 800617c:	4604      	mov	r4, r0
 800617e:	d00b      	beq.n	8006198 <_stat+0x36>
 8006180:	686b      	ldr	r3, [r5, #4]
 8006182:	4629      	mov	r1, r5
 8006184:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006188:	606b      	str	r3, [r5, #4]
 800618a:	f7ff ffbb 	bl	8006104 <_swistat>
 800618e:	4605      	mov	r5, r0
 8006190:	4620      	mov	r0, r4
 8006192:	f7ff ff91 	bl	80060b8 <_close>
 8006196:	462c      	mov	r4, r5
 8006198:	4620      	mov	r0, r4
 800619a:	bd38      	pop	{r3, r4, r5, pc}

0800619c <_swiopen>:
 800619c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061a0:	4607      	mov	r7, r0
 80061a2:	460e      	mov	r6, r1
 80061a4:	2400      	movs	r4, #0
 80061a6:	f8df 90a4 	ldr.w	r9, [pc, #164]	@ 800624c <_swiopen+0xb0>
 80061aa:	b096      	sub	sp, #88	@ 0x58
 80061ac:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 80061b0:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80061b4:	3301      	adds	r3, #1
 80061b6:	d032      	beq.n	800621e <_swiopen+0x82>
 80061b8:	3401      	adds	r4, #1
 80061ba:	2c14      	cmp	r4, #20
 80061bc:	d1f6      	bne.n	80061ac <_swiopen+0x10>
 80061be:	f000 fb9d 	bl	80068fc <__errno>
 80061c2:	2318      	movs	r3, #24
 80061c4:	e03a      	b.n	800623c <_swiopen+0xa0>
 80061c6:	f240 6301 	movw	r3, #1537	@ 0x601
 80061ca:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80061ce:	07b2      	lsls	r2, r6, #30
 80061d0:	bf48      	it	mi
 80061d2:	f045 0502 	orrmi.w	r5, r5, #2
 80061d6:	421e      	tst	r6, r3
 80061d8:	bf18      	it	ne
 80061da:	f045 0504 	orrne.w	r5, r5, #4
 80061de:	0733      	lsls	r3, r6, #28
 80061e0:	bf48      	it	mi
 80061e2:	f025 0504 	bicmi.w	r5, r5, #4
 80061e6:	4638      	mov	r0, r7
 80061e8:	bf48      	it	mi
 80061ea:	f045 0508 	orrmi.w	r5, r5, #8
 80061ee:	9700      	str	r7, [sp, #0]
 80061f0:	f7f9 ffb6 	bl	8000160 <strlen>
 80061f4:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80061f8:	2501      	movs	r5, #1
 80061fa:	4628      	mov	r0, r5
 80061fc:	4651      	mov	r1, sl
 80061fe:	beab      	bkpt	0x00ab
 8006200:	4605      	mov	r5, r0
 8006202:	2d00      	cmp	r5, #0
 8006204:	db06      	blt.n	8006214 <_swiopen+0x78>
 8006206:	2300      	movs	r3, #0
 8006208:	44c8      	add	r8, r9
 800620a:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 800620e:	f8c8 3004 	str.w	r3, [r8, #4]
 8006212:	e016      	b.n	8006242 <_swiopen+0xa6>
 8006214:	4628      	mov	r0, r5
 8006216:	f7ff fe97 	bl	8005f48 <error>
 800621a:	4604      	mov	r4, r0
 800621c:	e011      	b.n	8006242 <_swiopen+0xa6>
 800621e:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8006222:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006226:	46ea      	mov	sl, sp
 8006228:	d1cd      	bne.n	80061c6 <_swiopen+0x2a>
 800622a:	4651      	mov	r1, sl
 800622c:	4638      	mov	r0, r7
 800622e:	f7ff ff98 	bl	8006162 <_stat>
 8006232:	3001      	adds	r0, #1
 8006234:	d0c7      	beq.n	80061c6 <_swiopen+0x2a>
 8006236:	f000 fb61 	bl	80068fc <__errno>
 800623a:	2311      	movs	r3, #17
 800623c:	f04f 34ff 	mov.w	r4, #4294967295
 8006240:	6003      	str	r3, [r0, #0]
 8006242:	4620      	mov	r0, r4
 8006244:	b016      	add	sp, #88	@ 0x58
 8006246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800624a:	bf00      	nop
 800624c:	2000046c 	.word	0x2000046c

08006250 <_get_semihosting_exts>:
 8006250:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006254:	4606      	mov	r6, r0
 8006256:	460f      	mov	r7, r1
 8006258:	4829      	ldr	r0, [pc, #164]	@ (8006300 <_get_semihosting_exts+0xb0>)
 800625a:	2100      	movs	r1, #0
 800625c:	4615      	mov	r5, r2
 800625e:	f7ff ff9d 	bl	800619c <_swiopen>
 8006262:	4604      	mov	r4, r0
 8006264:	462a      	mov	r2, r5
 8006266:	2100      	movs	r1, #0
 8006268:	4630      	mov	r0, r6
 800626a:	f000 faf8 	bl	800685e <memset>
 800626e:	1c63      	adds	r3, r4, #1
 8006270:	d014      	beq.n	800629c <_get_semihosting_exts+0x4c>
 8006272:	4620      	mov	r0, r4
 8006274:	f7ff fe4e 	bl	8005f14 <findslot>
 8006278:	f04f 080c 	mov.w	r8, #12
 800627c:	4681      	mov	r9, r0
 800627e:	4640      	mov	r0, r8
 8006280:	4649      	mov	r1, r9
 8006282:	beab      	bkpt	0x00ab
 8006284:	4680      	mov	r8, r0
 8006286:	4640      	mov	r0, r8
 8006288:	f7ff fe6c 	bl	8005f64 <checkerror>
 800628c:	2803      	cmp	r0, #3
 800628e:	dd02      	ble.n	8006296 <_get_semihosting_exts+0x46>
 8006290:	1ec3      	subs	r3, r0, #3
 8006292:	42ab      	cmp	r3, r5
 8006294:	dc07      	bgt.n	80062a6 <_get_semihosting_exts+0x56>
 8006296:	4620      	mov	r0, r4
 8006298:	f7ff ff0e 	bl	80060b8 <_close>
 800629c:	f04f 30ff 	mov.w	r0, #4294967295
 80062a0:	b003      	add	sp, #12
 80062a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062a6:	2204      	movs	r2, #4
 80062a8:	4620      	mov	r0, r4
 80062aa:	eb0d 0102 	add.w	r1, sp, r2
 80062ae:	f7ff fe6e 	bl	8005f8e <_read>
 80062b2:	2803      	cmp	r0, #3
 80062b4:	ddef      	ble.n	8006296 <_get_semihosting_exts+0x46>
 80062b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80062ba:	2b53      	cmp	r3, #83	@ 0x53
 80062bc:	d1eb      	bne.n	8006296 <_get_semihosting_exts+0x46>
 80062be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80062c2:	2b48      	cmp	r3, #72	@ 0x48
 80062c4:	d1e7      	bne.n	8006296 <_get_semihosting_exts+0x46>
 80062c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80062ca:	2b46      	cmp	r3, #70	@ 0x46
 80062cc:	d1e3      	bne.n	8006296 <_get_semihosting_exts+0x46>
 80062ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80062d2:	2b42      	cmp	r3, #66	@ 0x42
 80062d4:	d1df      	bne.n	8006296 <_get_semihosting_exts+0x46>
 80062d6:	2201      	movs	r2, #1
 80062d8:	4639      	mov	r1, r7
 80062da:	4620      	mov	r0, r4
 80062dc:	f7ff fe71 	bl	8005fc2 <_swilseek>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	dbd8      	blt.n	8006296 <_get_semihosting_exts+0x46>
 80062e4:	462a      	mov	r2, r5
 80062e6:	4631      	mov	r1, r6
 80062e8:	4620      	mov	r0, r4
 80062ea:	f7ff fe50 	bl	8005f8e <_read>
 80062ee:	4605      	mov	r5, r0
 80062f0:	4620      	mov	r0, r4
 80062f2:	f7ff fee1 	bl	80060b8 <_close>
 80062f6:	4628      	mov	r0, r5
 80062f8:	f7ff fe34 	bl	8005f64 <checkerror>
 80062fc:	e7d0      	b.n	80062a0 <_get_semihosting_exts+0x50>
 80062fe:	bf00      	nop
 8006300:	08007a68 	.word	0x08007a68

08006304 <initialise_semihosting_exts>:
 8006304:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006306:	2100      	movs	r1, #0
 8006308:	2201      	movs	r2, #1
 800630a:	4d09      	ldr	r5, [pc, #36]	@ (8006330 <initialise_semihosting_exts+0x2c>)
 800630c:	4c09      	ldr	r4, [pc, #36]	@ (8006334 <initialise_semihosting_exts+0x30>)
 800630e:	a801      	add	r0, sp, #4
 8006310:	6029      	str	r1, [r5, #0]
 8006312:	6022      	str	r2, [r4, #0]
 8006314:	f7ff ff9c 	bl	8006250 <_get_semihosting_exts>
 8006318:	2800      	cmp	r0, #0
 800631a:	dd07      	ble.n	800632c <initialise_semihosting_exts+0x28>
 800631c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006320:	f003 0201 	and.w	r2, r3, #1
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	602a      	str	r2, [r5, #0]
 800632a:	6023      	str	r3, [r4, #0]
 800632c:	b003      	add	sp, #12
 800632e:	bd30      	pop	{r4, r5, pc}
 8006330:	200000c4 	.word	0x200000c4
 8006334:	200000c0 	.word	0x200000c0

08006338 <_has_ext_stdout_stderr>:
 8006338:	b510      	push	{r4, lr}
 800633a:	4c04      	ldr	r4, [pc, #16]	@ (800634c <_has_ext_stdout_stderr+0x14>)
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	da01      	bge.n	8006346 <_has_ext_stdout_stderr+0xe>
 8006342:	f7ff ffdf 	bl	8006304 <initialise_semihosting_exts>
 8006346:	6820      	ldr	r0, [r4, #0]
 8006348:	bd10      	pop	{r4, pc}
 800634a:	bf00      	nop
 800634c:	200000c0 	.word	0x200000c0

08006350 <initialise_monitor_handles>:
 8006350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006354:	2303      	movs	r3, #3
 8006356:	2400      	movs	r4, #0
 8006358:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 80063fc <initialise_monitor_handles+0xac>
 800635c:	b085      	sub	sp, #20
 800635e:	f8cd 9004 	str.w	r9, [sp, #4]
 8006362:	af01      	add	r7, sp, #4
 8006364:	9303      	str	r3, [sp, #12]
 8006366:	2501      	movs	r5, #1
 8006368:	9402      	str	r4, [sp, #8]
 800636a:	4628      	mov	r0, r5
 800636c:	4639      	mov	r1, r7
 800636e:	beab      	bkpt	0x00ab
 8006370:	4605      	mov	r5, r0
 8006372:	f04f 32ff 	mov.w	r2, #4294967295
 8006376:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8006400 <initialise_monitor_handles+0xb0>
 800637a:	4623      	mov	r3, r4
 800637c:	4c21      	ldr	r4, [pc, #132]	@ (8006404 <initialise_monitor_handles+0xb4>)
 800637e:	f8c8 5000 	str.w	r5, [r8]
 8006382:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8006386:	3301      	adds	r3, #1
 8006388:	2b14      	cmp	r3, #20
 800638a:	d1fa      	bne.n	8006382 <initialise_monitor_handles+0x32>
 800638c:	f7ff ffd4 	bl	8006338 <_has_ext_stdout_stderr>
 8006390:	4d1d      	ldr	r5, [pc, #116]	@ (8006408 <initialise_monitor_handles+0xb8>)
 8006392:	b1d0      	cbz	r0, 80063ca <initialise_monitor_handles+0x7a>
 8006394:	f04f 0a03 	mov.w	sl, #3
 8006398:	2304      	movs	r3, #4
 800639a:	f8cd 9004 	str.w	r9, [sp, #4]
 800639e:	2601      	movs	r6, #1
 80063a0:	f8cd a00c 	str.w	sl, [sp, #12]
 80063a4:	9302      	str	r3, [sp, #8]
 80063a6:	4630      	mov	r0, r6
 80063a8:	4639      	mov	r1, r7
 80063aa:	beab      	bkpt	0x00ab
 80063ac:	4683      	mov	fp, r0
 80063ae:	4b17      	ldr	r3, [pc, #92]	@ (800640c <initialise_monitor_handles+0xbc>)
 80063b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80063b4:	f8c3 b000 	str.w	fp, [r3]
 80063b8:	2308      	movs	r3, #8
 80063ba:	f8cd a00c 	str.w	sl, [sp, #12]
 80063be:	9302      	str	r3, [sp, #8]
 80063c0:	4630      	mov	r0, r6
 80063c2:	4639      	mov	r1, r7
 80063c4:	beab      	bkpt	0x00ab
 80063c6:	4606      	mov	r6, r0
 80063c8:	602e      	str	r6, [r5, #0]
 80063ca:	2600      	movs	r6, #0
 80063cc:	682b      	ldr	r3, [r5, #0]
 80063ce:	6066      	str	r6, [r4, #4]
 80063d0:	3301      	adds	r3, #1
 80063d2:	bf02      	ittt	eq
 80063d4:	4b0d      	ldreq	r3, [pc, #52]	@ (800640c <initialise_monitor_handles+0xbc>)
 80063d6:	681b      	ldreq	r3, [r3, #0]
 80063d8:	602b      	streq	r3, [r5, #0]
 80063da:	f8d8 3000 	ldr.w	r3, [r8]
 80063de:	6023      	str	r3, [r4, #0]
 80063e0:	f7ff ffaa 	bl	8006338 <_has_ext_stdout_stderr>
 80063e4:	b130      	cbz	r0, 80063f4 <initialise_monitor_handles+0xa4>
 80063e6:	4b09      	ldr	r3, [pc, #36]	@ (800640c <initialise_monitor_handles+0xbc>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80063ee:	682b      	ldr	r3, [r5, #0]
 80063f0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80063f4:	b005      	add	sp, #20
 80063f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063fa:	bf00      	nop
 80063fc:	08007a7e 	.word	0x08007a7e
 8006400:	20000468 	.word	0x20000468
 8006404:	2000046c 	.word	0x2000046c
 8006408:	20000460 	.word	0x20000460
 800640c:	20000464 	.word	0x20000464

08006410 <_isatty>:
 8006410:	b570      	push	{r4, r5, r6, lr}
 8006412:	f7ff fd7f 	bl	8005f14 <findslot>
 8006416:	2409      	movs	r4, #9
 8006418:	4605      	mov	r5, r0
 800641a:	b920      	cbnz	r0, 8006426 <_isatty+0x16>
 800641c:	f000 fa6e 	bl	80068fc <__errno>
 8006420:	6004      	str	r4, [r0, #0]
 8006422:	2000      	movs	r0, #0
 8006424:	bd70      	pop	{r4, r5, r6, pc}
 8006426:	4620      	mov	r0, r4
 8006428:	4629      	mov	r1, r5
 800642a:	beab      	bkpt	0x00ab
 800642c:	4604      	mov	r4, r0
 800642e:	2c01      	cmp	r4, #1
 8006430:	4620      	mov	r0, r4
 8006432:	d0f7      	beq.n	8006424 <_isatty+0x14>
 8006434:	f000 fa62 	bl	80068fc <__errno>
 8006438:	2513      	movs	r5, #19
 800643a:	4604      	mov	r4, r0
 800643c:	2600      	movs	r6, #0
 800643e:	4628      	mov	r0, r5
 8006440:	4631      	mov	r1, r6
 8006442:	beab      	bkpt	0x00ab
 8006444:	4605      	mov	r5, r0
 8006446:	6025      	str	r5, [r4, #0]
 8006448:	e7eb      	b.n	8006422 <_isatty+0x12>
	...

0800644c <__sflush_r>:
 800644c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006452:	0716      	lsls	r6, r2, #28
 8006454:	4605      	mov	r5, r0
 8006456:	460c      	mov	r4, r1
 8006458:	d454      	bmi.n	8006504 <__sflush_r+0xb8>
 800645a:	684b      	ldr	r3, [r1, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	dc02      	bgt.n	8006466 <__sflush_r+0x1a>
 8006460:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006462:	2b00      	cmp	r3, #0
 8006464:	dd48      	ble.n	80064f8 <__sflush_r+0xac>
 8006466:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006468:	2e00      	cmp	r6, #0
 800646a:	d045      	beq.n	80064f8 <__sflush_r+0xac>
 800646c:	2300      	movs	r3, #0
 800646e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006472:	682f      	ldr	r7, [r5, #0]
 8006474:	6a21      	ldr	r1, [r4, #32]
 8006476:	602b      	str	r3, [r5, #0]
 8006478:	d030      	beq.n	80064dc <__sflush_r+0x90>
 800647a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800647c:	89a3      	ldrh	r3, [r4, #12]
 800647e:	0759      	lsls	r1, r3, #29
 8006480:	d505      	bpl.n	800648e <__sflush_r+0x42>
 8006482:	6863      	ldr	r3, [r4, #4]
 8006484:	1ad2      	subs	r2, r2, r3
 8006486:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006488:	b10b      	cbz	r3, 800648e <__sflush_r+0x42>
 800648a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800648c:	1ad2      	subs	r2, r2, r3
 800648e:	2300      	movs	r3, #0
 8006490:	4628      	mov	r0, r5
 8006492:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006494:	6a21      	ldr	r1, [r4, #32]
 8006496:	47b0      	blx	r6
 8006498:	1c43      	adds	r3, r0, #1
 800649a:	89a3      	ldrh	r3, [r4, #12]
 800649c:	d106      	bne.n	80064ac <__sflush_r+0x60>
 800649e:	6829      	ldr	r1, [r5, #0]
 80064a0:	291d      	cmp	r1, #29
 80064a2:	d82b      	bhi.n	80064fc <__sflush_r+0xb0>
 80064a4:	4a28      	ldr	r2, [pc, #160]	@ (8006548 <__sflush_r+0xfc>)
 80064a6:	40ca      	lsrs	r2, r1
 80064a8:	07d6      	lsls	r6, r2, #31
 80064aa:	d527      	bpl.n	80064fc <__sflush_r+0xb0>
 80064ac:	2200      	movs	r2, #0
 80064ae:	6062      	str	r2, [r4, #4]
 80064b0:	6922      	ldr	r2, [r4, #16]
 80064b2:	04d9      	lsls	r1, r3, #19
 80064b4:	6022      	str	r2, [r4, #0]
 80064b6:	d504      	bpl.n	80064c2 <__sflush_r+0x76>
 80064b8:	1c42      	adds	r2, r0, #1
 80064ba:	d101      	bne.n	80064c0 <__sflush_r+0x74>
 80064bc:	682b      	ldr	r3, [r5, #0]
 80064be:	b903      	cbnz	r3, 80064c2 <__sflush_r+0x76>
 80064c0:	6560      	str	r0, [r4, #84]	@ 0x54
 80064c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064c4:	602f      	str	r7, [r5, #0]
 80064c6:	b1b9      	cbz	r1, 80064f8 <__sflush_r+0xac>
 80064c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064cc:	4299      	cmp	r1, r3
 80064ce:	d002      	beq.n	80064d6 <__sflush_r+0x8a>
 80064d0:	4628      	mov	r0, r5
 80064d2:	f000 fa49 	bl	8006968 <_free_r>
 80064d6:	2300      	movs	r3, #0
 80064d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80064da:	e00d      	b.n	80064f8 <__sflush_r+0xac>
 80064dc:	2301      	movs	r3, #1
 80064de:	4628      	mov	r0, r5
 80064e0:	47b0      	blx	r6
 80064e2:	4602      	mov	r2, r0
 80064e4:	1c50      	adds	r0, r2, #1
 80064e6:	d1c9      	bne.n	800647c <__sflush_r+0x30>
 80064e8:	682b      	ldr	r3, [r5, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d0c6      	beq.n	800647c <__sflush_r+0x30>
 80064ee:	2b1d      	cmp	r3, #29
 80064f0:	d001      	beq.n	80064f6 <__sflush_r+0xaa>
 80064f2:	2b16      	cmp	r3, #22
 80064f4:	d11d      	bne.n	8006532 <__sflush_r+0xe6>
 80064f6:	602f      	str	r7, [r5, #0]
 80064f8:	2000      	movs	r0, #0
 80064fa:	e021      	b.n	8006540 <__sflush_r+0xf4>
 80064fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006500:	b21b      	sxth	r3, r3
 8006502:	e01a      	b.n	800653a <__sflush_r+0xee>
 8006504:	690f      	ldr	r7, [r1, #16]
 8006506:	2f00      	cmp	r7, #0
 8006508:	d0f6      	beq.n	80064f8 <__sflush_r+0xac>
 800650a:	0793      	lsls	r3, r2, #30
 800650c:	bf18      	it	ne
 800650e:	2300      	movne	r3, #0
 8006510:	680e      	ldr	r6, [r1, #0]
 8006512:	bf08      	it	eq
 8006514:	694b      	ldreq	r3, [r1, #20]
 8006516:	1bf6      	subs	r6, r6, r7
 8006518:	600f      	str	r7, [r1, #0]
 800651a:	608b      	str	r3, [r1, #8]
 800651c:	2e00      	cmp	r6, #0
 800651e:	ddeb      	ble.n	80064f8 <__sflush_r+0xac>
 8006520:	4633      	mov	r3, r6
 8006522:	463a      	mov	r2, r7
 8006524:	4628      	mov	r0, r5
 8006526:	6a21      	ldr	r1, [r4, #32]
 8006528:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800652c:	47e0      	blx	ip
 800652e:	2800      	cmp	r0, #0
 8006530:	dc07      	bgt.n	8006542 <__sflush_r+0xf6>
 8006532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006536:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800653a:	f04f 30ff 	mov.w	r0, #4294967295
 800653e:	81a3      	strh	r3, [r4, #12]
 8006540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006542:	4407      	add	r7, r0
 8006544:	1a36      	subs	r6, r6, r0
 8006546:	e7e9      	b.n	800651c <__sflush_r+0xd0>
 8006548:	20400001 	.word	0x20400001

0800654c <_fflush_r>:
 800654c:	b538      	push	{r3, r4, r5, lr}
 800654e:	690b      	ldr	r3, [r1, #16]
 8006550:	4605      	mov	r5, r0
 8006552:	460c      	mov	r4, r1
 8006554:	b913      	cbnz	r3, 800655c <_fflush_r+0x10>
 8006556:	2500      	movs	r5, #0
 8006558:	4628      	mov	r0, r5
 800655a:	bd38      	pop	{r3, r4, r5, pc}
 800655c:	b118      	cbz	r0, 8006566 <_fflush_r+0x1a>
 800655e:	6a03      	ldr	r3, [r0, #32]
 8006560:	b90b      	cbnz	r3, 8006566 <_fflush_r+0x1a>
 8006562:	f000 f8bb 	bl	80066dc <__sinit>
 8006566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d0f3      	beq.n	8006556 <_fflush_r+0xa>
 800656e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006570:	07d0      	lsls	r0, r2, #31
 8006572:	d404      	bmi.n	800657e <_fflush_r+0x32>
 8006574:	0599      	lsls	r1, r3, #22
 8006576:	d402      	bmi.n	800657e <_fflush_r+0x32>
 8006578:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800657a:	f000 f9ea 	bl	8006952 <__retarget_lock_acquire_recursive>
 800657e:	4628      	mov	r0, r5
 8006580:	4621      	mov	r1, r4
 8006582:	f7ff ff63 	bl	800644c <__sflush_r>
 8006586:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006588:	4605      	mov	r5, r0
 800658a:	07da      	lsls	r2, r3, #31
 800658c:	d4e4      	bmi.n	8006558 <_fflush_r+0xc>
 800658e:	89a3      	ldrh	r3, [r4, #12]
 8006590:	059b      	lsls	r3, r3, #22
 8006592:	d4e1      	bmi.n	8006558 <_fflush_r+0xc>
 8006594:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006596:	f000 f9dd 	bl	8006954 <__retarget_lock_release_recursive>
 800659a:	e7dd      	b.n	8006558 <_fflush_r+0xc>

0800659c <fflush>:
 800659c:	4601      	mov	r1, r0
 800659e:	b920      	cbnz	r0, 80065aa <fflush+0xe>
 80065a0:	4a04      	ldr	r2, [pc, #16]	@ (80065b4 <fflush+0x18>)
 80065a2:	4905      	ldr	r1, [pc, #20]	@ (80065b8 <fflush+0x1c>)
 80065a4:	4805      	ldr	r0, [pc, #20]	@ (80065bc <fflush+0x20>)
 80065a6:	f000 b8b1 	b.w	800670c <_fwalk_sglue>
 80065aa:	4b05      	ldr	r3, [pc, #20]	@ (80065c0 <fflush+0x24>)
 80065ac:	6818      	ldr	r0, [r3, #0]
 80065ae:	f7ff bfcd 	b.w	800654c <_fflush_r>
 80065b2:	bf00      	nop
 80065b4:	200000c8 	.word	0x200000c8
 80065b8:	0800654d 	.word	0x0800654d
 80065bc:	200000d8 	.word	0x200000d8
 80065c0:	200000d4 	.word	0x200000d4

080065c4 <std>:
 80065c4:	2300      	movs	r3, #0
 80065c6:	b510      	push	{r4, lr}
 80065c8:	4604      	mov	r4, r0
 80065ca:	e9c0 3300 	strd	r3, r3, [r0]
 80065ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065d2:	6083      	str	r3, [r0, #8]
 80065d4:	8181      	strh	r1, [r0, #12]
 80065d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80065d8:	81c2      	strh	r2, [r0, #14]
 80065da:	6183      	str	r3, [r0, #24]
 80065dc:	4619      	mov	r1, r3
 80065de:	2208      	movs	r2, #8
 80065e0:	305c      	adds	r0, #92	@ 0x5c
 80065e2:	f000 f93c 	bl	800685e <memset>
 80065e6:	4b0d      	ldr	r3, [pc, #52]	@ (800661c <std+0x58>)
 80065e8:	6224      	str	r4, [r4, #32]
 80065ea:	6263      	str	r3, [r4, #36]	@ 0x24
 80065ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006620 <std+0x5c>)
 80065ee:	62a3      	str	r3, [r4, #40]	@ 0x28
 80065f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006624 <std+0x60>)
 80065f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80065f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006628 <std+0x64>)
 80065f6:	6323      	str	r3, [r4, #48]	@ 0x30
 80065f8:	4b0c      	ldr	r3, [pc, #48]	@ (800662c <std+0x68>)
 80065fa:	429c      	cmp	r4, r3
 80065fc:	d006      	beq.n	800660c <std+0x48>
 80065fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006602:	4294      	cmp	r4, r2
 8006604:	d002      	beq.n	800660c <std+0x48>
 8006606:	33d0      	adds	r3, #208	@ 0xd0
 8006608:	429c      	cmp	r4, r3
 800660a:	d105      	bne.n	8006618 <std+0x54>
 800660c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006614:	f000 b99c 	b.w	8006950 <__retarget_lock_init_recursive>
 8006618:	bd10      	pop	{r4, pc}
 800661a:	bf00      	nop
 800661c:	080067d9 	.word	0x080067d9
 8006620:	080067fb 	.word	0x080067fb
 8006624:	08006833 	.word	0x08006833
 8006628:	08006857 	.word	0x08006857
 800662c:	2000050c 	.word	0x2000050c

08006630 <stdio_exit_handler>:
 8006630:	4a02      	ldr	r2, [pc, #8]	@ (800663c <stdio_exit_handler+0xc>)
 8006632:	4903      	ldr	r1, [pc, #12]	@ (8006640 <stdio_exit_handler+0x10>)
 8006634:	4803      	ldr	r0, [pc, #12]	@ (8006644 <stdio_exit_handler+0x14>)
 8006636:	f000 b869 	b.w	800670c <_fwalk_sglue>
 800663a:	bf00      	nop
 800663c:	200000c8 	.word	0x200000c8
 8006640:	0800654d 	.word	0x0800654d
 8006644:	200000d8 	.word	0x200000d8

08006648 <cleanup_stdio>:
 8006648:	6841      	ldr	r1, [r0, #4]
 800664a:	4b0c      	ldr	r3, [pc, #48]	@ (800667c <cleanup_stdio+0x34>)
 800664c:	b510      	push	{r4, lr}
 800664e:	4299      	cmp	r1, r3
 8006650:	4604      	mov	r4, r0
 8006652:	d001      	beq.n	8006658 <cleanup_stdio+0x10>
 8006654:	f7ff ff7a 	bl	800654c <_fflush_r>
 8006658:	68a1      	ldr	r1, [r4, #8]
 800665a:	4b09      	ldr	r3, [pc, #36]	@ (8006680 <cleanup_stdio+0x38>)
 800665c:	4299      	cmp	r1, r3
 800665e:	d002      	beq.n	8006666 <cleanup_stdio+0x1e>
 8006660:	4620      	mov	r0, r4
 8006662:	f7ff ff73 	bl	800654c <_fflush_r>
 8006666:	68e1      	ldr	r1, [r4, #12]
 8006668:	4b06      	ldr	r3, [pc, #24]	@ (8006684 <cleanup_stdio+0x3c>)
 800666a:	4299      	cmp	r1, r3
 800666c:	d004      	beq.n	8006678 <cleanup_stdio+0x30>
 800666e:	4620      	mov	r0, r4
 8006670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006674:	f7ff bf6a 	b.w	800654c <_fflush_r>
 8006678:	bd10      	pop	{r4, pc}
 800667a:	bf00      	nop
 800667c:	2000050c 	.word	0x2000050c
 8006680:	20000574 	.word	0x20000574
 8006684:	200005dc 	.word	0x200005dc

08006688 <global_stdio_init.part.0>:
 8006688:	b510      	push	{r4, lr}
 800668a:	4b0b      	ldr	r3, [pc, #44]	@ (80066b8 <global_stdio_init.part.0+0x30>)
 800668c:	4c0b      	ldr	r4, [pc, #44]	@ (80066bc <global_stdio_init.part.0+0x34>)
 800668e:	4a0c      	ldr	r2, [pc, #48]	@ (80066c0 <global_stdio_init.part.0+0x38>)
 8006690:	4620      	mov	r0, r4
 8006692:	601a      	str	r2, [r3, #0]
 8006694:	2104      	movs	r1, #4
 8006696:	2200      	movs	r2, #0
 8006698:	f7ff ff94 	bl	80065c4 <std>
 800669c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80066a0:	2201      	movs	r2, #1
 80066a2:	2109      	movs	r1, #9
 80066a4:	f7ff ff8e 	bl	80065c4 <std>
 80066a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80066ac:	2202      	movs	r2, #2
 80066ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066b2:	2112      	movs	r1, #18
 80066b4:	f7ff bf86 	b.w	80065c4 <std>
 80066b8:	20000644 	.word	0x20000644
 80066bc:	2000050c 	.word	0x2000050c
 80066c0:	08006631 	.word	0x08006631

080066c4 <__sfp_lock_acquire>:
 80066c4:	4801      	ldr	r0, [pc, #4]	@ (80066cc <__sfp_lock_acquire+0x8>)
 80066c6:	f000 b944 	b.w	8006952 <__retarget_lock_acquire_recursive>
 80066ca:	bf00      	nop
 80066cc:	2000064d 	.word	0x2000064d

080066d0 <__sfp_lock_release>:
 80066d0:	4801      	ldr	r0, [pc, #4]	@ (80066d8 <__sfp_lock_release+0x8>)
 80066d2:	f000 b93f 	b.w	8006954 <__retarget_lock_release_recursive>
 80066d6:	bf00      	nop
 80066d8:	2000064d 	.word	0x2000064d

080066dc <__sinit>:
 80066dc:	b510      	push	{r4, lr}
 80066de:	4604      	mov	r4, r0
 80066e0:	f7ff fff0 	bl	80066c4 <__sfp_lock_acquire>
 80066e4:	6a23      	ldr	r3, [r4, #32]
 80066e6:	b11b      	cbz	r3, 80066f0 <__sinit+0x14>
 80066e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066ec:	f7ff bff0 	b.w	80066d0 <__sfp_lock_release>
 80066f0:	4b04      	ldr	r3, [pc, #16]	@ (8006704 <__sinit+0x28>)
 80066f2:	6223      	str	r3, [r4, #32]
 80066f4:	4b04      	ldr	r3, [pc, #16]	@ (8006708 <__sinit+0x2c>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1f5      	bne.n	80066e8 <__sinit+0xc>
 80066fc:	f7ff ffc4 	bl	8006688 <global_stdio_init.part.0>
 8006700:	e7f2      	b.n	80066e8 <__sinit+0xc>
 8006702:	bf00      	nop
 8006704:	08006649 	.word	0x08006649
 8006708:	20000644 	.word	0x20000644

0800670c <_fwalk_sglue>:
 800670c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006710:	4607      	mov	r7, r0
 8006712:	4688      	mov	r8, r1
 8006714:	4614      	mov	r4, r2
 8006716:	2600      	movs	r6, #0
 8006718:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800671c:	f1b9 0901 	subs.w	r9, r9, #1
 8006720:	d505      	bpl.n	800672e <_fwalk_sglue+0x22>
 8006722:	6824      	ldr	r4, [r4, #0]
 8006724:	2c00      	cmp	r4, #0
 8006726:	d1f7      	bne.n	8006718 <_fwalk_sglue+0xc>
 8006728:	4630      	mov	r0, r6
 800672a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800672e:	89ab      	ldrh	r3, [r5, #12]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d907      	bls.n	8006744 <_fwalk_sglue+0x38>
 8006734:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006738:	3301      	adds	r3, #1
 800673a:	d003      	beq.n	8006744 <_fwalk_sglue+0x38>
 800673c:	4629      	mov	r1, r5
 800673e:	4638      	mov	r0, r7
 8006740:	47c0      	blx	r8
 8006742:	4306      	orrs	r6, r0
 8006744:	3568      	adds	r5, #104	@ 0x68
 8006746:	e7e9      	b.n	800671c <_fwalk_sglue+0x10>

08006748 <iprintf>:
 8006748:	b40f      	push	{r0, r1, r2, r3}
 800674a:	b507      	push	{r0, r1, r2, lr}
 800674c:	4906      	ldr	r1, [pc, #24]	@ (8006768 <iprintf+0x20>)
 800674e:	ab04      	add	r3, sp, #16
 8006750:	6808      	ldr	r0, [r1, #0]
 8006752:	f853 2b04 	ldr.w	r2, [r3], #4
 8006756:	6881      	ldr	r1, [r0, #8]
 8006758:	9301      	str	r3, [sp, #4]
 800675a:	f000 fb7b 	bl	8006e54 <_vfiprintf_r>
 800675e:	b003      	add	sp, #12
 8006760:	f85d eb04 	ldr.w	lr, [sp], #4
 8006764:	b004      	add	sp, #16
 8006766:	4770      	bx	lr
 8006768:	200000d4 	.word	0x200000d4

0800676c <sniprintf>:
 800676c:	b40c      	push	{r2, r3}
 800676e:	b530      	push	{r4, r5, lr}
 8006770:	4b18      	ldr	r3, [pc, #96]	@ (80067d4 <sniprintf+0x68>)
 8006772:	1e0c      	subs	r4, r1, #0
 8006774:	681d      	ldr	r5, [r3, #0]
 8006776:	b09d      	sub	sp, #116	@ 0x74
 8006778:	da08      	bge.n	800678c <sniprintf+0x20>
 800677a:	238b      	movs	r3, #139	@ 0x8b
 800677c:	f04f 30ff 	mov.w	r0, #4294967295
 8006780:	602b      	str	r3, [r5, #0]
 8006782:	b01d      	add	sp, #116	@ 0x74
 8006784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006788:	b002      	add	sp, #8
 800678a:	4770      	bx	lr
 800678c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006790:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006794:	f04f 0300 	mov.w	r3, #0
 8006798:	931b      	str	r3, [sp, #108]	@ 0x6c
 800679a:	bf0c      	ite	eq
 800679c:	4623      	moveq	r3, r4
 800679e:	f104 33ff 	addne.w	r3, r4, #4294967295
 80067a2:	9304      	str	r3, [sp, #16]
 80067a4:	9307      	str	r3, [sp, #28]
 80067a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80067aa:	9002      	str	r0, [sp, #8]
 80067ac:	9006      	str	r0, [sp, #24]
 80067ae:	f8ad 3016 	strh.w	r3, [sp, #22]
 80067b2:	4628      	mov	r0, r5
 80067b4:	ab21      	add	r3, sp, #132	@ 0x84
 80067b6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80067b8:	a902      	add	r1, sp, #8
 80067ba:	9301      	str	r3, [sp, #4]
 80067bc:	f000 fa26 	bl	8006c0c <_svfiprintf_r>
 80067c0:	1c43      	adds	r3, r0, #1
 80067c2:	bfbc      	itt	lt
 80067c4:	238b      	movlt	r3, #139	@ 0x8b
 80067c6:	602b      	strlt	r3, [r5, #0]
 80067c8:	2c00      	cmp	r4, #0
 80067ca:	d0da      	beq.n	8006782 <sniprintf+0x16>
 80067cc:	2200      	movs	r2, #0
 80067ce:	9b02      	ldr	r3, [sp, #8]
 80067d0:	701a      	strb	r2, [r3, #0]
 80067d2:	e7d6      	b.n	8006782 <sniprintf+0x16>
 80067d4:	200000d4 	.word	0x200000d4

080067d8 <__sread>:
 80067d8:	b510      	push	{r4, lr}
 80067da:	460c      	mov	r4, r1
 80067dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067e0:	f000 f868 	bl	80068b4 <_read_r>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	bfab      	itete	ge
 80067e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80067ea:	89a3      	ldrhlt	r3, [r4, #12]
 80067ec:	181b      	addge	r3, r3, r0
 80067ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80067f2:	bfac      	ite	ge
 80067f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80067f6:	81a3      	strhlt	r3, [r4, #12]
 80067f8:	bd10      	pop	{r4, pc}

080067fa <__swrite>:
 80067fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067fe:	461f      	mov	r7, r3
 8006800:	898b      	ldrh	r3, [r1, #12]
 8006802:	4605      	mov	r5, r0
 8006804:	05db      	lsls	r3, r3, #23
 8006806:	460c      	mov	r4, r1
 8006808:	4616      	mov	r6, r2
 800680a:	d505      	bpl.n	8006818 <__swrite+0x1e>
 800680c:	2302      	movs	r3, #2
 800680e:	2200      	movs	r2, #0
 8006810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006814:	f000 f83c 	bl	8006890 <_lseek_r>
 8006818:	89a3      	ldrh	r3, [r4, #12]
 800681a:	4632      	mov	r2, r6
 800681c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006820:	81a3      	strh	r3, [r4, #12]
 8006822:	4628      	mov	r0, r5
 8006824:	463b      	mov	r3, r7
 8006826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800682a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800682e:	f000 b853 	b.w	80068d8 <_write_r>

08006832 <__sseek>:
 8006832:	b510      	push	{r4, lr}
 8006834:	460c      	mov	r4, r1
 8006836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800683a:	f000 f829 	bl	8006890 <_lseek_r>
 800683e:	1c43      	adds	r3, r0, #1
 8006840:	89a3      	ldrh	r3, [r4, #12]
 8006842:	bf15      	itete	ne
 8006844:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006846:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800684a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800684e:	81a3      	strheq	r3, [r4, #12]
 8006850:	bf18      	it	ne
 8006852:	81a3      	strhne	r3, [r4, #12]
 8006854:	bd10      	pop	{r4, pc}

08006856 <__sclose>:
 8006856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800685a:	f000 b809 	b.w	8006870 <_close_r>

0800685e <memset>:
 800685e:	4603      	mov	r3, r0
 8006860:	4402      	add	r2, r0
 8006862:	4293      	cmp	r3, r2
 8006864:	d100      	bne.n	8006868 <memset+0xa>
 8006866:	4770      	bx	lr
 8006868:	f803 1b01 	strb.w	r1, [r3], #1
 800686c:	e7f9      	b.n	8006862 <memset+0x4>
	...

08006870 <_close_r>:
 8006870:	b538      	push	{r3, r4, r5, lr}
 8006872:	2300      	movs	r3, #0
 8006874:	4d05      	ldr	r5, [pc, #20]	@ (800688c <_close_r+0x1c>)
 8006876:	4604      	mov	r4, r0
 8006878:	4608      	mov	r0, r1
 800687a:	602b      	str	r3, [r5, #0]
 800687c:	f7ff fc1c 	bl	80060b8 <_close>
 8006880:	1c43      	adds	r3, r0, #1
 8006882:	d102      	bne.n	800688a <_close_r+0x1a>
 8006884:	682b      	ldr	r3, [r5, #0]
 8006886:	b103      	cbz	r3, 800688a <_close_r+0x1a>
 8006888:	6023      	str	r3, [r4, #0]
 800688a:	bd38      	pop	{r3, r4, r5, pc}
 800688c:	20000648 	.word	0x20000648

08006890 <_lseek_r>:
 8006890:	b538      	push	{r3, r4, r5, lr}
 8006892:	4604      	mov	r4, r0
 8006894:	4608      	mov	r0, r1
 8006896:	4611      	mov	r1, r2
 8006898:	2200      	movs	r2, #0
 800689a:	4d05      	ldr	r5, [pc, #20]	@ (80068b0 <_lseek_r+0x20>)
 800689c:	602a      	str	r2, [r5, #0]
 800689e:	461a      	mov	r2, r3
 80068a0:	f7ff fbcb 	bl	800603a <_lseek>
 80068a4:	1c43      	adds	r3, r0, #1
 80068a6:	d102      	bne.n	80068ae <_lseek_r+0x1e>
 80068a8:	682b      	ldr	r3, [r5, #0]
 80068aa:	b103      	cbz	r3, 80068ae <_lseek_r+0x1e>
 80068ac:	6023      	str	r3, [r4, #0]
 80068ae:	bd38      	pop	{r3, r4, r5, pc}
 80068b0:	20000648 	.word	0x20000648

080068b4 <_read_r>:
 80068b4:	b538      	push	{r3, r4, r5, lr}
 80068b6:	4604      	mov	r4, r0
 80068b8:	4608      	mov	r0, r1
 80068ba:	4611      	mov	r1, r2
 80068bc:	2200      	movs	r2, #0
 80068be:	4d05      	ldr	r5, [pc, #20]	@ (80068d4 <_read_r+0x20>)
 80068c0:	602a      	str	r2, [r5, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	f7ff fb63 	bl	8005f8e <_read>
 80068c8:	1c43      	adds	r3, r0, #1
 80068ca:	d102      	bne.n	80068d2 <_read_r+0x1e>
 80068cc:	682b      	ldr	r3, [r5, #0]
 80068ce:	b103      	cbz	r3, 80068d2 <_read_r+0x1e>
 80068d0:	6023      	str	r3, [r4, #0]
 80068d2:	bd38      	pop	{r3, r4, r5, pc}
 80068d4:	20000648 	.word	0x20000648

080068d8 <_write_r>:
 80068d8:	b538      	push	{r3, r4, r5, lr}
 80068da:	4604      	mov	r4, r0
 80068dc:	4608      	mov	r0, r1
 80068de:	4611      	mov	r1, r2
 80068e0:	2200      	movs	r2, #0
 80068e2:	4d05      	ldr	r5, [pc, #20]	@ (80068f8 <_write_r+0x20>)
 80068e4:	602a      	str	r2, [r5, #0]
 80068e6:	461a      	mov	r2, r3
 80068e8:	f7ff fbb9 	bl	800605e <_write>
 80068ec:	1c43      	adds	r3, r0, #1
 80068ee:	d102      	bne.n	80068f6 <_write_r+0x1e>
 80068f0:	682b      	ldr	r3, [r5, #0]
 80068f2:	b103      	cbz	r3, 80068f6 <_write_r+0x1e>
 80068f4:	6023      	str	r3, [r4, #0]
 80068f6:	bd38      	pop	{r3, r4, r5, pc}
 80068f8:	20000648 	.word	0x20000648

080068fc <__errno>:
 80068fc:	4b01      	ldr	r3, [pc, #4]	@ (8006904 <__errno+0x8>)
 80068fe:	6818      	ldr	r0, [r3, #0]
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	200000d4 	.word	0x200000d4

08006908 <__libc_init_array>:
 8006908:	b570      	push	{r4, r5, r6, lr}
 800690a:	2600      	movs	r6, #0
 800690c:	4d0c      	ldr	r5, [pc, #48]	@ (8006940 <__libc_init_array+0x38>)
 800690e:	4c0d      	ldr	r4, [pc, #52]	@ (8006944 <__libc_init_array+0x3c>)
 8006910:	1b64      	subs	r4, r4, r5
 8006912:	10a4      	asrs	r4, r4, #2
 8006914:	42a6      	cmp	r6, r4
 8006916:	d109      	bne.n	800692c <__libc_init_array+0x24>
 8006918:	f000 fed8 	bl	80076cc <_init>
 800691c:	2600      	movs	r6, #0
 800691e:	4d0a      	ldr	r5, [pc, #40]	@ (8006948 <__libc_init_array+0x40>)
 8006920:	4c0a      	ldr	r4, [pc, #40]	@ (800694c <__libc_init_array+0x44>)
 8006922:	1b64      	subs	r4, r4, r5
 8006924:	10a4      	asrs	r4, r4, #2
 8006926:	42a6      	cmp	r6, r4
 8006928:	d105      	bne.n	8006936 <__libc_init_array+0x2e>
 800692a:	bd70      	pop	{r4, r5, r6, pc}
 800692c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006930:	4798      	blx	r3
 8006932:	3601      	adds	r6, #1
 8006934:	e7ee      	b.n	8006914 <__libc_init_array+0xc>
 8006936:	f855 3b04 	ldr.w	r3, [r5], #4
 800693a:	4798      	blx	r3
 800693c:	3601      	adds	r6, #1
 800693e:	e7f2      	b.n	8006926 <__libc_init_array+0x1e>
 8006940:	08007ac0 	.word	0x08007ac0
 8006944:	08007ac0 	.word	0x08007ac0
 8006948:	08007ac0 	.word	0x08007ac0
 800694c:	08007ac4 	.word	0x08007ac4

08006950 <__retarget_lock_init_recursive>:
 8006950:	4770      	bx	lr

08006952 <__retarget_lock_acquire_recursive>:
 8006952:	4770      	bx	lr

08006954 <__retarget_lock_release_recursive>:
 8006954:	4770      	bx	lr

08006956 <strcpy>:
 8006956:	4603      	mov	r3, r0
 8006958:	f811 2b01 	ldrb.w	r2, [r1], #1
 800695c:	f803 2b01 	strb.w	r2, [r3], #1
 8006960:	2a00      	cmp	r2, #0
 8006962:	d1f9      	bne.n	8006958 <strcpy+0x2>
 8006964:	4770      	bx	lr
	...

08006968 <_free_r>:
 8006968:	b538      	push	{r3, r4, r5, lr}
 800696a:	4605      	mov	r5, r0
 800696c:	2900      	cmp	r1, #0
 800696e:	d040      	beq.n	80069f2 <_free_r+0x8a>
 8006970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006974:	1f0c      	subs	r4, r1, #4
 8006976:	2b00      	cmp	r3, #0
 8006978:	bfb8      	it	lt
 800697a:	18e4      	addlt	r4, r4, r3
 800697c:	f000 f8de 	bl	8006b3c <__malloc_lock>
 8006980:	4a1c      	ldr	r2, [pc, #112]	@ (80069f4 <_free_r+0x8c>)
 8006982:	6813      	ldr	r3, [r2, #0]
 8006984:	b933      	cbnz	r3, 8006994 <_free_r+0x2c>
 8006986:	6063      	str	r3, [r4, #4]
 8006988:	6014      	str	r4, [r2, #0]
 800698a:	4628      	mov	r0, r5
 800698c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006990:	f000 b8da 	b.w	8006b48 <__malloc_unlock>
 8006994:	42a3      	cmp	r3, r4
 8006996:	d908      	bls.n	80069aa <_free_r+0x42>
 8006998:	6820      	ldr	r0, [r4, #0]
 800699a:	1821      	adds	r1, r4, r0
 800699c:	428b      	cmp	r3, r1
 800699e:	bf01      	itttt	eq
 80069a0:	6819      	ldreq	r1, [r3, #0]
 80069a2:	685b      	ldreq	r3, [r3, #4]
 80069a4:	1809      	addeq	r1, r1, r0
 80069a6:	6021      	streq	r1, [r4, #0]
 80069a8:	e7ed      	b.n	8006986 <_free_r+0x1e>
 80069aa:	461a      	mov	r2, r3
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	b10b      	cbz	r3, 80069b4 <_free_r+0x4c>
 80069b0:	42a3      	cmp	r3, r4
 80069b2:	d9fa      	bls.n	80069aa <_free_r+0x42>
 80069b4:	6811      	ldr	r1, [r2, #0]
 80069b6:	1850      	adds	r0, r2, r1
 80069b8:	42a0      	cmp	r0, r4
 80069ba:	d10b      	bne.n	80069d4 <_free_r+0x6c>
 80069bc:	6820      	ldr	r0, [r4, #0]
 80069be:	4401      	add	r1, r0
 80069c0:	1850      	adds	r0, r2, r1
 80069c2:	4283      	cmp	r3, r0
 80069c4:	6011      	str	r1, [r2, #0]
 80069c6:	d1e0      	bne.n	800698a <_free_r+0x22>
 80069c8:	6818      	ldr	r0, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	4408      	add	r0, r1
 80069ce:	6010      	str	r0, [r2, #0]
 80069d0:	6053      	str	r3, [r2, #4]
 80069d2:	e7da      	b.n	800698a <_free_r+0x22>
 80069d4:	d902      	bls.n	80069dc <_free_r+0x74>
 80069d6:	230c      	movs	r3, #12
 80069d8:	602b      	str	r3, [r5, #0]
 80069da:	e7d6      	b.n	800698a <_free_r+0x22>
 80069dc:	6820      	ldr	r0, [r4, #0]
 80069de:	1821      	adds	r1, r4, r0
 80069e0:	428b      	cmp	r3, r1
 80069e2:	bf01      	itttt	eq
 80069e4:	6819      	ldreq	r1, [r3, #0]
 80069e6:	685b      	ldreq	r3, [r3, #4]
 80069e8:	1809      	addeq	r1, r1, r0
 80069ea:	6021      	streq	r1, [r4, #0]
 80069ec:	6063      	str	r3, [r4, #4]
 80069ee:	6054      	str	r4, [r2, #4]
 80069f0:	e7cb      	b.n	800698a <_free_r+0x22>
 80069f2:	bd38      	pop	{r3, r4, r5, pc}
 80069f4:	20000654 	.word	0x20000654

080069f8 <sbrk_aligned>:
 80069f8:	b570      	push	{r4, r5, r6, lr}
 80069fa:	4e0f      	ldr	r6, [pc, #60]	@ (8006a38 <sbrk_aligned+0x40>)
 80069fc:	460c      	mov	r4, r1
 80069fe:	6831      	ldr	r1, [r6, #0]
 8006a00:	4605      	mov	r5, r0
 8006a02:	b911      	cbnz	r1, 8006a0a <sbrk_aligned+0x12>
 8006a04:	f000 fd7c 	bl	8007500 <_sbrk_r>
 8006a08:	6030      	str	r0, [r6, #0]
 8006a0a:	4621      	mov	r1, r4
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	f000 fd77 	bl	8007500 <_sbrk_r>
 8006a12:	1c43      	adds	r3, r0, #1
 8006a14:	d103      	bne.n	8006a1e <sbrk_aligned+0x26>
 8006a16:	f04f 34ff 	mov.w	r4, #4294967295
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	bd70      	pop	{r4, r5, r6, pc}
 8006a1e:	1cc4      	adds	r4, r0, #3
 8006a20:	f024 0403 	bic.w	r4, r4, #3
 8006a24:	42a0      	cmp	r0, r4
 8006a26:	d0f8      	beq.n	8006a1a <sbrk_aligned+0x22>
 8006a28:	1a21      	subs	r1, r4, r0
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f000 fd68 	bl	8007500 <_sbrk_r>
 8006a30:	3001      	adds	r0, #1
 8006a32:	d1f2      	bne.n	8006a1a <sbrk_aligned+0x22>
 8006a34:	e7ef      	b.n	8006a16 <sbrk_aligned+0x1e>
 8006a36:	bf00      	nop
 8006a38:	20000650 	.word	0x20000650

08006a3c <_malloc_r>:
 8006a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a40:	1ccd      	adds	r5, r1, #3
 8006a42:	f025 0503 	bic.w	r5, r5, #3
 8006a46:	3508      	adds	r5, #8
 8006a48:	2d0c      	cmp	r5, #12
 8006a4a:	bf38      	it	cc
 8006a4c:	250c      	movcc	r5, #12
 8006a4e:	2d00      	cmp	r5, #0
 8006a50:	4606      	mov	r6, r0
 8006a52:	db01      	blt.n	8006a58 <_malloc_r+0x1c>
 8006a54:	42a9      	cmp	r1, r5
 8006a56:	d904      	bls.n	8006a62 <_malloc_r+0x26>
 8006a58:	230c      	movs	r3, #12
 8006a5a:	6033      	str	r3, [r6, #0]
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b38 <_malloc_r+0xfc>
 8006a66:	f000 f869 	bl	8006b3c <__malloc_lock>
 8006a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8006a6e:	461c      	mov	r4, r3
 8006a70:	bb44      	cbnz	r4, 8006ac4 <_malloc_r+0x88>
 8006a72:	4629      	mov	r1, r5
 8006a74:	4630      	mov	r0, r6
 8006a76:	f7ff ffbf 	bl	80069f8 <sbrk_aligned>
 8006a7a:	1c43      	adds	r3, r0, #1
 8006a7c:	4604      	mov	r4, r0
 8006a7e:	d158      	bne.n	8006b32 <_malloc_r+0xf6>
 8006a80:	f8d8 4000 	ldr.w	r4, [r8]
 8006a84:	4627      	mov	r7, r4
 8006a86:	2f00      	cmp	r7, #0
 8006a88:	d143      	bne.n	8006b12 <_malloc_r+0xd6>
 8006a8a:	2c00      	cmp	r4, #0
 8006a8c:	d04b      	beq.n	8006b26 <_malloc_r+0xea>
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	4639      	mov	r1, r7
 8006a92:	4630      	mov	r0, r6
 8006a94:	eb04 0903 	add.w	r9, r4, r3
 8006a98:	f000 fd32 	bl	8007500 <_sbrk_r>
 8006a9c:	4581      	cmp	r9, r0
 8006a9e:	d142      	bne.n	8006b26 <_malloc_r+0xea>
 8006aa0:	6821      	ldr	r1, [r4, #0]
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	1a6d      	subs	r5, r5, r1
 8006aa6:	4629      	mov	r1, r5
 8006aa8:	f7ff ffa6 	bl	80069f8 <sbrk_aligned>
 8006aac:	3001      	adds	r0, #1
 8006aae:	d03a      	beq.n	8006b26 <_malloc_r+0xea>
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	442b      	add	r3, r5
 8006ab4:	6023      	str	r3, [r4, #0]
 8006ab6:	f8d8 3000 	ldr.w	r3, [r8]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	bb62      	cbnz	r2, 8006b18 <_malloc_r+0xdc>
 8006abe:	f8c8 7000 	str.w	r7, [r8]
 8006ac2:	e00f      	b.n	8006ae4 <_malloc_r+0xa8>
 8006ac4:	6822      	ldr	r2, [r4, #0]
 8006ac6:	1b52      	subs	r2, r2, r5
 8006ac8:	d420      	bmi.n	8006b0c <_malloc_r+0xd0>
 8006aca:	2a0b      	cmp	r2, #11
 8006acc:	d917      	bls.n	8006afe <_malloc_r+0xc2>
 8006ace:	1961      	adds	r1, r4, r5
 8006ad0:	42a3      	cmp	r3, r4
 8006ad2:	6025      	str	r5, [r4, #0]
 8006ad4:	bf18      	it	ne
 8006ad6:	6059      	strne	r1, [r3, #4]
 8006ad8:	6863      	ldr	r3, [r4, #4]
 8006ada:	bf08      	it	eq
 8006adc:	f8c8 1000 	streq.w	r1, [r8]
 8006ae0:	5162      	str	r2, [r4, r5]
 8006ae2:	604b      	str	r3, [r1, #4]
 8006ae4:	4630      	mov	r0, r6
 8006ae6:	f000 f82f 	bl	8006b48 <__malloc_unlock>
 8006aea:	f104 000b 	add.w	r0, r4, #11
 8006aee:	1d23      	adds	r3, r4, #4
 8006af0:	f020 0007 	bic.w	r0, r0, #7
 8006af4:	1ac2      	subs	r2, r0, r3
 8006af6:	bf1c      	itt	ne
 8006af8:	1a1b      	subne	r3, r3, r0
 8006afa:	50a3      	strne	r3, [r4, r2]
 8006afc:	e7af      	b.n	8006a5e <_malloc_r+0x22>
 8006afe:	6862      	ldr	r2, [r4, #4]
 8006b00:	42a3      	cmp	r3, r4
 8006b02:	bf0c      	ite	eq
 8006b04:	f8c8 2000 	streq.w	r2, [r8]
 8006b08:	605a      	strne	r2, [r3, #4]
 8006b0a:	e7eb      	b.n	8006ae4 <_malloc_r+0xa8>
 8006b0c:	4623      	mov	r3, r4
 8006b0e:	6864      	ldr	r4, [r4, #4]
 8006b10:	e7ae      	b.n	8006a70 <_malloc_r+0x34>
 8006b12:	463c      	mov	r4, r7
 8006b14:	687f      	ldr	r7, [r7, #4]
 8006b16:	e7b6      	b.n	8006a86 <_malloc_r+0x4a>
 8006b18:	461a      	mov	r2, r3
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	42a3      	cmp	r3, r4
 8006b1e:	d1fb      	bne.n	8006b18 <_malloc_r+0xdc>
 8006b20:	2300      	movs	r3, #0
 8006b22:	6053      	str	r3, [r2, #4]
 8006b24:	e7de      	b.n	8006ae4 <_malloc_r+0xa8>
 8006b26:	230c      	movs	r3, #12
 8006b28:	4630      	mov	r0, r6
 8006b2a:	6033      	str	r3, [r6, #0]
 8006b2c:	f000 f80c 	bl	8006b48 <__malloc_unlock>
 8006b30:	e794      	b.n	8006a5c <_malloc_r+0x20>
 8006b32:	6005      	str	r5, [r0, #0]
 8006b34:	e7d6      	b.n	8006ae4 <_malloc_r+0xa8>
 8006b36:	bf00      	nop
 8006b38:	20000654 	.word	0x20000654

08006b3c <__malloc_lock>:
 8006b3c:	4801      	ldr	r0, [pc, #4]	@ (8006b44 <__malloc_lock+0x8>)
 8006b3e:	f7ff bf08 	b.w	8006952 <__retarget_lock_acquire_recursive>
 8006b42:	bf00      	nop
 8006b44:	2000064c 	.word	0x2000064c

08006b48 <__malloc_unlock>:
 8006b48:	4801      	ldr	r0, [pc, #4]	@ (8006b50 <__malloc_unlock+0x8>)
 8006b4a:	f7ff bf03 	b.w	8006954 <__retarget_lock_release_recursive>
 8006b4e:	bf00      	nop
 8006b50:	2000064c 	.word	0x2000064c

08006b54 <__ssputs_r>:
 8006b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b58:	461f      	mov	r7, r3
 8006b5a:	688e      	ldr	r6, [r1, #8]
 8006b5c:	4682      	mov	sl, r0
 8006b5e:	42be      	cmp	r6, r7
 8006b60:	460c      	mov	r4, r1
 8006b62:	4690      	mov	r8, r2
 8006b64:	680b      	ldr	r3, [r1, #0]
 8006b66:	d82d      	bhi.n	8006bc4 <__ssputs_r+0x70>
 8006b68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006b70:	d026      	beq.n	8006bc0 <__ssputs_r+0x6c>
 8006b72:	6965      	ldr	r5, [r4, #20]
 8006b74:	6909      	ldr	r1, [r1, #16]
 8006b76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b7a:	eba3 0901 	sub.w	r9, r3, r1
 8006b7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b82:	1c7b      	adds	r3, r7, #1
 8006b84:	444b      	add	r3, r9
 8006b86:	106d      	asrs	r5, r5, #1
 8006b88:	429d      	cmp	r5, r3
 8006b8a:	bf38      	it	cc
 8006b8c:	461d      	movcc	r5, r3
 8006b8e:	0553      	lsls	r3, r2, #21
 8006b90:	d527      	bpl.n	8006be2 <__ssputs_r+0x8e>
 8006b92:	4629      	mov	r1, r5
 8006b94:	f7ff ff52 	bl	8006a3c <_malloc_r>
 8006b98:	4606      	mov	r6, r0
 8006b9a:	b360      	cbz	r0, 8006bf6 <__ssputs_r+0xa2>
 8006b9c:	464a      	mov	r2, r9
 8006b9e:	6921      	ldr	r1, [r4, #16]
 8006ba0:	f000 fccc 	bl	800753c <memcpy>
 8006ba4:	89a3      	ldrh	r3, [r4, #12]
 8006ba6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bae:	81a3      	strh	r3, [r4, #12]
 8006bb0:	6126      	str	r6, [r4, #16]
 8006bb2:	444e      	add	r6, r9
 8006bb4:	6026      	str	r6, [r4, #0]
 8006bb6:	463e      	mov	r6, r7
 8006bb8:	6165      	str	r5, [r4, #20]
 8006bba:	eba5 0509 	sub.w	r5, r5, r9
 8006bbe:	60a5      	str	r5, [r4, #8]
 8006bc0:	42be      	cmp	r6, r7
 8006bc2:	d900      	bls.n	8006bc6 <__ssputs_r+0x72>
 8006bc4:	463e      	mov	r6, r7
 8006bc6:	4632      	mov	r2, r6
 8006bc8:	4641      	mov	r1, r8
 8006bca:	6820      	ldr	r0, [r4, #0]
 8006bcc:	f000 fc7e 	bl	80074cc <memmove>
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	68a3      	ldr	r3, [r4, #8]
 8006bd4:	1b9b      	subs	r3, r3, r6
 8006bd6:	60a3      	str	r3, [r4, #8]
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	4433      	add	r3, r6
 8006bdc:	6023      	str	r3, [r4, #0]
 8006bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006be2:	462a      	mov	r2, r5
 8006be4:	f000 fcb8 	bl	8007558 <_realloc_r>
 8006be8:	4606      	mov	r6, r0
 8006bea:	2800      	cmp	r0, #0
 8006bec:	d1e0      	bne.n	8006bb0 <__ssputs_r+0x5c>
 8006bee:	4650      	mov	r0, sl
 8006bf0:	6921      	ldr	r1, [r4, #16]
 8006bf2:	f7ff feb9 	bl	8006968 <_free_r>
 8006bf6:	230c      	movs	r3, #12
 8006bf8:	f8ca 3000 	str.w	r3, [sl]
 8006bfc:	89a3      	ldrh	r3, [r4, #12]
 8006bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8006c02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c06:	81a3      	strh	r3, [r4, #12]
 8006c08:	e7e9      	b.n	8006bde <__ssputs_r+0x8a>
	...

08006c0c <_svfiprintf_r>:
 8006c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c10:	4698      	mov	r8, r3
 8006c12:	898b      	ldrh	r3, [r1, #12]
 8006c14:	4607      	mov	r7, r0
 8006c16:	061b      	lsls	r3, r3, #24
 8006c18:	460d      	mov	r5, r1
 8006c1a:	4614      	mov	r4, r2
 8006c1c:	b09d      	sub	sp, #116	@ 0x74
 8006c1e:	d510      	bpl.n	8006c42 <_svfiprintf_r+0x36>
 8006c20:	690b      	ldr	r3, [r1, #16]
 8006c22:	b973      	cbnz	r3, 8006c42 <_svfiprintf_r+0x36>
 8006c24:	2140      	movs	r1, #64	@ 0x40
 8006c26:	f7ff ff09 	bl	8006a3c <_malloc_r>
 8006c2a:	6028      	str	r0, [r5, #0]
 8006c2c:	6128      	str	r0, [r5, #16]
 8006c2e:	b930      	cbnz	r0, 8006c3e <_svfiprintf_r+0x32>
 8006c30:	230c      	movs	r3, #12
 8006c32:	603b      	str	r3, [r7, #0]
 8006c34:	f04f 30ff 	mov.w	r0, #4294967295
 8006c38:	b01d      	add	sp, #116	@ 0x74
 8006c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c3e:	2340      	movs	r3, #64	@ 0x40
 8006c40:	616b      	str	r3, [r5, #20]
 8006c42:	2300      	movs	r3, #0
 8006c44:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c46:	2320      	movs	r3, #32
 8006c48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c4c:	2330      	movs	r3, #48	@ 0x30
 8006c4e:	f04f 0901 	mov.w	r9, #1
 8006c52:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c56:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006df0 <_svfiprintf_r+0x1e4>
 8006c5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c5e:	4623      	mov	r3, r4
 8006c60:	469a      	mov	sl, r3
 8006c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c66:	b10a      	cbz	r2, 8006c6c <_svfiprintf_r+0x60>
 8006c68:	2a25      	cmp	r2, #37	@ 0x25
 8006c6a:	d1f9      	bne.n	8006c60 <_svfiprintf_r+0x54>
 8006c6c:	ebba 0b04 	subs.w	fp, sl, r4
 8006c70:	d00b      	beq.n	8006c8a <_svfiprintf_r+0x7e>
 8006c72:	465b      	mov	r3, fp
 8006c74:	4622      	mov	r2, r4
 8006c76:	4629      	mov	r1, r5
 8006c78:	4638      	mov	r0, r7
 8006c7a:	f7ff ff6b 	bl	8006b54 <__ssputs_r>
 8006c7e:	3001      	adds	r0, #1
 8006c80:	f000 80a7 	beq.w	8006dd2 <_svfiprintf_r+0x1c6>
 8006c84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c86:	445a      	add	r2, fp
 8006c88:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f000 809f 	beq.w	8006dd2 <_svfiprintf_r+0x1c6>
 8006c94:	2300      	movs	r3, #0
 8006c96:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c9e:	f10a 0a01 	add.w	sl, sl, #1
 8006ca2:	9304      	str	r3, [sp, #16]
 8006ca4:	9307      	str	r3, [sp, #28]
 8006ca6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006caa:	931a      	str	r3, [sp, #104]	@ 0x68
 8006cac:	4654      	mov	r4, sl
 8006cae:	2205      	movs	r2, #5
 8006cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cb4:	484e      	ldr	r0, [pc, #312]	@ (8006df0 <_svfiprintf_r+0x1e4>)
 8006cb6:	f000 fc33 	bl	8007520 <memchr>
 8006cba:	9a04      	ldr	r2, [sp, #16]
 8006cbc:	b9d8      	cbnz	r0, 8006cf6 <_svfiprintf_r+0xea>
 8006cbe:	06d0      	lsls	r0, r2, #27
 8006cc0:	bf44      	itt	mi
 8006cc2:	2320      	movmi	r3, #32
 8006cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cc8:	0711      	lsls	r1, r2, #28
 8006cca:	bf44      	itt	mi
 8006ccc:	232b      	movmi	r3, #43	@ 0x2b
 8006cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8006cd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cd8:	d015      	beq.n	8006d06 <_svfiprintf_r+0xfa>
 8006cda:	4654      	mov	r4, sl
 8006cdc:	2000      	movs	r0, #0
 8006cde:	f04f 0c0a 	mov.w	ip, #10
 8006ce2:	9a07      	ldr	r2, [sp, #28]
 8006ce4:	4621      	mov	r1, r4
 8006ce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cea:	3b30      	subs	r3, #48	@ 0x30
 8006cec:	2b09      	cmp	r3, #9
 8006cee:	d94b      	bls.n	8006d88 <_svfiprintf_r+0x17c>
 8006cf0:	b1b0      	cbz	r0, 8006d20 <_svfiprintf_r+0x114>
 8006cf2:	9207      	str	r2, [sp, #28]
 8006cf4:	e014      	b.n	8006d20 <_svfiprintf_r+0x114>
 8006cf6:	eba0 0308 	sub.w	r3, r0, r8
 8006cfa:	fa09 f303 	lsl.w	r3, r9, r3
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	46a2      	mov	sl, r4
 8006d02:	9304      	str	r3, [sp, #16]
 8006d04:	e7d2      	b.n	8006cac <_svfiprintf_r+0xa0>
 8006d06:	9b03      	ldr	r3, [sp, #12]
 8006d08:	1d19      	adds	r1, r3, #4
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	9103      	str	r1, [sp, #12]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	bfbb      	ittet	lt
 8006d12:	425b      	neglt	r3, r3
 8006d14:	f042 0202 	orrlt.w	r2, r2, #2
 8006d18:	9307      	strge	r3, [sp, #28]
 8006d1a:	9307      	strlt	r3, [sp, #28]
 8006d1c:	bfb8      	it	lt
 8006d1e:	9204      	strlt	r2, [sp, #16]
 8006d20:	7823      	ldrb	r3, [r4, #0]
 8006d22:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d24:	d10a      	bne.n	8006d3c <_svfiprintf_r+0x130>
 8006d26:	7863      	ldrb	r3, [r4, #1]
 8006d28:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d2a:	d132      	bne.n	8006d92 <_svfiprintf_r+0x186>
 8006d2c:	9b03      	ldr	r3, [sp, #12]
 8006d2e:	3402      	adds	r4, #2
 8006d30:	1d1a      	adds	r2, r3, #4
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	9203      	str	r2, [sp, #12]
 8006d36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d3a:	9305      	str	r3, [sp, #20]
 8006d3c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006df4 <_svfiprintf_r+0x1e8>
 8006d40:	2203      	movs	r2, #3
 8006d42:	4650      	mov	r0, sl
 8006d44:	7821      	ldrb	r1, [r4, #0]
 8006d46:	f000 fbeb 	bl	8007520 <memchr>
 8006d4a:	b138      	cbz	r0, 8006d5c <_svfiprintf_r+0x150>
 8006d4c:	2240      	movs	r2, #64	@ 0x40
 8006d4e:	9b04      	ldr	r3, [sp, #16]
 8006d50:	eba0 000a 	sub.w	r0, r0, sl
 8006d54:	4082      	lsls	r2, r0
 8006d56:	4313      	orrs	r3, r2
 8006d58:	3401      	adds	r4, #1
 8006d5a:	9304      	str	r3, [sp, #16]
 8006d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d60:	2206      	movs	r2, #6
 8006d62:	4825      	ldr	r0, [pc, #148]	@ (8006df8 <_svfiprintf_r+0x1ec>)
 8006d64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d68:	f000 fbda 	bl	8007520 <memchr>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	d036      	beq.n	8006dde <_svfiprintf_r+0x1d2>
 8006d70:	4b22      	ldr	r3, [pc, #136]	@ (8006dfc <_svfiprintf_r+0x1f0>)
 8006d72:	bb1b      	cbnz	r3, 8006dbc <_svfiprintf_r+0x1b0>
 8006d74:	9b03      	ldr	r3, [sp, #12]
 8006d76:	3307      	adds	r3, #7
 8006d78:	f023 0307 	bic.w	r3, r3, #7
 8006d7c:	3308      	adds	r3, #8
 8006d7e:	9303      	str	r3, [sp, #12]
 8006d80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d82:	4433      	add	r3, r6
 8006d84:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d86:	e76a      	b.n	8006c5e <_svfiprintf_r+0x52>
 8006d88:	460c      	mov	r4, r1
 8006d8a:	2001      	movs	r0, #1
 8006d8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d90:	e7a8      	b.n	8006ce4 <_svfiprintf_r+0xd8>
 8006d92:	2300      	movs	r3, #0
 8006d94:	f04f 0c0a 	mov.w	ip, #10
 8006d98:	4619      	mov	r1, r3
 8006d9a:	3401      	adds	r4, #1
 8006d9c:	9305      	str	r3, [sp, #20]
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006da4:	3a30      	subs	r2, #48	@ 0x30
 8006da6:	2a09      	cmp	r2, #9
 8006da8:	d903      	bls.n	8006db2 <_svfiprintf_r+0x1a6>
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d0c6      	beq.n	8006d3c <_svfiprintf_r+0x130>
 8006dae:	9105      	str	r1, [sp, #20]
 8006db0:	e7c4      	b.n	8006d3c <_svfiprintf_r+0x130>
 8006db2:	4604      	mov	r4, r0
 8006db4:	2301      	movs	r3, #1
 8006db6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dba:	e7f0      	b.n	8006d9e <_svfiprintf_r+0x192>
 8006dbc:	ab03      	add	r3, sp, #12
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	462a      	mov	r2, r5
 8006dc2:	4638      	mov	r0, r7
 8006dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8006e00 <_svfiprintf_r+0x1f4>)
 8006dc6:	a904      	add	r1, sp, #16
 8006dc8:	f3af 8000 	nop.w
 8006dcc:	1c42      	adds	r2, r0, #1
 8006dce:	4606      	mov	r6, r0
 8006dd0:	d1d6      	bne.n	8006d80 <_svfiprintf_r+0x174>
 8006dd2:	89ab      	ldrh	r3, [r5, #12]
 8006dd4:	065b      	lsls	r3, r3, #25
 8006dd6:	f53f af2d 	bmi.w	8006c34 <_svfiprintf_r+0x28>
 8006dda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ddc:	e72c      	b.n	8006c38 <_svfiprintf_r+0x2c>
 8006dde:	ab03      	add	r3, sp, #12
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	462a      	mov	r2, r5
 8006de4:	4638      	mov	r0, r7
 8006de6:	4b06      	ldr	r3, [pc, #24]	@ (8006e00 <_svfiprintf_r+0x1f4>)
 8006de8:	a904      	add	r1, sp, #16
 8006dea:	f000 f9bd 	bl	8007168 <_printf_i>
 8006dee:	e7ed      	b.n	8006dcc <_svfiprintf_r+0x1c0>
 8006df0:	08007a82 	.word	0x08007a82
 8006df4:	08007a88 	.word	0x08007a88
 8006df8:	08007a8c 	.word	0x08007a8c
 8006dfc:	00000000 	.word	0x00000000
 8006e00:	08006b55 	.word	0x08006b55

08006e04 <__sfputc_r>:
 8006e04:	6893      	ldr	r3, [r2, #8]
 8006e06:	b410      	push	{r4}
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	6093      	str	r3, [r2, #8]
 8006e0e:	da07      	bge.n	8006e20 <__sfputc_r+0x1c>
 8006e10:	6994      	ldr	r4, [r2, #24]
 8006e12:	42a3      	cmp	r3, r4
 8006e14:	db01      	blt.n	8006e1a <__sfputc_r+0x16>
 8006e16:	290a      	cmp	r1, #10
 8006e18:	d102      	bne.n	8006e20 <__sfputc_r+0x1c>
 8006e1a:	bc10      	pop	{r4}
 8006e1c:	f000 bac2 	b.w	80073a4 <__swbuf_r>
 8006e20:	6813      	ldr	r3, [r2, #0]
 8006e22:	1c58      	adds	r0, r3, #1
 8006e24:	6010      	str	r0, [r2, #0]
 8006e26:	7019      	strb	r1, [r3, #0]
 8006e28:	4608      	mov	r0, r1
 8006e2a:	bc10      	pop	{r4}
 8006e2c:	4770      	bx	lr

08006e2e <__sfputs_r>:
 8006e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e30:	4606      	mov	r6, r0
 8006e32:	460f      	mov	r7, r1
 8006e34:	4614      	mov	r4, r2
 8006e36:	18d5      	adds	r5, r2, r3
 8006e38:	42ac      	cmp	r4, r5
 8006e3a:	d101      	bne.n	8006e40 <__sfputs_r+0x12>
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	e007      	b.n	8006e50 <__sfputs_r+0x22>
 8006e40:	463a      	mov	r2, r7
 8006e42:	4630      	mov	r0, r6
 8006e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e48:	f7ff ffdc 	bl	8006e04 <__sfputc_r>
 8006e4c:	1c43      	adds	r3, r0, #1
 8006e4e:	d1f3      	bne.n	8006e38 <__sfputs_r+0xa>
 8006e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e54 <_vfiprintf_r>:
 8006e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e58:	460d      	mov	r5, r1
 8006e5a:	4614      	mov	r4, r2
 8006e5c:	4698      	mov	r8, r3
 8006e5e:	4606      	mov	r6, r0
 8006e60:	b09d      	sub	sp, #116	@ 0x74
 8006e62:	b118      	cbz	r0, 8006e6c <_vfiprintf_r+0x18>
 8006e64:	6a03      	ldr	r3, [r0, #32]
 8006e66:	b90b      	cbnz	r3, 8006e6c <_vfiprintf_r+0x18>
 8006e68:	f7ff fc38 	bl	80066dc <__sinit>
 8006e6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e6e:	07d9      	lsls	r1, r3, #31
 8006e70:	d405      	bmi.n	8006e7e <_vfiprintf_r+0x2a>
 8006e72:	89ab      	ldrh	r3, [r5, #12]
 8006e74:	059a      	lsls	r2, r3, #22
 8006e76:	d402      	bmi.n	8006e7e <_vfiprintf_r+0x2a>
 8006e78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e7a:	f7ff fd6a 	bl	8006952 <__retarget_lock_acquire_recursive>
 8006e7e:	89ab      	ldrh	r3, [r5, #12]
 8006e80:	071b      	lsls	r3, r3, #28
 8006e82:	d501      	bpl.n	8006e88 <_vfiprintf_r+0x34>
 8006e84:	692b      	ldr	r3, [r5, #16]
 8006e86:	b99b      	cbnz	r3, 8006eb0 <_vfiprintf_r+0x5c>
 8006e88:	4629      	mov	r1, r5
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	f000 fac8 	bl	8007420 <__swsetup_r>
 8006e90:	b170      	cbz	r0, 8006eb0 <_vfiprintf_r+0x5c>
 8006e92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e94:	07dc      	lsls	r4, r3, #31
 8006e96:	d504      	bpl.n	8006ea2 <_vfiprintf_r+0x4e>
 8006e98:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9c:	b01d      	add	sp, #116	@ 0x74
 8006e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea2:	89ab      	ldrh	r3, [r5, #12]
 8006ea4:	0598      	lsls	r0, r3, #22
 8006ea6:	d4f7      	bmi.n	8006e98 <_vfiprintf_r+0x44>
 8006ea8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006eaa:	f7ff fd53 	bl	8006954 <__retarget_lock_release_recursive>
 8006eae:	e7f3      	b.n	8006e98 <_vfiprintf_r+0x44>
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eb4:	2320      	movs	r3, #32
 8006eb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006eba:	2330      	movs	r3, #48	@ 0x30
 8006ebc:	f04f 0901 	mov.w	r9, #1
 8006ec0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ec4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007070 <_vfiprintf_r+0x21c>
 8006ec8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ecc:	4623      	mov	r3, r4
 8006ece:	469a      	mov	sl, r3
 8006ed0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ed4:	b10a      	cbz	r2, 8006eda <_vfiprintf_r+0x86>
 8006ed6:	2a25      	cmp	r2, #37	@ 0x25
 8006ed8:	d1f9      	bne.n	8006ece <_vfiprintf_r+0x7a>
 8006eda:	ebba 0b04 	subs.w	fp, sl, r4
 8006ede:	d00b      	beq.n	8006ef8 <_vfiprintf_r+0xa4>
 8006ee0:	465b      	mov	r3, fp
 8006ee2:	4622      	mov	r2, r4
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	f7ff ffa1 	bl	8006e2e <__sfputs_r>
 8006eec:	3001      	adds	r0, #1
 8006eee:	f000 80a7 	beq.w	8007040 <_vfiprintf_r+0x1ec>
 8006ef2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ef4:	445a      	add	r2, fp
 8006ef6:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 809f 	beq.w	8007040 <_vfiprintf_r+0x1ec>
 8006f02:	2300      	movs	r3, #0
 8006f04:	f04f 32ff 	mov.w	r2, #4294967295
 8006f08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f0c:	f10a 0a01 	add.w	sl, sl, #1
 8006f10:	9304      	str	r3, [sp, #16]
 8006f12:	9307      	str	r3, [sp, #28]
 8006f14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f18:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f1a:	4654      	mov	r4, sl
 8006f1c:	2205      	movs	r2, #5
 8006f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f22:	4853      	ldr	r0, [pc, #332]	@ (8007070 <_vfiprintf_r+0x21c>)
 8006f24:	f000 fafc 	bl	8007520 <memchr>
 8006f28:	9a04      	ldr	r2, [sp, #16]
 8006f2a:	b9d8      	cbnz	r0, 8006f64 <_vfiprintf_r+0x110>
 8006f2c:	06d1      	lsls	r1, r2, #27
 8006f2e:	bf44      	itt	mi
 8006f30:	2320      	movmi	r3, #32
 8006f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f36:	0713      	lsls	r3, r2, #28
 8006f38:	bf44      	itt	mi
 8006f3a:	232b      	movmi	r3, #43	@ 0x2b
 8006f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f40:	f89a 3000 	ldrb.w	r3, [sl]
 8006f44:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f46:	d015      	beq.n	8006f74 <_vfiprintf_r+0x120>
 8006f48:	4654      	mov	r4, sl
 8006f4a:	2000      	movs	r0, #0
 8006f4c:	f04f 0c0a 	mov.w	ip, #10
 8006f50:	9a07      	ldr	r2, [sp, #28]
 8006f52:	4621      	mov	r1, r4
 8006f54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f58:	3b30      	subs	r3, #48	@ 0x30
 8006f5a:	2b09      	cmp	r3, #9
 8006f5c:	d94b      	bls.n	8006ff6 <_vfiprintf_r+0x1a2>
 8006f5e:	b1b0      	cbz	r0, 8006f8e <_vfiprintf_r+0x13a>
 8006f60:	9207      	str	r2, [sp, #28]
 8006f62:	e014      	b.n	8006f8e <_vfiprintf_r+0x13a>
 8006f64:	eba0 0308 	sub.w	r3, r0, r8
 8006f68:	fa09 f303 	lsl.w	r3, r9, r3
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	46a2      	mov	sl, r4
 8006f70:	9304      	str	r3, [sp, #16]
 8006f72:	e7d2      	b.n	8006f1a <_vfiprintf_r+0xc6>
 8006f74:	9b03      	ldr	r3, [sp, #12]
 8006f76:	1d19      	adds	r1, r3, #4
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	9103      	str	r1, [sp, #12]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	bfbb      	ittet	lt
 8006f80:	425b      	neglt	r3, r3
 8006f82:	f042 0202 	orrlt.w	r2, r2, #2
 8006f86:	9307      	strge	r3, [sp, #28]
 8006f88:	9307      	strlt	r3, [sp, #28]
 8006f8a:	bfb8      	it	lt
 8006f8c:	9204      	strlt	r2, [sp, #16]
 8006f8e:	7823      	ldrb	r3, [r4, #0]
 8006f90:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f92:	d10a      	bne.n	8006faa <_vfiprintf_r+0x156>
 8006f94:	7863      	ldrb	r3, [r4, #1]
 8006f96:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f98:	d132      	bne.n	8007000 <_vfiprintf_r+0x1ac>
 8006f9a:	9b03      	ldr	r3, [sp, #12]
 8006f9c:	3402      	adds	r4, #2
 8006f9e:	1d1a      	adds	r2, r3, #4
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	9203      	str	r2, [sp, #12]
 8006fa4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006fa8:	9305      	str	r3, [sp, #20]
 8006faa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007074 <_vfiprintf_r+0x220>
 8006fae:	2203      	movs	r2, #3
 8006fb0:	4650      	mov	r0, sl
 8006fb2:	7821      	ldrb	r1, [r4, #0]
 8006fb4:	f000 fab4 	bl	8007520 <memchr>
 8006fb8:	b138      	cbz	r0, 8006fca <_vfiprintf_r+0x176>
 8006fba:	2240      	movs	r2, #64	@ 0x40
 8006fbc:	9b04      	ldr	r3, [sp, #16]
 8006fbe:	eba0 000a 	sub.w	r0, r0, sl
 8006fc2:	4082      	lsls	r2, r0
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	3401      	adds	r4, #1
 8006fc8:	9304      	str	r3, [sp, #16]
 8006fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fce:	2206      	movs	r2, #6
 8006fd0:	4829      	ldr	r0, [pc, #164]	@ (8007078 <_vfiprintf_r+0x224>)
 8006fd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006fd6:	f000 faa3 	bl	8007520 <memchr>
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	d03f      	beq.n	800705e <_vfiprintf_r+0x20a>
 8006fde:	4b27      	ldr	r3, [pc, #156]	@ (800707c <_vfiprintf_r+0x228>)
 8006fe0:	bb1b      	cbnz	r3, 800702a <_vfiprintf_r+0x1d6>
 8006fe2:	9b03      	ldr	r3, [sp, #12]
 8006fe4:	3307      	adds	r3, #7
 8006fe6:	f023 0307 	bic.w	r3, r3, #7
 8006fea:	3308      	adds	r3, #8
 8006fec:	9303      	str	r3, [sp, #12]
 8006fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ff0:	443b      	add	r3, r7
 8006ff2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ff4:	e76a      	b.n	8006ecc <_vfiprintf_r+0x78>
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	2001      	movs	r0, #1
 8006ffa:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ffe:	e7a8      	b.n	8006f52 <_vfiprintf_r+0xfe>
 8007000:	2300      	movs	r3, #0
 8007002:	f04f 0c0a 	mov.w	ip, #10
 8007006:	4619      	mov	r1, r3
 8007008:	3401      	adds	r4, #1
 800700a:	9305      	str	r3, [sp, #20]
 800700c:	4620      	mov	r0, r4
 800700e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007012:	3a30      	subs	r2, #48	@ 0x30
 8007014:	2a09      	cmp	r2, #9
 8007016:	d903      	bls.n	8007020 <_vfiprintf_r+0x1cc>
 8007018:	2b00      	cmp	r3, #0
 800701a:	d0c6      	beq.n	8006faa <_vfiprintf_r+0x156>
 800701c:	9105      	str	r1, [sp, #20]
 800701e:	e7c4      	b.n	8006faa <_vfiprintf_r+0x156>
 8007020:	4604      	mov	r4, r0
 8007022:	2301      	movs	r3, #1
 8007024:	fb0c 2101 	mla	r1, ip, r1, r2
 8007028:	e7f0      	b.n	800700c <_vfiprintf_r+0x1b8>
 800702a:	ab03      	add	r3, sp, #12
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	462a      	mov	r2, r5
 8007030:	4630      	mov	r0, r6
 8007032:	4b13      	ldr	r3, [pc, #76]	@ (8007080 <_vfiprintf_r+0x22c>)
 8007034:	a904      	add	r1, sp, #16
 8007036:	f3af 8000 	nop.w
 800703a:	4607      	mov	r7, r0
 800703c:	1c78      	adds	r0, r7, #1
 800703e:	d1d6      	bne.n	8006fee <_vfiprintf_r+0x19a>
 8007040:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007042:	07d9      	lsls	r1, r3, #31
 8007044:	d405      	bmi.n	8007052 <_vfiprintf_r+0x1fe>
 8007046:	89ab      	ldrh	r3, [r5, #12]
 8007048:	059a      	lsls	r2, r3, #22
 800704a:	d402      	bmi.n	8007052 <_vfiprintf_r+0x1fe>
 800704c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800704e:	f7ff fc81 	bl	8006954 <__retarget_lock_release_recursive>
 8007052:	89ab      	ldrh	r3, [r5, #12]
 8007054:	065b      	lsls	r3, r3, #25
 8007056:	f53f af1f 	bmi.w	8006e98 <_vfiprintf_r+0x44>
 800705a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800705c:	e71e      	b.n	8006e9c <_vfiprintf_r+0x48>
 800705e:	ab03      	add	r3, sp, #12
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	462a      	mov	r2, r5
 8007064:	4630      	mov	r0, r6
 8007066:	4b06      	ldr	r3, [pc, #24]	@ (8007080 <_vfiprintf_r+0x22c>)
 8007068:	a904      	add	r1, sp, #16
 800706a:	f000 f87d 	bl	8007168 <_printf_i>
 800706e:	e7e4      	b.n	800703a <_vfiprintf_r+0x1e6>
 8007070:	08007a82 	.word	0x08007a82
 8007074:	08007a88 	.word	0x08007a88
 8007078:	08007a8c 	.word	0x08007a8c
 800707c:	00000000 	.word	0x00000000
 8007080:	08006e2f 	.word	0x08006e2f

08007084 <_printf_common>:
 8007084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007088:	4616      	mov	r6, r2
 800708a:	4698      	mov	r8, r3
 800708c:	688a      	ldr	r2, [r1, #8]
 800708e:	690b      	ldr	r3, [r1, #16]
 8007090:	4607      	mov	r7, r0
 8007092:	4293      	cmp	r3, r2
 8007094:	bfb8      	it	lt
 8007096:	4613      	movlt	r3, r2
 8007098:	6033      	str	r3, [r6, #0]
 800709a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800709e:	460c      	mov	r4, r1
 80070a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80070a4:	b10a      	cbz	r2, 80070aa <_printf_common+0x26>
 80070a6:	3301      	adds	r3, #1
 80070a8:	6033      	str	r3, [r6, #0]
 80070aa:	6823      	ldr	r3, [r4, #0]
 80070ac:	0699      	lsls	r1, r3, #26
 80070ae:	bf42      	ittt	mi
 80070b0:	6833      	ldrmi	r3, [r6, #0]
 80070b2:	3302      	addmi	r3, #2
 80070b4:	6033      	strmi	r3, [r6, #0]
 80070b6:	6825      	ldr	r5, [r4, #0]
 80070b8:	f015 0506 	ands.w	r5, r5, #6
 80070bc:	d106      	bne.n	80070cc <_printf_common+0x48>
 80070be:	f104 0a19 	add.w	sl, r4, #25
 80070c2:	68e3      	ldr	r3, [r4, #12]
 80070c4:	6832      	ldr	r2, [r6, #0]
 80070c6:	1a9b      	subs	r3, r3, r2
 80070c8:	42ab      	cmp	r3, r5
 80070ca:	dc2b      	bgt.n	8007124 <_printf_common+0xa0>
 80070cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80070d0:	6822      	ldr	r2, [r4, #0]
 80070d2:	3b00      	subs	r3, #0
 80070d4:	bf18      	it	ne
 80070d6:	2301      	movne	r3, #1
 80070d8:	0692      	lsls	r2, r2, #26
 80070da:	d430      	bmi.n	800713e <_printf_common+0xba>
 80070dc:	4641      	mov	r1, r8
 80070de:	4638      	mov	r0, r7
 80070e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80070e4:	47c8      	blx	r9
 80070e6:	3001      	adds	r0, #1
 80070e8:	d023      	beq.n	8007132 <_printf_common+0xae>
 80070ea:	6823      	ldr	r3, [r4, #0]
 80070ec:	6922      	ldr	r2, [r4, #16]
 80070ee:	f003 0306 	and.w	r3, r3, #6
 80070f2:	2b04      	cmp	r3, #4
 80070f4:	bf14      	ite	ne
 80070f6:	2500      	movne	r5, #0
 80070f8:	6833      	ldreq	r3, [r6, #0]
 80070fa:	f04f 0600 	mov.w	r6, #0
 80070fe:	bf08      	it	eq
 8007100:	68e5      	ldreq	r5, [r4, #12]
 8007102:	f104 041a 	add.w	r4, r4, #26
 8007106:	bf08      	it	eq
 8007108:	1aed      	subeq	r5, r5, r3
 800710a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800710e:	bf08      	it	eq
 8007110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007114:	4293      	cmp	r3, r2
 8007116:	bfc4      	itt	gt
 8007118:	1a9b      	subgt	r3, r3, r2
 800711a:	18ed      	addgt	r5, r5, r3
 800711c:	42b5      	cmp	r5, r6
 800711e:	d11a      	bne.n	8007156 <_printf_common+0xd2>
 8007120:	2000      	movs	r0, #0
 8007122:	e008      	b.n	8007136 <_printf_common+0xb2>
 8007124:	2301      	movs	r3, #1
 8007126:	4652      	mov	r2, sl
 8007128:	4641      	mov	r1, r8
 800712a:	4638      	mov	r0, r7
 800712c:	47c8      	blx	r9
 800712e:	3001      	adds	r0, #1
 8007130:	d103      	bne.n	800713a <_printf_common+0xb6>
 8007132:	f04f 30ff 	mov.w	r0, #4294967295
 8007136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800713a:	3501      	adds	r5, #1
 800713c:	e7c1      	b.n	80070c2 <_printf_common+0x3e>
 800713e:	2030      	movs	r0, #48	@ 0x30
 8007140:	18e1      	adds	r1, r4, r3
 8007142:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800714c:	4422      	add	r2, r4
 800714e:	3302      	adds	r3, #2
 8007150:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007154:	e7c2      	b.n	80070dc <_printf_common+0x58>
 8007156:	2301      	movs	r3, #1
 8007158:	4622      	mov	r2, r4
 800715a:	4641      	mov	r1, r8
 800715c:	4638      	mov	r0, r7
 800715e:	47c8      	blx	r9
 8007160:	3001      	adds	r0, #1
 8007162:	d0e6      	beq.n	8007132 <_printf_common+0xae>
 8007164:	3601      	adds	r6, #1
 8007166:	e7d9      	b.n	800711c <_printf_common+0x98>

08007168 <_printf_i>:
 8007168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800716c:	7e0f      	ldrb	r7, [r1, #24]
 800716e:	4691      	mov	r9, r2
 8007170:	2f78      	cmp	r7, #120	@ 0x78
 8007172:	4680      	mov	r8, r0
 8007174:	460c      	mov	r4, r1
 8007176:	469a      	mov	sl, r3
 8007178:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800717a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800717e:	d807      	bhi.n	8007190 <_printf_i+0x28>
 8007180:	2f62      	cmp	r7, #98	@ 0x62
 8007182:	d80a      	bhi.n	800719a <_printf_i+0x32>
 8007184:	2f00      	cmp	r7, #0
 8007186:	f000 80d1 	beq.w	800732c <_printf_i+0x1c4>
 800718a:	2f58      	cmp	r7, #88	@ 0x58
 800718c:	f000 80b8 	beq.w	8007300 <_printf_i+0x198>
 8007190:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007194:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007198:	e03a      	b.n	8007210 <_printf_i+0xa8>
 800719a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800719e:	2b15      	cmp	r3, #21
 80071a0:	d8f6      	bhi.n	8007190 <_printf_i+0x28>
 80071a2:	a101      	add	r1, pc, #4	@ (adr r1, 80071a8 <_printf_i+0x40>)
 80071a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071a8:	08007201 	.word	0x08007201
 80071ac:	08007215 	.word	0x08007215
 80071b0:	08007191 	.word	0x08007191
 80071b4:	08007191 	.word	0x08007191
 80071b8:	08007191 	.word	0x08007191
 80071bc:	08007191 	.word	0x08007191
 80071c0:	08007215 	.word	0x08007215
 80071c4:	08007191 	.word	0x08007191
 80071c8:	08007191 	.word	0x08007191
 80071cc:	08007191 	.word	0x08007191
 80071d0:	08007191 	.word	0x08007191
 80071d4:	08007313 	.word	0x08007313
 80071d8:	0800723f 	.word	0x0800723f
 80071dc:	080072cd 	.word	0x080072cd
 80071e0:	08007191 	.word	0x08007191
 80071e4:	08007191 	.word	0x08007191
 80071e8:	08007335 	.word	0x08007335
 80071ec:	08007191 	.word	0x08007191
 80071f0:	0800723f 	.word	0x0800723f
 80071f4:	08007191 	.word	0x08007191
 80071f8:	08007191 	.word	0x08007191
 80071fc:	080072d5 	.word	0x080072d5
 8007200:	6833      	ldr	r3, [r6, #0]
 8007202:	1d1a      	adds	r2, r3, #4
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	6032      	str	r2, [r6, #0]
 8007208:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800720c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007210:	2301      	movs	r3, #1
 8007212:	e09c      	b.n	800734e <_printf_i+0x1e6>
 8007214:	6833      	ldr	r3, [r6, #0]
 8007216:	6820      	ldr	r0, [r4, #0]
 8007218:	1d19      	adds	r1, r3, #4
 800721a:	6031      	str	r1, [r6, #0]
 800721c:	0606      	lsls	r6, r0, #24
 800721e:	d501      	bpl.n	8007224 <_printf_i+0xbc>
 8007220:	681d      	ldr	r5, [r3, #0]
 8007222:	e003      	b.n	800722c <_printf_i+0xc4>
 8007224:	0645      	lsls	r5, r0, #25
 8007226:	d5fb      	bpl.n	8007220 <_printf_i+0xb8>
 8007228:	f9b3 5000 	ldrsh.w	r5, [r3]
 800722c:	2d00      	cmp	r5, #0
 800722e:	da03      	bge.n	8007238 <_printf_i+0xd0>
 8007230:	232d      	movs	r3, #45	@ 0x2d
 8007232:	426d      	negs	r5, r5
 8007234:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007238:	230a      	movs	r3, #10
 800723a:	4858      	ldr	r0, [pc, #352]	@ (800739c <_printf_i+0x234>)
 800723c:	e011      	b.n	8007262 <_printf_i+0xfa>
 800723e:	6821      	ldr	r1, [r4, #0]
 8007240:	6833      	ldr	r3, [r6, #0]
 8007242:	0608      	lsls	r0, r1, #24
 8007244:	f853 5b04 	ldr.w	r5, [r3], #4
 8007248:	d402      	bmi.n	8007250 <_printf_i+0xe8>
 800724a:	0649      	lsls	r1, r1, #25
 800724c:	bf48      	it	mi
 800724e:	b2ad      	uxthmi	r5, r5
 8007250:	2f6f      	cmp	r7, #111	@ 0x6f
 8007252:	6033      	str	r3, [r6, #0]
 8007254:	bf14      	ite	ne
 8007256:	230a      	movne	r3, #10
 8007258:	2308      	moveq	r3, #8
 800725a:	4850      	ldr	r0, [pc, #320]	@ (800739c <_printf_i+0x234>)
 800725c:	2100      	movs	r1, #0
 800725e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007262:	6866      	ldr	r6, [r4, #4]
 8007264:	2e00      	cmp	r6, #0
 8007266:	60a6      	str	r6, [r4, #8]
 8007268:	db05      	blt.n	8007276 <_printf_i+0x10e>
 800726a:	6821      	ldr	r1, [r4, #0]
 800726c:	432e      	orrs	r6, r5
 800726e:	f021 0104 	bic.w	r1, r1, #4
 8007272:	6021      	str	r1, [r4, #0]
 8007274:	d04b      	beq.n	800730e <_printf_i+0x1a6>
 8007276:	4616      	mov	r6, r2
 8007278:	fbb5 f1f3 	udiv	r1, r5, r3
 800727c:	fb03 5711 	mls	r7, r3, r1, r5
 8007280:	5dc7      	ldrb	r7, [r0, r7]
 8007282:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007286:	462f      	mov	r7, r5
 8007288:	42bb      	cmp	r3, r7
 800728a:	460d      	mov	r5, r1
 800728c:	d9f4      	bls.n	8007278 <_printf_i+0x110>
 800728e:	2b08      	cmp	r3, #8
 8007290:	d10b      	bne.n	80072aa <_printf_i+0x142>
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	07df      	lsls	r7, r3, #31
 8007296:	d508      	bpl.n	80072aa <_printf_i+0x142>
 8007298:	6923      	ldr	r3, [r4, #16]
 800729a:	6861      	ldr	r1, [r4, #4]
 800729c:	4299      	cmp	r1, r3
 800729e:	bfde      	ittt	le
 80072a0:	2330      	movle	r3, #48	@ 0x30
 80072a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80072a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80072aa:	1b92      	subs	r2, r2, r6
 80072ac:	6122      	str	r2, [r4, #16]
 80072ae:	464b      	mov	r3, r9
 80072b0:	4621      	mov	r1, r4
 80072b2:	4640      	mov	r0, r8
 80072b4:	f8cd a000 	str.w	sl, [sp]
 80072b8:	aa03      	add	r2, sp, #12
 80072ba:	f7ff fee3 	bl	8007084 <_printf_common>
 80072be:	3001      	adds	r0, #1
 80072c0:	d14a      	bne.n	8007358 <_printf_i+0x1f0>
 80072c2:	f04f 30ff 	mov.w	r0, #4294967295
 80072c6:	b004      	add	sp, #16
 80072c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072cc:	6823      	ldr	r3, [r4, #0]
 80072ce:	f043 0320 	orr.w	r3, r3, #32
 80072d2:	6023      	str	r3, [r4, #0]
 80072d4:	2778      	movs	r7, #120	@ 0x78
 80072d6:	4832      	ldr	r0, [pc, #200]	@ (80073a0 <_printf_i+0x238>)
 80072d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	6831      	ldr	r1, [r6, #0]
 80072e0:	061f      	lsls	r7, r3, #24
 80072e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80072e6:	d402      	bmi.n	80072ee <_printf_i+0x186>
 80072e8:	065f      	lsls	r7, r3, #25
 80072ea:	bf48      	it	mi
 80072ec:	b2ad      	uxthmi	r5, r5
 80072ee:	6031      	str	r1, [r6, #0]
 80072f0:	07d9      	lsls	r1, r3, #31
 80072f2:	bf44      	itt	mi
 80072f4:	f043 0320 	orrmi.w	r3, r3, #32
 80072f8:	6023      	strmi	r3, [r4, #0]
 80072fa:	b11d      	cbz	r5, 8007304 <_printf_i+0x19c>
 80072fc:	2310      	movs	r3, #16
 80072fe:	e7ad      	b.n	800725c <_printf_i+0xf4>
 8007300:	4826      	ldr	r0, [pc, #152]	@ (800739c <_printf_i+0x234>)
 8007302:	e7e9      	b.n	80072d8 <_printf_i+0x170>
 8007304:	6823      	ldr	r3, [r4, #0]
 8007306:	f023 0320 	bic.w	r3, r3, #32
 800730a:	6023      	str	r3, [r4, #0]
 800730c:	e7f6      	b.n	80072fc <_printf_i+0x194>
 800730e:	4616      	mov	r6, r2
 8007310:	e7bd      	b.n	800728e <_printf_i+0x126>
 8007312:	6833      	ldr	r3, [r6, #0]
 8007314:	6825      	ldr	r5, [r4, #0]
 8007316:	1d18      	adds	r0, r3, #4
 8007318:	6961      	ldr	r1, [r4, #20]
 800731a:	6030      	str	r0, [r6, #0]
 800731c:	062e      	lsls	r6, r5, #24
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	d501      	bpl.n	8007326 <_printf_i+0x1be>
 8007322:	6019      	str	r1, [r3, #0]
 8007324:	e002      	b.n	800732c <_printf_i+0x1c4>
 8007326:	0668      	lsls	r0, r5, #25
 8007328:	d5fb      	bpl.n	8007322 <_printf_i+0x1ba>
 800732a:	8019      	strh	r1, [r3, #0]
 800732c:	2300      	movs	r3, #0
 800732e:	4616      	mov	r6, r2
 8007330:	6123      	str	r3, [r4, #16]
 8007332:	e7bc      	b.n	80072ae <_printf_i+0x146>
 8007334:	6833      	ldr	r3, [r6, #0]
 8007336:	2100      	movs	r1, #0
 8007338:	1d1a      	adds	r2, r3, #4
 800733a:	6032      	str	r2, [r6, #0]
 800733c:	681e      	ldr	r6, [r3, #0]
 800733e:	6862      	ldr	r2, [r4, #4]
 8007340:	4630      	mov	r0, r6
 8007342:	f000 f8ed 	bl	8007520 <memchr>
 8007346:	b108      	cbz	r0, 800734c <_printf_i+0x1e4>
 8007348:	1b80      	subs	r0, r0, r6
 800734a:	6060      	str	r0, [r4, #4]
 800734c:	6863      	ldr	r3, [r4, #4]
 800734e:	6123      	str	r3, [r4, #16]
 8007350:	2300      	movs	r3, #0
 8007352:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007356:	e7aa      	b.n	80072ae <_printf_i+0x146>
 8007358:	4632      	mov	r2, r6
 800735a:	4649      	mov	r1, r9
 800735c:	4640      	mov	r0, r8
 800735e:	6923      	ldr	r3, [r4, #16]
 8007360:	47d0      	blx	sl
 8007362:	3001      	adds	r0, #1
 8007364:	d0ad      	beq.n	80072c2 <_printf_i+0x15a>
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	079b      	lsls	r3, r3, #30
 800736a:	d413      	bmi.n	8007394 <_printf_i+0x22c>
 800736c:	68e0      	ldr	r0, [r4, #12]
 800736e:	9b03      	ldr	r3, [sp, #12]
 8007370:	4298      	cmp	r0, r3
 8007372:	bfb8      	it	lt
 8007374:	4618      	movlt	r0, r3
 8007376:	e7a6      	b.n	80072c6 <_printf_i+0x15e>
 8007378:	2301      	movs	r3, #1
 800737a:	4632      	mov	r2, r6
 800737c:	4649      	mov	r1, r9
 800737e:	4640      	mov	r0, r8
 8007380:	47d0      	blx	sl
 8007382:	3001      	adds	r0, #1
 8007384:	d09d      	beq.n	80072c2 <_printf_i+0x15a>
 8007386:	3501      	adds	r5, #1
 8007388:	68e3      	ldr	r3, [r4, #12]
 800738a:	9903      	ldr	r1, [sp, #12]
 800738c:	1a5b      	subs	r3, r3, r1
 800738e:	42ab      	cmp	r3, r5
 8007390:	dcf2      	bgt.n	8007378 <_printf_i+0x210>
 8007392:	e7eb      	b.n	800736c <_printf_i+0x204>
 8007394:	2500      	movs	r5, #0
 8007396:	f104 0619 	add.w	r6, r4, #25
 800739a:	e7f5      	b.n	8007388 <_printf_i+0x220>
 800739c:	08007a93 	.word	0x08007a93
 80073a0:	08007aa4 	.word	0x08007aa4

080073a4 <__swbuf_r>:
 80073a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a6:	460e      	mov	r6, r1
 80073a8:	4614      	mov	r4, r2
 80073aa:	4605      	mov	r5, r0
 80073ac:	b118      	cbz	r0, 80073b6 <__swbuf_r+0x12>
 80073ae:	6a03      	ldr	r3, [r0, #32]
 80073b0:	b90b      	cbnz	r3, 80073b6 <__swbuf_r+0x12>
 80073b2:	f7ff f993 	bl	80066dc <__sinit>
 80073b6:	69a3      	ldr	r3, [r4, #24]
 80073b8:	60a3      	str	r3, [r4, #8]
 80073ba:	89a3      	ldrh	r3, [r4, #12]
 80073bc:	071a      	lsls	r2, r3, #28
 80073be:	d501      	bpl.n	80073c4 <__swbuf_r+0x20>
 80073c0:	6923      	ldr	r3, [r4, #16]
 80073c2:	b943      	cbnz	r3, 80073d6 <__swbuf_r+0x32>
 80073c4:	4621      	mov	r1, r4
 80073c6:	4628      	mov	r0, r5
 80073c8:	f000 f82a 	bl	8007420 <__swsetup_r>
 80073cc:	b118      	cbz	r0, 80073d6 <__swbuf_r+0x32>
 80073ce:	f04f 37ff 	mov.w	r7, #4294967295
 80073d2:	4638      	mov	r0, r7
 80073d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073d6:	6823      	ldr	r3, [r4, #0]
 80073d8:	6922      	ldr	r2, [r4, #16]
 80073da:	b2f6      	uxtb	r6, r6
 80073dc:	1a98      	subs	r0, r3, r2
 80073de:	6963      	ldr	r3, [r4, #20]
 80073e0:	4637      	mov	r7, r6
 80073e2:	4283      	cmp	r3, r0
 80073e4:	dc05      	bgt.n	80073f2 <__swbuf_r+0x4e>
 80073e6:	4621      	mov	r1, r4
 80073e8:	4628      	mov	r0, r5
 80073ea:	f7ff f8af 	bl	800654c <_fflush_r>
 80073ee:	2800      	cmp	r0, #0
 80073f0:	d1ed      	bne.n	80073ce <__swbuf_r+0x2a>
 80073f2:	68a3      	ldr	r3, [r4, #8]
 80073f4:	3b01      	subs	r3, #1
 80073f6:	60a3      	str	r3, [r4, #8]
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	1c5a      	adds	r2, r3, #1
 80073fc:	6022      	str	r2, [r4, #0]
 80073fe:	701e      	strb	r6, [r3, #0]
 8007400:	6962      	ldr	r2, [r4, #20]
 8007402:	1c43      	adds	r3, r0, #1
 8007404:	429a      	cmp	r2, r3
 8007406:	d004      	beq.n	8007412 <__swbuf_r+0x6e>
 8007408:	89a3      	ldrh	r3, [r4, #12]
 800740a:	07db      	lsls	r3, r3, #31
 800740c:	d5e1      	bpl.n	80073d2 <__swbuf_r+0x2e>
 800740e:	2e0a      	cmp	r6, #10
 8007410:	d1df      	bne.n	80073d2 <__swbuf_r+0x2e>
 8007412:	4621      	mov	r1, r4
 8007414:	4628      	mov	r0, r5
 8007416:	f7ff f899 	bl	800654c <_fflush_r>
 800741a:	2800      	cmp	r0, #0
 800741c:	d0d9      	beq.n	80073d2 <__swbuf_r+0x2e>
 800741e:	e7d6      	b.n	80073ce <__swbuf_r+0x2a>

08007420 <__swsetup_r>:
 8007420:	b538      	push	{r3, r4, r5, lr}
 8007422:	4b29      	ldr	r3, [pc, #164]	@ (80074c8 <__swsetup_r+0xa8>)
 8007424:	4605      	mov	r5, r0
 8007426:	6818      	ldr	r0, [r3, #0]
 8007428:	460c      	mov	r4, r1
 800742a:	b118      	cbz	r0, 8007434 <__swsetup_r+0x14>
 800742c:	6a03      	ldr	r3, [r0, #32]
 800742e:	b90b      	cbnz	r3, 8007434 <__swsetup_r+0x14>
 8007430:	f7ff f954 	bl	80066dc <__sinit>
 8007434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007438:	0719      	lsls	r1, r3, #28
 800743a:	d422      	bmi.n	8007482 <__swsetup_r+0x62>
 800743c:	06da      	lsls	r2, r3, #27
 800743e:	d407      	bmi.n	8007450 <__swsetup_r+0x30>
 8007440:	2209      	movs	r2, #9
 8007442:	602a      	str	r2, [r5, #0]
 8007444:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007448:	f04f 30ff 	mov.w	r0, #4294967295
 800744c:	81a3      	strh	r3, [r4, #12]
 800744e:	e033      	b.n	80074b8 <__swsetup_r+0x98>
 8007450:	0758      	lsls	r0, r3, #29
 8007452:	d512      	bpl.n	800747a <__swsetup_r+0x5a>
 8007454:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007456:	b141      	cbz	r1, 800746a <__swsetup_r+0x4a>
 8007458:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800745c:	4299      	cmp	r1, r3
 800745e:	d002      	beq.n	8007466 <__swsetup_r+0x46>
 8007460:	4628      	mov	r0, r5
 8007462:	f7ff fa81 	bl	8006968 <_free_r>
 8007466:	2300      	movs	r3, #0
 8007468:	6363      	str	r3, [r4, #52]	@ 0x34
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007470:	81a3      	strh	r3, [r4, #12]
 8007472:	2300      	movs	r3, #0
 8007474:	6063      	str	r3, [r4, #4]
 8007476:	6923      	ldr	r3, [r4, #16]
 8007478:	6023      	str	r3, [r4, #0]
 800747a:	89a3      	ldrh	r3, [r4, #12]
 800747c:	f043 0308 	orr.w	r3, r3, #8
 8007480:	81a3      	strh	r3, [r4, #12]
 8007482:	6923      	ldr	r3, [r4, #16]
 8007484:	b94b      	cbnz	r3, 800749a <__swsetup_r+0x7a>
 8007486:	89a3      	ldrh	r3, [r4, #12]
 8007488:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800748c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007490:	d003      	beq.n	800749a <__swsetup_r+0x7a>
 8007492:	4621      	mov	r1, r4
 8007494:	4628      	mov	r0, r5
 8007496:	f000 f8b2 	bl	80075fe <__smakebuf_r>
 800749a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800749e:	f013 0201 	ands.w	r2, r3, #1
 80074a2:	d00a      	beq.n	80074ba <__swsetup_r+0x9a>
 80074a4:	2200      	movs	r2, #0
 80074a6:	60a2      	str	r2, [r4, #8]
 80074a8:	6962      	ldr	r2, [r4, #20]
 80074aa:	4252      	negs	r2, r2
 80074ac:	61a2      	str	r2, [r4, #24]
 80074ae:	6922      	ldr	r2, [r4, #16]
 80074b0:	b942      	cbnz	r2, 80074c4 <__swsetup_r+0xa4>
 80074b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80074b6:	d1c5      	bne.n	8007444 <__swsetup_r+0x24>
 80074b8:	bd38      	pop	{r3, r4, r5, pc}
 80074ba:	0799      	lsls	r1, r3, #30
 80074bc:	bf58      	it	pl
 80074be:	6962      	ldrpl	r2, [r4, #20]
 80074c0:	60a2      	str	r2, [r4, #8]
 80074c2:	e7f4      	b.n	80074ae <__swsetup_r+0x8e>
 80074c4:	2000      	movs	r0, #0
 80074c6:	e7f7      	b.n	80074b8 <__swsetup_r+0x98>
 80074c8:	200000d4 	.word	0x200000d4

080074cc <memmove>:
 80074cc:	4288      	cmp	r0, r1
 80074ce:	b510      	push	{r4, lr}
 80074d0:	eb01 0402 	add.w	r4, r1, r2
 80074d4:	d902      	bls.n	80074dc <memmove+0x10>
 80074d6:	4284      	cmp	r4, r0
 80074d8:	4623      	mov	r3, r4
 80074da:	d807      	bhi.n	80074ec <memmove+0x20>
 80074dc:	1e43      	subs	r3, r0, #1
 80074de:	42a1      	cmp	r1, r4
 80074e0:	d008      	beq.n	80074f4 <memmove+0x28>
 80074e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074ea:	e7f8      	b.n	80074de <memmove+0x12>
 80074ec:	4601      	mov	r1, r0
 80074ee:	4402      	add	r2, r0
 80074f0:	428a      	cmp	r2, r1
 80074f2:	d100      	bne.n	80074f6 <memmove+0x2a>
 80074f4:	bd10      	pop	{r4, pc}
 80074f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074fe:	e7f7      	b.n	80074f0 <memmove+0x24>

08007500 <_sbrk_r>:
 8007500:	b538      	push	{r3, r4, r5, lr}
 8007502:	2300      	movs	r3, #0
 8007504:	4d05      	ldr	r5, [pc, #20]	@ (800751c <_sbrk_r+0x1c>)
 8007506:	4604      	mov	r4, r0
 8007508:	4608      	mov	r0, r1
 800750a:	602b      	str	r3, [r5, #0]
 800750c:	f7f9 fe16 	bl	800113c <_sbrk>
 8007510:	1c43      	adds	r3, r0, #1
 8007512:	d102      	bne.n	800751a <_sbrk_r+0x1a>
 8007514:	682b      	ldr	r3, [r5, #0]
 8007516:	b103      	cbz	r3, 800751a <_sbrk_r+0x1a>
 8007518:	6023      	str	r3, [r4, #0]
 800751a:	bd38      	pop	{r3, r4, r5, pc}
 800751c:	20000648 	.word	0x20000648

08007520 <memchr>:
 8007520:	4603      	mov	r3, r0
 8007522:	b510      	push	{r4, lr}
 8007524:	b2c9      	uxtb	r1, r1
 8007526:	4402      	add	r2, r0
 8007528:	4293      	cmp	r3, r2
 800752a:	4618      	mov	r0, r3
 800752c:	d101      	bne.n	8007532 <memchr+0x12>
 800752e:	2000      	movs	r0, #0
 8007530:	e003      	b.n	800753a <memchr+0x1a>
 8007532:	7804      	ldrb	r4, [r0, #0]
 8007534:	3301      	adds	r3, #1
 8007536:	428c      	cmp	r4, r1
 8007538:	d1f6      	bne.n	8007528 <memchr+0x8>
 800753a:	bd10      	pop	{r4, pc}

0800753c <memcpy>:
 800753c:	440a      	add	r2, r1
 800753e:	4291      	cmp	r1, r2
 8007540:	f100 33ff 	add.w	r3, r0, #4294967295
 8007544:	d100      	bne.n	8007548 <memcpy+0xc>
 8007546:	4770      	bx	lr
 8007548:	b510      	push	{r4, lr}
 800754a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800754e:	4291      	cmp	r1, r2
 8007550:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007554:	d1f9      	bne.n	800754a <memcpy+0xe>
 8007556:	bd10      	pop	{r4, pc}

08007558 <_realloc_r>:
 8007558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800755c:	4607      	mov	r7, r0
 800755e:	4614      	mov	r4, r2
 8007560:	460d      	mov	r5, r1
 8007562:	b921      	cbnz	r1, 800756e <_realloc_r+0x16>
 8007564:	4611      	mov	r1, r2
 8007566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800756a:	f7ff ba67 	b.w	8006a3c <_malloc_r>
 800756e:	b92a      	cbnz	r2, 800757c <_realloc_r+0x24>
 8007570:	f7ff f9fa 	bl	8006968 <_free_r>
 8007574:	4625      	mov	r5, r4
 8007576:	4628      	mov	r0, r5
 8007578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800757c:	f000 f89e 	bl	80076bc <_malloc_usable_size_r>
 8007580:	4284      	cmp	r4, r0
 8007582:	4606      	mov	r6, r0
 8007584:	d802      	bhi.n	800758c <_realloc_r+0x34>
 8007586:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800758a:	d8f4      	bhi.n	8007576 <_realloc_r+0x1e>
 800758c:	4621      	mov	r1, r4
 800758e:	4638      	mov	r0, r7
 8007590:	f7ff fa54 	bl	8006a3c <_malloc_r>
 8007594:	4680      	mov	r8, r0
 8007596:	b908      	cbnz	r0, 800759c <_realloc_r+0x44>
 8007598:	4645      	mov	r5, r8
 800759a:	e7ec      	b.n	8007576 <_realloc_r+0x1e>
 800759c:	42b4      	cmp	r4, r6
 800759e:	4622      	mov	r2, r4
 80075a0:	4629      	mov	r1, r5
 80075a2:	bf28      	it	cs
 80075a4:	4632      	movcs	r2, r6
 80075a6:	f7ff ffc9 	bl	800753c <memcpy>
 80075aa:	4629      	mov	r1, r5
 80075ac:	4638      	mov	r0, r7
 80075ae:	f7ff f9db 	bl	8006968 <_free_r>
 80075b2:	e7f1      	b.n	8007598 <_realloc_r+0x40>

080075b4 <__swhatbuf_r>:
 80075b4:	b570      	push	{r4, r5, r6, lr}
 80075b6:	460c      	mov	r4, r1
 80075b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075bc:	4615      	mov	r5, r2
 80075be:	2900      	cmp	r1, #0
 80075c0:	461e      	mov	r6, r3
 80075c2:	b096      	sub	sp, #88	@ 0x58
 80075c4:	da0c      	bge.n	80075e0 <__swhatbuf_r+0x2c>
 80075c6:	89a3      	ldrh	r3, [r4, #12]
 80075c8:	2100      	movs	r1, #0
 80075ca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80075ce:	bf14      	ite	ne
 80075d0:	2340      	movne	r3, #64	@ 0x40
 80075d2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80075d6:	2000      	movs	r0, #0
 80075d8:	6031      	str	r1, [r6, #0]
 80075da:	602b      	str	r3, [r5, #0]
 80075dc:	b016      	add	sp, #88	@ 0x58
 80075de:	bd70      	pop	{r4, r5, r6, pc}
 80075e0:	466a      	mov	r2, sp
 80075e2:	f000 f849 	bl	8007678 <_fstat_r>
 80075e6:	2800      	cmp	r0, #0
 80075e8:	dbed      	blt.n	80075c6 <__swhatbuf_r+0x12>
 80075ea:	9901      	ldr	r1, [sp, #4]
 80075ec:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80075f0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80075f4:	4259      	negs	r1, r3
 80075f6:	4159      	adcs	r1, r3
 80075f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80075fc:	e7eb      	b.n	80075d6 <__swhatbuf_r+0x22>

080075fe <__smakebuf_r>:
 80075fe:	898b      	ldrh	r3, [r1, #12]
 8007600:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007602:	079d      	lsls	r5, r3, #30
 8007604:	4606      	mov	r6, r0
 8007606:	460c      	mov	r4, r1
 8007608:	d507      	bpl.n	800761a <__smakebuf_r+0x1c>
 800760a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800760e:	6023      	str	r3, [r4, #0]
 8007610:	6123      	str	r3, [r4, #16]
 8007612:	2301      	movs	r3, #1
 8007614:	6163      	str	r3, [r4, #20]
 8007616:	b003      	add	sp, #12
 8007618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800761a:	466a      	mov	r2, sp
 800761c:	ab01      	add	r3, sp, #4
 800761e:	f7ff ffc9 	bl	80075b4 <__swhatbuf_r>
 8007622:	9f00      	ldr	r7, [sp, #0]
 8007624:	4605      	mov	r5, r0
 8007626:	4639      	mov	r1, r7
 8007628:	4630      	mov	r0, r6
 800762a:	f7ff fa07 	bl	8006a3c <_malloc_r>
 800762e:	b948      	cbnz	r0, 8007644 <__smakebuf_r+0x46>
 8007630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007634:	059a      	lsls	r2, r3, #22
 8007636:	d4ee      	bmi.n	8007616 <__smakebuf_r+0x18>
 8007638:	f023 0303 	bic.w	r3, r3, #3
 800763c:	f043 0302 	orr.w	r3, r3, #2
 8007640:	81a3      	strh	r3, [r4, #12]
 8007642:	e7e2      	b.n	800760a <__smakebuf_r+0xc>
 8007644:	89a3      	ldrh	r3, [r4, #12]
 8007646:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800764a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800764e:	81a3      	strh	r3, [r4, #12]
 8007650:	9b01      	ldr	r3, [sp, #4]
 8007652:	6020      	str	r0, [r4, #0]
 8007654:	b15b      	cbz	r3, 800766e <__smakebuf_r+0x70>
 8007656:	4630      	mov	r0, r6
 8007658:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800765c:	f000 f81e 	bl	800769c <_isatty_r>
 8007660:	b128      	cbz	r0, 800766e <__smakebuf_r+0x70>
 8007662:	89a3      	ldrh	r3, [r4, #12]
 8007664:	f023 0303 	bic.w	r3, r3, #3
 8007668:	f043 0301 	orr.w	r3, r3, #1
 800766c:	81a3      	strh	r3, [r4, #12]
 800766e:	89a3      	ldrh	r3, [r4, #12]
 8007670:	431d      	orrs	r5, r3
 8007672:	81a5      	strh	r5, [r4, #12]
 8007674:	e7cf      	b.n	8007616 <__smakebuf_r+0x18>
	...

08007678 <_fstat_r>:
 8007678:	b538      	push	{r3, r4, r5, lr}
 800767a:	2300      	movs	r3, #0
 800767c:	4d06      	ldr	r5, [pc, #24]	@ (8007698 <_fstat_r+0x20>)
 800767e:	4604      	mov	r4, r0
 8007680:	4608      	mov	r0, r1
 8007682:	4611      	mov	r1, r2
 8007684:	602b      	str	r3, [r5, #0]
 8007686:	f7fe fd5e 	bl	8006146 <_fstat>
 800768a:	1c43      	adds	r3, r0, #1
 800768c:	d102      	bne.n	8007694 <_fstat_r+0x1c>
 800768e:	682b      	ldr	r3, [r5, #0]
 8007690:	b103      	cbz	r3, 8007694 <_fstat_r+0x1c>
 8007692:	6023      	str	r3, [r4, #0]
 8007694:	bd38      	pop	{r3, r4, r5, pc}
 8007696:	bf00      	nop
 8007698:	20000648 	.word	0x20000648

0800769c <_isatty_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	2300      	movs	r3, #0
 80076a0:	4d05      	ldr	r5, [pc, #20]	@ (80076b8 <_isatty_r+0x1c>)
 80076a2:	4604      	mov	r4, r0
 80076a4:	4608      	mov	r0, r1
 80076a6:	602b      	str	r3, [r5, #0]
 80076a8:	f7fe feb2 	bl	8006410 <_isatty>
 80076ac:	1c43      	adds	r3, r0, #1
 80076ae:	d102      	bne.n	80076b6 <_isatty_r+0x1a>
 80076b0:	682b      	ldr	r3, [r5, #0]
 80076b2:	b103      	cbz	r3, 80076b6 <_isatty_r+0x1a>
 80076b4:	6023      	str	r3, [r4, #0]
 80076b6:	bd38      	pop	{r3, r4, r5, pc}
 80076b8:	20000648 	.word	0x20000648

080076bc <_malloc_usable_size_r>:
 80076bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076c0:	1f18      	subs	r0, r3, #4
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	bfbc      	itt	lt
 80076c6:	580b      	ldrlt	r3, [r1, r0]
 80076c8:	18c0      	addlt	r0, r0, r3
 80076ca:	4770      	bx	lr

080076cc <_init>:
 80076cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ce:	bf00      	nop
 80076d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076d2:	bc08      	pop	{r3}
 80076d4:	469e      	mov	lr, r3
 80076d6:	4770      	bx	lr

080076d8 <_fini>:
 80076d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076da:	bf00      	nop
 80076dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076de:	bc08      	pop	{r3}
 80076e0:	469e      	mov	lr, r3
 80076e2:	4770      	bx	lr
